{
    "java.util.Vector.add(int, E)": {
        "args": [
            "int", 
            "E"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.math.BigDecimal.subtract(BigDecimal)": {
        "args": [
            "BigDecimal"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Deque.peekFirst()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.RSAKeyGenParameterSpec.getKeysize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.DeflaterInputStream.mark(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousServerSocketChannel.setOption(SocketOption, T)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "SocketOption", 
            "T"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.awaitUntil(Date)": {
        "args": [
            "Date"
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.concurrent.ConcurrentHashMap.search(long, BiFunction)": {
        "args": [
            "long", 
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.spi.AbstractSelector.deregister(AbstractSelectionKey)": {
        "args": [
            "AbstractSelectionKey"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Deflater.getBytesRead()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.rotate(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.Console.readPassword()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOError"
        ], 
        "throws": []
    }, 
    "java.util.AbstractMap.putAll(Map)": {
        "args": [
            "Map"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.OptionalDouble.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Inflater.getTotalOut()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.LineNumberInputStream.read(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.applet.Applet.getAccessibleRole()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Format.format(Object, StringBuffer, FieldPosition)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object", 
            "StringBuffer", 
            "FieldPosition"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.SortedMap.values()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.equals(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahEra.range(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.getNextRightHit(TextHitInfo)": {
        "args": [
            "TextHitInfo"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.plus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.createImage(ImageProducer)": {
        "args": [
            "ImageProducer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahDate.minus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.emptyList()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.WildcardType.getLowerBounds()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "TypeNotPresentException", 
            "MalformedParameterizedTypeException"
        ], 
        "throws": []
    }, 
    "java.lang.StrictMath.abs(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.intersects(Rectangle2D)": {
        "args": [
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.MulticastChannel.join(InetAddress, NetworkInterface, InetAddress)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "InetAddress", 
            "NetworkInterface", 
            "InetAddress"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalStateException", 
            "UnsupportedOperationException", 
            "ClosedChannelException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.HashSet.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.remove()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.util.ListIterator.add(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.management.ManagementFactory.getPlatformMXBeans(MBeanServerConnection, Class)": {
        "args": [
            "MBeanServerConnection", 
            "Class"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Component.printAll(Graphics)": {
        "args": [
            "Graphics"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ServiceLoader.load(Class, ClassLoader)": {
        "args": [
            "Class", 
            "ClassLoader"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Polygon.reset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StringBufferInputStream.available()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.getGlobalActiveWindow()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.util.stream.Collectors.partitioningBy(Predicate, Collector)": {
        "args": [
            "Predicate", 
            "Collector"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.WindowEvent.getWindow()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsOpenCursorsAcrossCommit()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.channels.spi.AsynchronousChannelProvider.openAsynchronousServerSocketChannel(AsynchronousChannelGroup)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "AsynchronousChannelGroup"
        ], 
        "@throws": [
            "IllegalChannelGroupException", 
            "ShutdownChannelGroupException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.geom.Arc2D.setAngles(Point2D, Point2D)": {
        "args": [
            "Point2D", 
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.unlock()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalMonitorStateException"
        ], 
        "throws": []
    }, 
    "java.util.OptionalInt.getAsInt()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.text.RuleBasedCollator.compare(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateNString(String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.chrono.ChronoLocalDateTime.timeLineOrder()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ManagementFactory.getPlatformMXBean(MBeanServerConnection, Class)": {
        "args": [
            "MBeanServerConnection", 
            "Class"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.DataBufferUShort.getData(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipOutputStream.closeEntry()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ZipException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.channels.SocketChannel.bind(SocketAddress)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "SocketAddress"
        ], 
        "@throws": [
            "ConnectionPendingException", 
            "AlreadyBoundException", 
            "UnsupportedAddressTypeException", 
            "ClosedChannelException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.zip.ZipInputStream.getNextEntry()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ZipException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Locale.getRange()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.minusMinutes(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.getZone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.getDataElements(int, Object)": {
        "args": [
            "int", 
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "ArrayIndexOutOfBoundsException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.security.KeyStore.load(InputStream, char[])": {
        "args": [
            "InputStream", 
            "char[]"
        ], 
        "@throws": [
            "IOException", 
            "NoSuchAlgorithmException", 
            "CertificateException"
        ], 
        "throws": [
            "IOException", 
            "NoSuchAlgorithmException", 
            "CertificateException"
        ]
    }, 
    "java.io.DataInput.readUTF()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException", 
            "UTFDataFormatException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Thread.getStackTrace()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.lang.Package.getDeclaredAnnotations()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Area.isPolygonal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.getRotateInstance(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.GregorianCalendar.getLeastMaximum(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormat.setCalendar(Calendar)": {
        "args": [
            "Calendar"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.isLeapYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.MonitorInfo.from(CompositeData)": {
        "args": [
            "CompositeData"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.Runtime.halt(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.reduce(DoubleBinaryOperator)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DoubleBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.InetAddress.isMCNodeLocal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Color.getColor(String, Color)": {
        "args": [
            "String", 
            "Color"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.offer(E)": {
        "args": [
            "E"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getLong(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.Statement.isClosed()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.spliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.setWindingRule(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.Iterable.spliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.BiFunction.apply(T, U)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "U"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.list(PrintStream, int)": {
        "args": [
            "PrintStream", 
            "int"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.math.BigDecimal.floatValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.toLocalDate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.AccessMode.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuilder.insert(int, char[], int, int)": {
        "args": [
            "int", 
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.getPathIterator(AffineTransform)": {
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateObject(String, Object, SQLType, int)": {
        "args": [
            "String", 
            "Object", 
            "SQLType", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.ZonedDateTime.minus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.UUID.getLeastSignificantBits()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSource.startDrag(DragGestureEvent, Cursor, Transferable, DragSourceListener, FlavorMap)": {
        "args": [
            "DragGestureEvent", 
            "Cursor", 
            "Transferable", 
            "DragSourceListener", 
            "FlavorMap"
        ], 
        "@throws": [
            "InvalidDnDOperationException"
        ], 
        "throws": [
            "InvalidDnDOperationException"
        ]
    }, 
    "java.net.Socket.isInputShutdown()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.contentsRestored()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.getRawResult()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.get(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.StampedLock.unlockRead(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalMonitorStateException"
        ], 
        "throws": []
    }, 
    "java.nio.file.Paths.get(String, String[])": {
        "args": [
            "String", 
            "String[]"
        ], 
        "@throws": [
            "InvalidPathException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDate.until(Temporal, TemporalUnit)": {
        "args": [
            "Temporal", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.logging.LogRecord.getThreadID()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ConvolveOp.getBounds2D(Raster)": {
        "args": [
            "Raster"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.atTime(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.Toolkit.getDefaultToolkit()": {
        "args": [
            ""
        ], 
        "@throws": [
            "AWTError"
        ], 
        "throws": []
    }, 
    "java.lang.StringBuilder.append(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.IntBuffer.put(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.io.FileInputStream.getFD()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.text.Collator.equals(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.checkedMap(Map, Class, Class)": {
        "args": [
            "Map", 
            "Class", 
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.getHeaderFieldKey(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.GatheringByteChannel.write(ByteBuffer[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer[]"
        ], 
        "@throws": [
            "NonWritableChannelException", 
            "ClosedChannelException", 
            "AsynchronousCloseException", 
            "ClosedByInterruptException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.SecurityManager.checkSetFactory()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.io.BufferedReader.read()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Calendar.compareTo(Calendar)": {
        "args": [
            "Calendar"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.setSize(Dimension)": {
        "args": [
            "Dimension"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.DigestOutputStream.on(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.of(int, int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.logging.Logger.removeHandler(Handler)": {
        "args": [
            "Handler"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.lang.InheritableThreadLocal.childValue(T)": {
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.StringSelection.lostOwnership(Clipboard, Transferable)": {
        "args": [
            "Clipboard", 
            "Transferable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.drawImage(Image, int, int, Color, ImageObserver)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Image", 
            "int", 
            "int", 
            "Color", 
            "ImageObserver"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Checkbox.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.between(Temporal, Temporal)": {
        "args": [
            "Temporal", 
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.beans.PropertyEditorSupport.getValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.copyOfRange(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.logging.Logger.warning(Supplier)": {
        "args": [
            "Supplier"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Watchable.register(WatchService, Kind[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "WatchService", 
            "Kind[]"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IllegalArgumentException", 
            "ClosedWatchServiceException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.function.BiPredicate.or(BiPredicate)": {
        "args": [
            "BiPredicate"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.List.getItem(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertificateFactory.generateCertPath(InputStream, String)": {
        "args": [
            "InputStream", 
            "String"
        ], 
        "@throws": [
            "CertificateException"
        ], 
        "throws": [
            "CertificateException"
        ]
    }, 
    "java.lang.Long.max(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.ProtectionDomain.implies(Permission)": {
        "args": [
            "Permission"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.flushSpi()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "BackingStoreException"
        ], 
        "throws": [
            "BackingStoreException"
        ]
    }, 
    "java.lang.StrictMath.toDegrees(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.execute()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLTimeoutException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.Policy.getPermissions(CodeSource)": {
        "args": [
            "CodeSource"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Choice.getItemListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextField.setEchoChar(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.execute(String, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException", 
            "SQLTimeoutException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.font.TextHitInfo.afterOffset(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.getShearY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Color.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.compare(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AccessController.checkPermission(Permission)": {
        "args": [
            "Permission"
        ], 
        "@throws": [
            "AccessControlException", 
            "NullPointerException"
        ], 
        "throws": [
            "AccessControlException"
        ]
    }, 
    "java.util.Calendar.getDisplayName(int, int, Locale)": {
        "args": [
            "int", 
            "int", 
            "Locale"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkAccept(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.AccessibleObject.getAnnotation(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.ZoneId.from(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.regex.Pattern.compile(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "PatternSyntaxException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateNClob(String, Reader, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Reader", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.invoke.MethodHandles.filterArguments(MethodHandle, int, MethodHandle[])": {
        "args": [
            "MethodHandle", 
            "int", 
            "MethodHandle[]"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.management.RuntimeMXBean.getSpecVersion()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.font.LineMetrics.getStrikethroughThickness()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.contains(Rectangle2D)": {
        "args": [
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsResultSetType(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Arrays.copyOf(boolean[], int)": {
        "args": [
            "boolean[]", 
            "int"
        ], 
        "@throws": [
            "NegativeArraySizeException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Spliterator.trySplit()": {
        "Abstract": [
            "Y", 
            "Y", 
            "Y", 
            "Y", 
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.DeflaterOutputStream.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.TileObserver.tileUpdate(WritableRenderedImage, int, int, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "WritableRenderedImage", 
            "int", 
            "int", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsEnvironment.getAllFonts()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.minus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.color.ICC_ProfileGray.getMediaWhitePoint()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getHierarchyBoundsListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuItem.getMaximumAccessibleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.mouseMove(Event, int, int)": {
        "args": [
            "Event", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.setToShear(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.withSeconds(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.RobotPeer.mouseWheel(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Field.getType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantLock.hasQueuedThreads()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BandedSampleModel.getSampleFloat(int, int, int, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.SecureDirectoryStream.move(T, SecureDirectoryStream, T)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "SecureDirectoryStream", 
            "T"
        ], 
        "@throws": [
            "ClosedDirectoryStreamException", 
            "FileAlreadyExistsException", 
            "AtomicMoveNotSupportedException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.TimeUnit.sleep(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.beans.Beans.isGuiAvailable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.XMLFormatter.format(LogRecord)": {
        "args": [
            "LogRecord"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Runtime.exec(String, String[])": {
        "args": [
            "String", 
            "String[]"
        ], 
        "@throws": [
            "SecurityException", 
            "IOException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.Provider.keys()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.spi.LocaleNameProvider.getDisplayCountry(String, Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Locale"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDateTime.toInstant(ZoneOffset)": {
        "args": [
            "ZoneOffset"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.synchronizedSortedMap(SortedMap)": {
        "args": [
            "SortedMap"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.Pipe.source()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.divide(BigDecimal, int, int)": {
        "args": [
            "BigDecimal", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ArithmeticException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Toolkit.createScrollPane(ScrollPane)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ScrollPane"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.util.concurrent.Phaser.getArrivedParties()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRLSelector.addIssuerName(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.TrayIcon.getActionListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationException.getCause()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeSet.headSet(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.stream.IntStream.spliterator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.contains(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "NullPointerException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.MinguoChronology.date(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeMap.lowerKey(K)": {
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.Principal.equals(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.NetworkInterface.isLoopback()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.util.logging.Logger.getResourceBundle()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDateTime.adjustInto(Temporal)": {
        "args": [
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.logging.Handler.setFormatter(Formatter)": {
        "args": [
            "Formatter"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.lang.Integer.divideUnsigned(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FilterOutputStream.write(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Insets.set(int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Executable.getAnnotatedReceiverType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.atMonth(Month)": {
        "args": [
            "Month"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.annotation.Retention.value()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.pollLastEntry()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.HashMap.merge(K, V, BiFunction)": {
        "args": [
            "K", 
            "V", 
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Timestamp.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.transform(double[], int, double[], int, int)": {
        "args": [
            "double[]", 
            "int", 
            "double[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.tanh(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.newDirectoryStream(Path)": {
        "args": [
            "Path"
        ], 
        "@throws": [
            "NotDirectoryException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.ConcurrentHashMap.forEachEntry(long, Function, Consumer)": {
        "args": [
            "long", 
            "Function", 
            "Consumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.setSize(Dimension)": {
        "args": [
            "Dimension"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseAdapter.mouseClicked(MouseEvent)": {
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.isValid(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.chrono.JapaneseChronology.date(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.getTranslateX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.EnumSet.noneOf(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.font.ShapeGraphicAttribute.getAdvance()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.getCorePoolSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Time.setDate(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.logging.Logger.logrb(Level, String, String, String, String, Object)": {
        "args": [
            "Level", 
            "String", 
            "String", 
            "String", 
            "String", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeMap.lastEntry()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneRules.getStandardOffset(Instant)": {
        "args": [
            "Instant"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Float.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.asin(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipFile.getEntry(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.nio.charset.CoderResult.isMalformed()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Executor.execute(Runnable)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Runnable"
        ], 
        "@throws": [
            "RejectedExecutionException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Character.isLowerCase(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.addVetoableChangeListener(String, VetoableChangeListener)": {
        "args": [
            "String", 
            "VetoableChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.getColorSpace()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setTimestamp(int, Timestamp)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Timestamp"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.getQueueLength()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.ComponentAdapter.componentMoved(ComponentEvent)": {
        "args": [
            "ComponentEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServiceAvailableEvent.getCurrentServiceSelectors()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.store(OutputStream, char[])": {
        "args": [
            "OutputStream", 
            "char[]"
        ], 
        "@throws": [
            "KeyStoreException", 
            "IOException", 
            "NoSuchAlgorithmException", 
            "CertificateException"
        ], 
        "throws": [
            "KeyStoreException", 
            "IOException", 
            "NoSuchAlgorithmException", 
            "CertificateException"
        ]
    }, 
    "java.awt.image.SinglePixelPackedSampleModel.getPixel(int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getMaxUserNameLength()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.KeyStoreSpi.engineEntryInstanceOf(String, Class)": {
        "args": [
            "String", 
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocketImpl.join(InetAddress)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "InetAddress"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.PriorityBlockingQueue.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Rectangle.setLocation(Point)": {
        "args": [
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.WindowPeer.toFront()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.getListeners(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicInteger.doubleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalQueries.localDate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateFloat(int, float)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "float"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.ZonedDateTime.withMinute(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.io.PrintStream.println(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertPathValidator.getRevocationChecker()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.nio.DoubleBuffer.get()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "BufferUnderflowException"
        ], 
        "throws": []
    }, 
    "java.awt.MenuComponent.contains(Point)": {
        "args": [
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.range(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.awt.Container.getMousePosition(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.lang.Runtime.totalMemory()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.isEnabled()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.SplashScreen.update()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": [
            "IllegalStateException"
        ]
    }, 
    "java.io.File.listFiles(FileFilter)": {
        "args": [
            "FileFilter"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandle.bindTo(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicReference.getAndAccumulate(V, BinaryOperator)": {
        "args": [
            "V", 
            "BinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseWheelEvent.getScrollType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.addLast(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.net.DatagramPacket.setAddress(InetAddress)": {
        "args": [
            "InetAddress"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RMIClassLoader.loadClass(URL, String)": {
        "args": [
            "URL", 
            "String"
        ], 
        "@throws": [
            "MalformedURLException", 
            "ClassNotFoundException"
        ], 
        "throws": [
            "MalformedURLException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.util.zip.InflaterOutputStream.write(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "IOException", 
            "NullPointerException", 
            "ZipException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.geom.Rectangle2D.add(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractMap.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.beforeExecute(Thread, Runnable)": {
        "args": [
            "Thread", 
            "Runnable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ClassLoader.defineClass(String, byte[], int, int)": {
        "args": [
            "String", 
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ClassFormatError", 
            "IndexOutOfBoundsException", 
            "SecurityException"
        ], 
        "throws": [
            "ClassFormatError"
        ]
    }, 
    "java.awt.MenuComponent.setCursor(Cursor)": {
        "args": [
            "Cursor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.createSubsetSampleModel(int[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509Certificate.getSubjectUniqueID()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentMap.replace(K, V)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K", 
            "V"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.comparator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Path.resolve(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "InvalidPathException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextChildSupport.isDelegated()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.PrinterJob.setJobName(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.DatagramChannel.write(ByteBuffer[], int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NotYetConnectedException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.ForkJoinTask.getException()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.RoundRectangle2D.getY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.PriorityBlockingQueue.drainTo(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.prestartCoreThread()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.Naming.lookup(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NotBoundException", 
            "RemoteException", 
            "AccessException", 
            "MalformedURLException"
        ], 
        "throws": [
            "NotBoundException", 
            "MalformedURLException", 
            "RemoteException"
        ]
    }, 
    "java.awt.ScrollPaneAdjustable.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedTransferQueue.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.Clipboard.getContents(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.sql.Statement.getResultSetType()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.MultiPixelPackedSampleModel.setPixel(int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintWriter.println(char[])": {
        "args": [
            "char[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.addPropertyChangeListener(String, PropertyChangeListener)": {
        "args": [
            "String", 
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SortedSet.last()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.nio.file.FileStore.supportsFileAttributeView(Class)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuBar.removeNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FlowLayout.getAlignment()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicBoolean.get()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.toString(float[])": {
        "args": [
            "float[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDate.format(DateTimeFormatter)": {
        "args": [
            "DateTimeFormatter"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.LongSummaryStatistics.combine(LongSummaryStatistics)": {
        "args": [
            "LongSummaryStatistics"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousServerSocketChannel.provider()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.EnumMap.entrySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DriverManager.getDrivers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.FloatBuffer.slice()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.applet.AppletContext.showDocument(URL)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "URL"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.ContainerListener.componentAdded(ContainerEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ContainerEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextProxy.getBeanContextProxy()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AlgorithmParameterGenerator.getAlgorithm()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.FileAttribute.value()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.MemoryImageSource.newPixels(int, int, int, int, boolean)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Modifier.classModifiers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.list(PrintWriter, int)": {
        "args": [
            "PrintWriter", 
            "int"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Character.isDefined(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.MessageFormat.getFormatsByArgumentIndex()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.setLocation(Point)": {
        "args": [
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectStreamClass.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FocusTraversalPolicy.getInitialComponent(Window)": {
        "args": [
            "Window"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.io.InputStreamReader.read(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.management.ManagementFactory.getClassLoadingMXBean()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.ServerSocket.isClosed()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getByte(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.datatransfer.DataFlavor.setHumanPresentableName(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.AclEntry.setPermissions(Set)": {
        "args": [
            "Set"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.MinguoDate.with(TemporalAdjuster)": {
        "args": [
            "TemporalAdjuster"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.Locale.getDisplayLanguage(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.Timestamp.compareTo(Timestamp)": {
        "args": [
            "Timestamp"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertPath.getCertificates()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalQueries.zoneId()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.transform(float[], int, double[], int, int)": {
        "args": [
            "float[]", 
            "int", 
            "double[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Field.get(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "IllegalAccessException", 
            "IllegalArgumentException", 
            "NullPointerException", 
            "ExceptionInInitializerError"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "IllegalAccessException"
        ]
    }, 
    "java.rmi.dgc.DGC.clean(ObjID[], long, VMID, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ObjID[]", 
            "long", 
            "VMID", 
            "boolean"
        ], 
        "@throws": [
            "RemoteException"
        ], 
        "throws": [
            "RemoteException"
        ]
    }, 
    "java.nio.charset.CoderResult.malformedForLength(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.isDirect()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.OutputStream.flush()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.DatagramSocketImpl.send(DatagramPacket)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DatagramPacket"
        ], 
        "@throws": [
            "IOException", 
            "PortUnreachableException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndAdd(T, long)": {
        "args": [
            "T", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.getMinute()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalAdjuster.adjustInto(Temporal)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.FlowLayout.setAlignment(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ListIterator.next()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.text.SimpleDateFormat.parse(String, ParsePosition)": {
        "args": [
            "String", 
            "ParsePosition"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.NavigableSet.descendingIterator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.MissingResourceException.getClassName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.getDefault()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.setSources(Vector)": {
        "args": [
            "Vector"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.getRGBdefault()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.getIssuerAsBytes()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Float.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.awt.Component.getSize(Dimension)": {
        "args": [
            "Dimension"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.create()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadInfo.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.getAbsolutePath()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.sql.Statement.executeUpdate(String, int[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int[]"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException", 
            "SQLTimeoutException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.OffsetTime.withHour(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.SystemTray.add(TrayIcon)": {
        "args": [
            "TrayIcon"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "AWTException"
        ], 
        "throws": [
            "AWTException"
        ]
    }, 
    "java.time.Year.isLeap()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetDragEvent.acceptDrag(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.codePointAt(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.addPathToName(int, String)": {
        "args": [
            "int", 
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.Year.from(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.text.ParsePosition.setErrorIndex(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RasterOp.getRenderingHints()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRLSelector.getDateAndTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.IntSummaryStatistics.getMax()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.readInt()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.BufferedImage.getNumYTiles()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URI.getPort()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramPacket.setData(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.zone.ZoneRules.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.SystemFlavorMap.getNativesForFlavor(DataFlavor)": {
        "args": [
            "DataFlavor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormat.getCalendar()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Deflater.getTotalOut()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.DuplicateFormatFlagsException.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.setTransform(double, double, double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.LayoutPath.pathToPoint(Point2D, boolean, Point2D)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Point2D", 
            "boolean", 
            "Point2D"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Container.getMaximumSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferStrategy.contentsLost()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Canvas.createBufferStrategy(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.getFloat(String, float)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "float"
        ], 
        "@throws": [
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.logging.Formatter.formatMessage(LogRecord)": {
        "args": [
            "LogRecord"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ListPeer.makeVisible(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.RSAPublicKeySpec.getModulus()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.FloatBuffer.hasArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.getMinimumFractionDigits()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getDeclaredAnnotation(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.RunnableScheduledFuture.isPeriodic()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.getParent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseMotionAdapter.mouseDragged(MouseEvent)": {
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDateTime.format(DateTimeFormatter)": {
        "args": [
            "DateTimeFormatter"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.lang.instrument.ClassDefinition.getDefinitionClass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahChronology.prolepticYear(Era, int)": {
        "args": [
            "Era", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ArrayBlockingQueue.poll(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.MenuBar.addNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Image.getScaledInstance(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Observable.deleteObservers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.JobAttributes.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CountedCompleter.getCompleter()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.UnicastRemoteObject.exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory)": {
        "args": [
            "Remote", 
            "int", 
            "RMIClientSocketFactory", 
            "RMIServerSocketFactory"
        ], 
        "@throws": [
            "RemoteException"
        ], 
        "throws": [
            "RemoteException"
        ]
    }, 
    "java.beans.beancontext.BeanContextChildSupport.serviceAvailable(BeanContextServiceAvailableEvent)": {
        "args": [
            "BeanContextServiceAvailableEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.usesLocalFilePerTable()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Math.min(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.System.nanoTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataInputStream.readUnsignedShort()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.geom.Area.getPathIterator(AffineTransform, double)": {
        "args": [
            "AffineTransform", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuBar.countMenus()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Authenticator.requestPasswordAuthentication(String, InetAddress, int, String, String, String)": {
        "args": [
            "String", 
            "InetAddress", 
            "int", 
            "String", 
            "String", 
            "String"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.useProtocolVersion(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalStateException", 
            "IllegalArgumentException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.stream.IntStream.findAny()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicReferenceArray.getAndUpdate(int, UnaryOperator)": {
        "args": [
            "int", 
            "UnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SinglePixelPackedSampleModel.setSample(int, int, int, int, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.SecureDirectoryStream.deleteFile(T)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T"
        ], 
        "@throws": [
            "ClosedDirectoryStreamException", 
            "NoSuchFileException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Throwable.initCause(Throwable)": {
        "args": [
            "Throwable"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.getPixel(int, int, float[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "float[]", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.Chronology.range(ChronoField)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ChronoField"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.IntSummaryStatistics.getSum()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingQueue.drainTo(Collection, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Collection", 
            "int"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.write(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.ResultSet.updateBinaryStream(int, InputStream, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "InputStream", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.text.SimpleDateFormat.setDateFormatSymbols(DateFormatSymbols)": {
        "args": [
            "DateFormatSymbols"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.Raster.createCompatibleWritableRaster(Rectangle)": {
        "args": [
            "Rectangle"
        ], 
        "@throws": [
            "RasterFormatException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.StringBuffer.append(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.IdentityScope.size()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.interfaces.RSAMultiPrimePrivateCrtKey.getCrtCoefficient()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateCharacterStream(int, Reader)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Reader"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.DatabaseMetaData.getMaxCursorNameLength()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Toolkit.createLabel(Label)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Label"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.util.regex.Matcher.hasTransparentBounds()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.ChoiceFormat.parse(String, ParsePosition)": {
        "args": [
            "String", 
            "ParsePosition"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.Console.flush()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.subtractFrom(Temporal)": {
        "args": [
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.getDigit()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AlphaComposite.getAlpha()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.replaceAll(List, T, T)": {
        "args": [
            "List", 
            "T", 
            "T"
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.nio.file.attribute.UserDefinedFileAttributeView.read(String, ByteBuffer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "ByteBuffer"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.math.MathContext.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.ServerSocket.accept()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException", 
            "SecurityException", 
            "SocketTimeoutException", 
            "IllegalBlockingModeException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.stream.LongStream.allMatch(LongPredicate)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "LongPredicate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractSequentialList.add(int, E)": {
        "args": [
            "int", 
            "E"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.GridLayout.getVgap()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.scaleByPowerOfTen(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.Color.getComponents(float[])": {
        "args": [
            "float[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.nextByte(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "InputMismatchException", 
            "NoSuchElementException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.parameterCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.getActiveThreadCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.headMap(K)": {
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.cert.CertPathBuilderResult.clone()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.processEvent(AWTEvent)": {
        "args": [
            "AWTEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocket.setBroadcast(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.awt.PrintJob.end()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.MessageFormat.toPattern()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.dataDefinitionIgnoredInTransactions()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.StringBuilder.appendCodePoint(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Frame.getAccessibleStateSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.spi.FileSystemProvider.checkAccess(Path, AccessMode[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Path", 
            "AccessMode[]"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "NoSuchFileException", 
            "AccessDeniedException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Float.isInfinite()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.DoubleBuffer.get(double[], int, int)": {
        "args": [
            "double[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "BufferUnderflowException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Rectangle.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DriverManager.setLoginTimeout(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.nextBoolean()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InputMismatchException", 
            "NoSuchElementException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.io.PrintWriter.printf(String, Object[])": {
        "args": [
            "String", 
            "Object[]"
        ], 
        "@throws": [
            "IllegalFormatException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.spec.RSAPrivateCrtKeySpec.getPrimeQ()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndAdd(T, int)": {
        "args": [
            "T", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Executors.newSingleThreadScheduledExecutor()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.removeNodeChangeListener(NodeChangeListener)": {
        "args": [
            "NodeChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.of(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.security.cert.PKIXCertPathValidatorResult.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramPacket.getPort()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Timestamp.getTimestamp()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.getNano()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.lastIndexOfSubList(List, List)": {
        "args": [
            "List", 
            "List"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceListener.dragEnter(DragSourceDragEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DragSourceDragEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GridBagLayout.maximumLayoutSize(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.DayOfWeek.query(TemporalQuery)": {
        "args": [
            "TemporalQuery"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.AbstractExecutorService.submit(Callable)": {
        "args": [
            "Callable"
        ], 
        "@throws": [
            "RejectedExecutionException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.file.Files.notExists(Path, LinkOption[])": {
        "args": [
            "Path", 
            "LinkOption[]"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.Locale.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoPeriod.get(TemporalUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.read(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "IOException", 
            "NullPointerException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Math.nextDown(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ByteArrayInputStream.skip(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Checkbox.addItemListener(ItemListener)": {
        "args": [
            "ItemListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StreamTokenizer.lineno()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.format(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.zip.Deflater.deflate(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.hasLayoutAttributes()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.DayOfWeek.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.putChar(int, char)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "char"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.DatagramChannel.setOption(SocketOption, T)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "SocketOption", 
            "T"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IllegalArgumentException", 
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.PushbackInputStream.unread(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.beans.beancontext.BeanContextServiceProvider.releaseService(BeanContextServices, Object, Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BeanContextServices", 
            "Object", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Stroke.createStrokedShape(Shape)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Shape"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Semaphore.tryAcquire(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.lang.invoke.SwitchPoint.hasBeenInvalidated()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.LongPredicate.or(LongPredicate)": {
        "args": [
            "LongPredicate"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.cert.PKIXReason.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.match(Certificate)": {
        "args": [
            "Certificate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.HttpURLConnection.disconnect()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Encoder.getExceptionListener()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.Pack200.addPropertyChangeListener(PropertyChangeListener)": {
        "args": [
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Label.getText()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.BufferedWriter.close()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.chrono.ChronoLocalDateTime.plus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.nio.file.attribute.BasicFileAttributes.creationTime()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.HttpCookie.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.WeekFields.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.ulp(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.withNanos(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.io.PushbackInputStream.mark(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.MemoryPoolMXBean.resetPeakUsage()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.nio.FloatBuffer.arrayOffset()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ReadOnlyBufferException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSetMetaData.getSchemaName(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicIntegerArray.getAndAccumulate(int, int, IntBinaryOperator)": {
        "args": [
            "int", 
            "int", 
            "IntBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.AdjustmentEvent.getAdjustmentType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterators.spliteratorUnknownSize(OfLong, int)": {
        "args": [
            "OfLong", 
            "int"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Stack.push(E)": {
        "args": [
            "E"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.getAccessibleDescription()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.ProxySelector.setDefault(ProxySelector)": {
        "args": [
            "ProxySelector"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.sql.Connection.rollback()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.BandedSampleModel.setDataElements(int, int, Object, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "Object", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArraySet.removeAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.Month.adjustInto(Temporal)": {
        "args": [
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.jar.JarFile.getInputStream(ZipEntry)": {
        "args": [
            "ZipEntry"
        ], 
        "@throws": [
            "ZipException", 
            "IOException", 
            "SecurityException", 
            "IllegalStateException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Container.validateTree()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadInfo.getWaitedCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Semaphore.acquireUninterruptibly()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.ImageGraphicAttribute.getDescent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.thenCompose(Function)": {
        "args": [
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.InvocationEvent.getException()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedTransferQueue.offer(E, long, TimeUnit)": {
        "args": [
            "E", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Constructor.getGenericParameterTypes()": {
        "args": [
            ""
        ], 
        "@throws": [
            "GenericSignatureFormatError", 
            "TypeNotPresentException", 
            "MalformedParameterizedTypeException"
        ], 
        "throws": []
    }, 
    "java.util.IllegalFormatPrecisionException.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Currency.getCurrencyCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.Matcher.lookingAt()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTarget.actionPerformed(ActionEvent)": {
        "args": [
            "ActionEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.FileNameMap.getContentTypeFor(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.DoublePredicate.and(DoublePredicate)": {
        "args": [
            "DoublePredicate"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.BufferCapabilities.isFullScreenRequired()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.write(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.ArrayList.add(E)": {
        "args": [
            "E"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Set.equals(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.JobAttributes.setDialog(DialogType)": {
        "args": [
            "DialogType"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.HashSet.add(E)": {
        "args": [
            "E"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URI.getHost()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.GraphicAttribute.getBounds()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.RoundRectangle2D.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.doubleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsExtendedSQLGrammar()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.LocalDate.now(Clock)": {
        "args": [
            "Clock"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Principal.getName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.CookieHandler.setDefault(CookieHandler)": {
        "args": [
            "CookieHandler"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.List.remove(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.security.SecureRandom.getInstanceStrong()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchAlgorithmException"
        ], 
        "throws": [
            "NoSuchAlgorithmException"
        ]
    }, 
    "java.util.concurrent.ConcurrentHashMap.merge(K, V, BiFunction)": {
        "args": [
            "K", 
            "V", 
            "BiFunction"
        ], 
        "@throws": [
            "NullPointerException", 
            "RuntimeException"
        ], 
        "throws": []
    }, 
    "java.net.NetworkInterface.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.exceptionally(Function)": {
        "args": [
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.MenuBarPeer.delMenu(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.insertRow()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Thread.join(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.image.ColorModel.getAlpha(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "ArrayIndexOutOfBoundsException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.resize(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.of(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Security.getProviders()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TimeZone.inDaylightTime(Date)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Date"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.createClob()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.acl.Group.members()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.EventSetDescriptor.getRemoveListenerMethod()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.SocketImpl.shutdownOutput()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.LinkedBlockingDeque.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoChronology.dateNow(Clock)": {
        "args": [
            "Clock"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.getAccessibleRole()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.getSamples(int, int, int, int, int, double[])": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "double[]"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.JobAttributes.setSidesToDefault()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentMap.getOrDefault(Object, V)": {
        "args": [
            "Object", 
            "V"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.thenAcceptAsync(Consumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Consumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.getAvailableCalendarTypes()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.minusHours(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Stream.anyMatch(Predicate)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Predicate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayList.subList(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.Double.toHexString(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.log1p(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormatSymbols.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.Condition.awaitUninterruptibly()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Array.setChar(Object, int, char)": {
        "args": [
            "Object", 
            "int", 
            "char"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ]
    }, 
    "java.applet.Applet.setStub(AppletStub)": {
        "args": [
            "AppletStub"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DropTarget.addDropTargetListener(DropTargetListener)": {
        "args": [
            "DropTargetListener"
        ], 
        "@throws": [
            "TooManyListenersException"
        ], 
        "throws": [
            "TooManyListenersException"
        ]
    }, 
    "java.util.stream.Stream.flatMapToLong(Function)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.GlyphVector.getLogicalBounds()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.addFirst(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.Connection.prepareStatement(String, int[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int[]"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.CallableStatement.getRowId(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.ArrayDeque.pop()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.security.interfaces.DSAKeyPairGenerator.initialize(int, boolean, SecureRandom)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "boolean", 
            "SecureRandom"
        ], 
        "@throws": [
            "InvalidParameterException"
        ], 
        "throws": [
            "InvalidParameterException"
        ]
    }, 
    "java.awt.image.ComponentSampleModel.getBandOffsets()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CheckboxMenuItem.getListeners(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getNClob(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.TextComponent.setEditable(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Provider.replace(Object, Object, Object)": {
        "args": [
            "Object", 
            "Object", 
            "Object"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.guardWithTest(MethodHandle, MethodHandle, MethodHandle)": {
        "args": [
            "MethodHandle", 
            "MethodHandle", 
            "MethodHandle"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongArray.length()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Modifier.isSynchronized(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.getLargeUpdateCount()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.beans.Beans.isInstanceOf(Object, Class)": {
        "args": [
            "Object", 
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FocusTraversalPolicy.getComponentAfter(Container, Component)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Container", 
            "Component"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.putLong(int, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "long"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.util.EnumSet.complementOf(EnumSet)": {
        "args": [
            "EnumSet"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.readStreamHeader()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException", 
            "StreamCorruptedException"
        ], 
        "throws": [
            "IOException", 
            "StreamCorruptedException"
        ]
    }, 
    "java.lang.Thread.enumerate(Thread[])": {
        "args": [
            "Thread[]"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.security.cert.PKIXRevocationChecker.setOptions(Set)": {
        "args": [
            "Set"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.ChronoField.isDateBased()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentMap.computeIfPresent(K, BiFunction)": {
        "args": [
            "K", 
            "BiFunction"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.print.PrinterJob.lookupPrintServices()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.descendingIterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.MissingFormatArgumentException.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.valueOf(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayList.removeAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.file.attribute.AclEntry.setFlags(AclEntryFlag[])": {
        "args": [
            "AclEntryFlag[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Scrollbar.removeAdjustmentListener(AdjustmentListener)": {
        "args": [
            "AdjustmentListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.getAccessibleContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.stream(double[])": {
        "args": [
            "double[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.DatagramChannel.send(ByteBuffer, SocketAddress)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer", 
            "SocketAddress"
        ], 
        "@throws": [
            "ClosedChannelException", 
            "AsynchronousCloseException", 
            "ClosedByInterruptException", 
            "SecurityException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.MenuBar.setHelpMenu(Menu)": {
        "args": [
            "Menu"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImage.isDynamic()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.StringJoiner.add(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GridBagConstraints.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.color.ICC_ProfileRGB.getMatrix()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Float.floatValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadMXBean.getAllThreadIds()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.Scrollbar.setMinimum(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTarget.setActive(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Proxy.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.dispatchEvent(AWTEvent)": {
        "args": [
            "AWTEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.MonthDay.getLong(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.net.URLStreamHandler.hashCode(URL)": {
        "args": [
            "URL"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.LongAdder.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArraySet.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Runtime.maxMemory()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.LineBreakMeasurer.deleteChar(AttributedCharacterIterator, int)": {
        "args": [
            "AttributedCharacterIterator", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.text.DateFormatSymbols.getLocalPatternChars()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.PrinterJob.defaultPage(PageFormat)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "PageFormat"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.SimpleDateFormat.getDateFormatSymbols()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Identity.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.RobotPeer.dispose()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.forEach(DoubleConsumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DoubleConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.binarySearch(double[], double)": {
        "args": [
            "double[]", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.getBoolean(String, boolean)": {
        "args": [
            "String", 
            "boolean"
        ], 
        "@throws": [
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.RenderedImage.getSources()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.getSamples(int, int, int, int, int, double[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "double[]", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.spi.AbstractSelector.isOpen()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.get(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.withMinute(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.Desktop.edit(File)": {
        "args": [
            "File"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Calendar.computeFields()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.NumericShaper.getContextualShaper(Set, Range)": {
        "args": [
            "Set", 
            "Range"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.MultiPixelPackedSampleModel.getSample(int, int, int, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "DataBuffer"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getMaxStatementLength()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.text.Normalizer.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Runtime.runFinalization()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Button.getCurrentAccessibleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.spliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyEditor.addPropertyChangeListener(PropertyChangeListener)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.MonthDay.getMonthValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GridBagLayout.getLayoutDimensions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.IDN.toASCII(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.beans.Customizer.removePropertyChangeListener(PropertyChangeListener)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Base64.withoutPadding()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.JobAttributes.setMaxPage(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.applet.Applet.getAccessibleStateSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.EventQueue.dispatchEvent(AWTEvent)": {
        "args": [
            "AWTEvent"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.charset.CharsetEncoder.canEncode(char)": {
        "args": [
            "char"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.lang.String.offsetByCodePoints(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.toLocalDateTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXCertPathChecker.getSupportedExtensions()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.read()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Component.addMouseListener(MouseListener)": {
        "args": [
            "MouseListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.NavigableMap.pollLastEntry()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeMap.keySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.writeUTF(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.OffsetDateTime.of(int, int, int, int, int, int, int, ZoneOffset)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "ZoneOffset"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.text.DecimalFormat.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setRowId(int, RowId)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "RowId"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Vector.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Stack.empty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.NetworkChannel.setOption(SocketOption, T)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "SocketOption", 
            "T"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IllegalArgumentException", 
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Canvas.update(Graphics)": {
        "args": [
            "Graphics"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.sequential()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getAnnotatedSuperclass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.setColor(Color)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Color"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongFieldUpdater.accumulateAndGet(T, long, LongBinaryOperator)": {
        "args": [
            "T", 
            "long", 
            "LongBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.MemoryNotificationInfo.from(CompositeData)": {
        "args": [
            "CompositeData"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Method.invoke(Object, Object[])": {
        "args": [
            "Object", 
            "Object[]"
        ], 
        "@throws": [
            "IllegalAccessException", 
            "IllegalArgumentException", 
            "InvocationTargetException", 
            "NullPointerException", 
            "ExceptionInInitializerError"
        ], 
        "throws": [
            "IllegalAccessException", 
            "IllegalArgumentException", 
            "InvocationTargetException"
        ]
    }, 
    "java.util.TreeMap.containsKey(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Byte.toUnsignedInt(byte)": {
        "args": [
            "byte"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyPairGenerator.genKeyPair()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DriverManager.setLogStream(PrintStream)": {
        "args": [
            "PrintStream"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.getRGBs(int[])": {
        "args": [
            "int[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.invoker(MethodType)": {
        "args": [
            "MethodType"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.io.CharArrayWriter.write(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentNavigableMap.navigableKeySet()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Frame.setState(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectStreamClass.lookup(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.XMLFormatter.getHead(Handler)": {
        "args": [
            "Handler"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.spi.InputMethodDescriptor.getInputMethodIcon(Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSetMetaData.isWritable(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.StrictMath.multiplyExact(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.security.KeyPairGenerator.initialize(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "InvalidParameterException"
        ], 
        "throws": []
    }, 
    "java.lang.Character.getNumericValue(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferStrategy.dispose()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isBmpCodePoint(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PersistenceDelegate.initialize(Class, Object, Object, Encoder)": {
        "args": [
            "Class", 
            "Object", 
            "Object", 
            "Encoder"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.text.MessageFormat.setFormatByArgumentIndex(int, Format)": {
        "args": [
            "int", 
            "Format"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintStream.println(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.getResultSet()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.regex.Pattern.splitAsStream(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.getDoubleParameter(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.rmi.dgc.VMID.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.Era.range(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.time.Year.with(TemporalField, long)": {
        "args": [
            "TemporalField", 
            "long"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.MenuComponent.getLocale()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.iterator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.withZoneSameLocal(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.StandardProtocolFamily.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.AclEntry.type()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZoneId.getRules()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ZoneRulesException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.Exchanger.exchange(V)": {
        "args": [
            "V"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.Window.dispose()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RescaleOp.createCompatibleDestImage(BufferedImage, ColorModel)": {
        "args": [
            "BufferedImage", 
            "ColorModel"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPaneAdjustable.getValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.toFront()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.Reader.ready()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.file.FileSystem.provider()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getTileWidth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoChronology.dateNow(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Choice.countItems()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.Activatable.unexportObject(Remote, boolean)": {
        "args": [
            "Remote", 
            "boolean"
        ], 
        "@throws": [
            "NoSuchObjectException", 
            "UnsupportedOperationException"
        ], 
        "throws": [
            "NoSuchObjectException"
        ]
    }, 
    "java.util.TreeSet.last()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.sql.SQLInput.readClob()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Collections.asLifoQueue(Deque)": {
        "args": [
            "Deque"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RenderedImage.getSampleModel()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.skipBytes(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.List.countItems()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.removeLastOccurrence(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousFileChannel.size()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.reflect.AnnotatedElement.getDeclaredAnnotation(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingQueue.peek()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.MessageDigestSpi.engineGetDigestLength()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLStreamHandler.getDefaultPort()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.FontRenderContext.equals(FontRenderContext)": {
        "args": [
            "FontRenderContext"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.instrument.Instrumentation.isRetransformClassesSupported()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPaneAdjustable.getBlockIncrement()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.BeanDescriptor.getBeanClass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.severe(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.applyToEitherAsync(CompletionStage, Function, Executor)": {
        "args": [
            "CompletionStage", 
            "Function", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentSampleModel.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.spi.AbstractInterruptibleChannel.isOpen()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicBoolean.weakCompareAndSet(boolean, boolean)": {
        "args": [
            "boolean", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.NavigableMap.lowerEntry(K)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.readChar()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.regex.PatternSyntaxException.getIndex()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.commit()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.stream.Collectors.joining()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ProcessBuilder.inheritIO()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.isFocused()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.ChoiceFormat.nextDouble(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.getJustifiedLayout(float)": {
        "args": [
            "float"
        ], 
        "@throws": [
            "Error"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Field.getAnnotation(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.interfaces.RSAPrivateCrtKey.getCrtCoefficient()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.getRotateInstance(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLong.accumulateAndGet(long, LongBinaryOperator)": {
        "args": [
            "long", 
            "LongBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.until(Temporal, TemporalUnit)": {
        "args": [
            "Temporal", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceContext.getComponent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicInteger.floatValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.getSize2D()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Rectangle.contains(Rectangle)": {
        "args": [
            "Rectangle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.wasNull()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.MultiPixelPackedSampleModel.getDataElements(int, int, Object, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "Object", 
            "DataBuffer"
        ], 
        "@throws": [
            "ClassCastException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.zip.GZIPInputStream.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.IntSummaryStatistics.getAverage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Phaser.arriveAndAwaitAdvance()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.image.LookupOp.getPoint2D(Point2D, Point2D)": {
        "args": [
            "Point2D", 
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.bcsPreSerializationHook(ObjectOutputStream)": {
        "args": [
            "ObjectOutputStream"
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.jar.JarFile.getEntry(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.replace(K, V, V)": {
        "args": [
            "K", 
            "V", 
            "V"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.KeyFactory.getKeySpec(Key, Class)": {
        "args": [
            "Key", 
            "Class"
        ], 
        "@throws": [
            "InvalidKeySpecException"
        ], 
        "throws": [
            "InvalidKeySpecException"
        ]
    }, 
    "java.util.stream.IntStream.limit(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.LongBuffer.order()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.reduce(IntBinaryOperator)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "IntBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.GlyphVector.performDefaultLayout()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Executors.newScheduledThreadPool(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.temporal.TemporalUnit.isSupportedBy(Temporal)": {
        "args": [
            "Temporal"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.PageAttributes.setPrinterResolution(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Adjustable.getMinimum()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.subtractExact(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.ClassNotFoundException.getCause()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Random.nextBoolean()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StringBufferInputStream.reset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRL.getNextUpdate()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.getComponentSize(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DragGestureEvent.getSourceAsDragGestureRecognizer()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataInputStream.readUTF(DataInput)": {
        "args": [
            "DataInput"
        ], 
        "@throws": [
            "EOFException", 
            "IOException", 
            "UTFDataFormatException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.MenuItem.processActionEvent(ActionEvent)": {
        "args": [
            "ActionEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RenderedImage.getData()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.getChildPropertyChangeListener(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.ResolverStyle.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ByteArrayOutputStream.write(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Member.getModifiers()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.CharBuffer.append(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.security.spec.X509EncodedKeySpec.getFormat()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getFocusCycleRootAncestor()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.LogStream.getOutputStream()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintWriter.print(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.pop()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.awt.color.ICC_Profile.getMinorVersion()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.getFocusTraversalKeys(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.keys()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "BackingStoreException", 
            "IllegalStateException"
        ], 
        "throws": [
            "BackingStoreException"
        ]
    }, 
    "java.awt.im.spi.InputMethodDescriptor.createInputMethod()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "Exception"
        ], 
        "throws": [
            "Exception"
        ]
    }, 
    "java.rmi.activation.ActivationID.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics2D.drawString(AttributedCharacterIterator, float, float)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "AttributedCharacterIterator", 
            "float", 
            "float"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.componentRemoved(ContainerEvent)": {
        "args": [
            "ContainerEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.add(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.reset()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.spec.EncodedKeySpec.getFormat()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.focusGained(FocusEvent)": {
        "args": [
            "FocusEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseAdapter.mousePressed(MouseEvent)": {
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLType.getVendor()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.getCanonicalFile()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.beans.DefaultPersistenceDelegate.mutatesTo(Object, Object)": {
        "args": [
            "Object", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Deflater.setDictionary(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.suspend()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.lang.Long.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.valueOf(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.peer.DropTargetContextPeer.setTargetActions(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ExecutorService.invokeAny(Collection)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Collection"
        ], 
        "@throws": [
            "InterruptedException", 
            "NullPointerException", 
            "IllegalArgumentException", 
            "ExecutionException", 
            "RejectedExecutionException"
        ], 
        "throws": [
            "InterruptedException", 
            "ExecutionException"
        ]
    }, 
    "java.nio.channels.FileChannel.write(ByteBuffer[])": {
        "args": [
            "ByteBuffer[]"
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Robot.mousePress(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.isFocusOwner()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataInputStream.readUTF()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException", 
            "UTFDataFormatException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.ConvolveOp.createCompatibleDestImage(BufferedImage, ColorModel)": {
        "args": [
            "BufferedImage", 
            "ColorModel"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.addWindowFocusListener(WindowFocusListener)": {
        "args": [
            "WindowFocusListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.getPSName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.IndexedPropertyDescriptor.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.Writer.write(String, int, int)": {
        "args": [
            "String", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.stream.Collectors.toConcurrentMap(Function, Function)": {
        "args": [
            "Function", 
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DecimalStyle.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AccessControlContext.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.PreferencesFactory.systemRoot()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Principal.toString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.getFlatnessSq(double, double, double, double, double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.DeflaterInputStream.reset()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.ForkJoinPool.getQueuedSubmissionCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FlowLayout.addLayoutComponent(String, Component)": {
        "args": [
            "String", 
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.getNano()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLOutput.writeClob(Clob)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Clob"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Component.processHierarchyEvent(HierarchyEvent)": {
        "args": [
            "HierarchyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ShortBuffer.get(short[], int, int)": {
        "args": [
            "short[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "BufferUnderflowException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.io.PrintStream.println(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseWheelEvent.getScrollAmount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.getInputStream()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicReference.get()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.CollationElementIterator.setText(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.RuntimeMXBean.getSpecName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.lang.Package.getPackage(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SignatureSpi.engineUpdate(ByteBuffer)": {
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.clearGlobalFocusOwner()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.awt.Component.getHeight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.MembershipKey.isValid()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeSet.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ContainerOrderFocusTraversalPolicy.getImplicitDownCycleTraversal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.Clipboard.getAvailableDataFlavors()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.font.TextAttribute.readResolve()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "InvalidObjectException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicInteger.getAndAdd(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.minusYears(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.time.Duration.toDays()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SimpleTimeZone.getRawOffset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.setFocusTraversalKeysEnabled(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MultipleGradientPaint.getColors()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.EnumMap.containsValue(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Object.wait()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalMonitorStateException", 
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.time.temporal.ChronoField.checkValidValue(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.walk(Path, FileVisitOption[])": {
        "args": [
            "Path", 
            "FileVisitOption[]"
        ], 
        "@throws": [
            "SecurityException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.ZoneId.of(String, Map)": {
        "args": [
            "String", 
            "Map"
        ], 
        "@throws": [
            "DateTimeException", 
            "ZoneRulesException"
        ], 
        "throws": []
    }, 
    "java.awt.image.WritableRaster.setDataElements(int, int, Raster)": {
        "args": [
            "int", 
            "int", 
            "Raster"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.nio.DoubleBuffer.wrap(double[])": {
        "args": [
            "double[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getObject(int, Class)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Class"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.WritableRenderedImage.releaseWritableTile(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AlphaComposite.createContext(ColorModel, ColorModel, RenderingHints)": {
        "args": [
            "ColorModel", 
            "ColorModel", 
            "RenderingHints"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.copyOf(long[], int)": {
        "args": [
            "long[]", 
            "int"
        ], 
        "@throws": [
            "NegativeArraySizeException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.writeLong(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.PageAttributes.setPrinterResolution(int[])": {
        "args": [
            "int[]"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.applet.AudioClip.play()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Method.getParameterCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalAccessor.range(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.anyMatch(DoublePredicate)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DoublePredicate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyPairGenerator.generateKeyPair()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Constructor.getGenericExceptionTypes()": {
        "args": [
            ""
        ], 
        "@throws": [
            "GenericSignatureFormatError", 
            "TypeNotPresentException", 
            "MalformedParameterizedTypeException"
        ], 
        "throws": []
    }, 
    "java.util.List.add(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDate.compareTo(ChronoLocalDate)": {
        "args": [
            "ChronoLocalDate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.listFiles(FilenameFilter)": {
        "args": [
            "FilenameFilter"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.math.MathContext.getRoundingMode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.withMonth(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetListener.dropActionChanged(DropTargetDragEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DropTargetDragEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.annotation.Target.value()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.until(Temporal, TemporalUnit)": {
        "args": [
            "Temporal", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.ZoneOffset.getTotalSeconds()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.IdentityHashMap.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectStreamClass.lookupAny(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.isEnabled()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.getSendBufferSize()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.awt.Adjustable.getVisibleAmount()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.getSources()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.MonthDay.compareTo(MonthDay)": {
        "args": [
            "MonthDay"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ResourceBundle.toBundleName(String, Locale)": {
        "args": [
            "String", 
            "Locale"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.zone.ZoneOffsetTransitionRule.getDayOfWeek()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyEditor.removePropertyChangeListener(PropertyChangeListener)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.color.ICC_ProfileRGB.getGamma(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ProfileDataException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Executable.getParameters()": {
        "args": [
            ""
        ], 
        "@throws": [
            "MalformedParametersException"
        ], 
        "throws": []
    }, 
    "java.lang.ClassLoader.setDefaultAssertionStatus(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.LoggingMXBean.getLoggerNames()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseListener.mouseEntered(MouseEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.finest(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.Reader.read()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.text.SimpleDateFormat.toPattern()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AlphaComposite.derive(float)": {
        "args": [
            "float"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.setIgnoreRepaint(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collection.toArray(T[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T[]"
        ], 
        "@throws": [
            "ArrayStoreException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.StrictMath.min(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ExecutorService.isShutdown()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicReferenceArray.accumulateAndGet(int, E, BinaryOperator)": {
        "args": [
            "int", 
            "E", 
            "BinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.Clipboard.getFlavorListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PipedOutputStream.write(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.PasswordAuthentication.getUserName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsPositionedDelete()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.peer.MenuItemPeer.setEnabled(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.format(String, Object[])": {
        "args": [
            "String", 
            "Object[]"
        ], 
        "@throws": [
            "IllegalFormatException"
        ], 
        "throws": []
    }, 
    "java.time.temporal.Temporal.minus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.setGlobalFocusOwner(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.beans.beancontext.BeanContextMembershipEvent.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.PackedColorModel.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingQueue.add(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "IllegalStateException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.setGroupingSeparator(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Formatter.ioException()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FileInputStream.getChannel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Process.waitFor()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.net.ServerSocket.getLocalPort()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.minimumSize(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.findWithinHorizon(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "IllegalStateException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.StringBuilder.lastIndexOf(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoPeriod.plus(TemporalAmount)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.image.DataBufferShort.setElem(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FontMetrics.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.indexOf(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Authenticator.getRequestingURL()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.processHierarchyBoundsEvent(HierarchyEvent)": {
        "args": [
            "HierarchyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collection.parallelStream()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyRep.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StringWriter.close()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.LinkedBlockingDeque.pollFirst()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.HashMap.remove(Object, Object)": {
        "args": [
            "Object", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AccessController.doPrivilegedWithCombiner(PrivilegedAction)": {
        "args": [
            "PrivilegedAction"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Set.remove(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServiceRevokedEvent.isServiceClass(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextChild.addVetoableChangeListener(String, VetoableChangeListener)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "VetoableChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.MonthDay.isBefore(MonthDay)": {
        "args": [
            "MonthDay"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Label.getAlignment()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.MissingFormatWidthException.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.SplashScreen.getSplashScreen()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "HeadlessException"
        ], 
        "throws": []
    }, 
    "java.awt.Rectangle.setSize(Dimension)": {
        "args": [
            "Dimension"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.plusDays(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.Runtime.getLocalizedOutputStream(OutputStream)": {
        "args": [
            "OutputStream"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.getSystemSelection()": {
        "args": [
            ""
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.util.prefs.Preferences.node(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.lang.management.ManagementFactory.getPlatformMXBeans(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.getInt()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "BufferUnderflowException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDate.until(ChronoLocalDate)": {
        "args": [
            "ChronoLocalDate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Dialog.setTitle(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.getMinusSign()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.RecursiveTask.setRawResult(V)": {
        "args": [
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertPathValidatorResult.clone()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.thenApply(Function)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadLocalRandom.nextLong(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDate.plus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.management.ThreadMXBean.getCurrentThreadCpuTime()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.io.BufferedReader.markSupported()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.DoubleBuffer.duplicate()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXParameters.setPolicyMappingInhibited(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSetMetaData.getColumnDisplaySize(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.file.attribute.FileTime.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentSampleModel.getSamples(int, int, int, int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.nullsAreSortedAtEnd()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Character.isSurrogatePair(char, char)": {
        "args": [
            "char", 
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.BasicFileAttributes.isRegularFile()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getMaximumSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedHashMap.entrySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintWriter.append(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.EventSetDescriptor.getListenerMethods()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.writeObjectOverride(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.PreparedStatement.setDate(int, Date)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Date"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.function.IntPredicate.negate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.ComponentAdapter.componentHidden(ComponentEvent)": {
        "args": [
            "ComponentEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Month.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.IntBuffer.slice()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalField.isSupportedBy(TemporalAccessor)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.BiFunction.andThen(Function)": {
        "args": [
            "Function"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.KeyStore.newInstance(KeyStore, ProtectionParameter)": {
        "args": [
            "KeyStore", 
            "ProtectionParameter"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.temporal.ChronoField.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Enum.valueOf(Class, String)": {
        "args": [
            "Class", 
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.subList(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.io.BufferedWriter.write(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.OffsetDateTime.with(TemporalAdjuster)": {
        "args": [
            "TemporalAdjuster"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Arc2D.setArc(Rectangle2D, double, double, int)": {
        "args": [
            "Rectangle2D", 
            "double", 
            "double", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.hashCode(boolean[])": {
        "args": [
            "boolean[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingQueue.offer(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.Buffer.rewind()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.set(Object, int)": {
        "args": [
            "Object", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isDigit(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.FloatBuffer.wrap(float[])": {
        "args": [
            "float[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.TransferQueue.transfer(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "InterruptedException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.zip.GZIPInputStream.read(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException", 
            "ZipException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.peer.ComponentPeer.checkImage(Image, int, int, ImageObserver)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Image", 
            "int", 
            "int", 
            "ImageObserver"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferInt.setElem(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.contains(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.spi.LocaleServiceProvider.isSupportedLocale(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongArray.compareAndSet(int, long, long)": {
        "args": [
            "int", 
            "long", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Scrollbar.getMaximum()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ShortBuffer.put(short)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "short"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.text.StringCharacterIterator.getEndIndex()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.setName(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.UnresolvedPermission.getActions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collection.stream()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Comparator.comparing(Function)": {
        "args": [
            "Function"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.text.Bidi.getRunCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.UndeclaredThrowableException.getUndeclaredThrowable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.InputMethodHighlight.isSelected()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.setBackground(Color)": {
        "args": [
            "Color"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.applet.AppletStub.getDocumentBase()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.stream(long[], int, int)": {
        "args": [
            "long[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.event.ActionListener.actionPerformed(ActionEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ActionEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FlowLayout.minimumLayoutSize(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoChronology.dateYearDay(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.PriorityQueue.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.LinearGradientPaint.getEndPoint()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayDeque.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ThreadLocal.get()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Formatter.format(LogRecord)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "LogRecord"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Scrollbar.getMinimum()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.layoutGlyphVector(FontRenderContext, char[], int, int, int)": {
        "args": [
            "FontRenderContext", 
            "char[]", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.text.NumberFormat.getMinimumFractionDigits()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.LongStream.findAny()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.indexOf(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.color.ICC_Profile.finalize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AlgorithmParameters.getAlgorithm()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistEra.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadInfo.getWaitedTime()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DragSource.startDrag(DragGestureEvent, Cursor, Image, Point, Transferable, DragSourceListener)": {
        "args": [
            "DragGestureEvent", 
            "Cursor", 
            "Image", 
            "Point", 
            "Transferable", 
            "DragSourceListener"
        ], 
        "@throws": [
            "InvalidDnDOperationException"
        ], 
        "throws": [
            "InvalidDnDOperationException"
        ]
    }, 
    "java.util.Date.setHours(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadMXBean.getThreadInfo(long[], int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long[]", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalArgumentException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.sql.Connection.abort(Executor)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Executor"
        ], 
        "@throws": [
            "SQLException", 
            "SecurityException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.font.LineBreakMeasurer.getPosition()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.forEach(Consumer)": {
        "args": [
            "Consumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.EventHandler.invoke(Object, Method, Object[])": {
        "args": [
            "Object", 
            "Method", 
            "Object[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentMap.forEach(BiConsumer)": {
        "args": [
            "BiConsumer"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.function.LongPredicate.test(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.SystemTray.removePropertyChangeListener(String, PropertyChangeListener)": {
        "args": [
            "String", 
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectStreamField.getTypeCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PipedInputStream.read()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.invoke.SerializedLambda.getImplClass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getBounds()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.NumericShaper.getShaper(Range)": {
        "args": [
            "Range"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Vector.removeAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Font.getItalicAngle()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.WatchService.poll(long, TimeUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "ClosedWatchServiceException", 
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.nio.file.Files.isExecutable(Path)": {
        "args": [
            "Path"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.applet.Applet.getAudioClip(URL)": {
        "args": [
            "URL"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractQueue.add(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "IllegalStateException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.applet.AppletContext.getApplets()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.InputMethodHighlight.getState()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.newSetFromMap(Map)": {
        "args": [
            "Map"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.pollFirstEntry()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.unmodifiableMap(Map)": {
        "args": [
            "Map"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SignatureSpi.engineUpdate(byte[], int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "SignatureException"
        ], 
        "throws": [
            "SignatureException"
        ]
    }, 
    "java.awt.KeyboardFocusManager.dequeueKeyEvents(long, Component)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.ceil(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.instrument.Instrumentation.isNativeMethodPrefixSupported()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.divide(BigInteger)": {
        "args": [
            "BigInteger"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.logging.LogRecord.setResourceBundleName(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPaneAdjustable.addAdjustmentListener(AdjustmentListener)": {
        "args": [
            "AdjustmentListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getFloat(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.function.LongBinaryOperator.applyAsLong(long, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ProcessBuilder.redirectErrorStream()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URL.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragGestureEvent.getComponent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.TextFieldPeer.setEchoChar(char)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getDate(int, Calendar)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Calendar"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Character.codePointCount(CharSequence, int, int)": {
        "args": [
            "CharSequence", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.Deque.iterator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getDeclaredAnnotations()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Provider.put(Object, Object)": {
        "args": [
            "Object", 
            "Object"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.HijrahChronology.eras()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getCharacterStream(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.text.CollationElementIterator.reset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.DefaultKeyboardFocusManager.focusPreviousComponent(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.getURL()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.LineNumberInputStream.skip(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.text.DateFormat.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.getAlphas(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.BufferedInputStream.markSupported()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.ProtectionDomain.getPrincipals()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ScrollPanePeer.childResized(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.StreamHandler.setEncoding(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException", 
            "UnsupportedEncodingException"
        ], 
        "throws": [
            "SecurityException", 
            "UnsupportedEncodingException"
        ]
    }, 
    "java.util.concurrent.ThreadPoolExecutor.getTaskCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.findComponentAt(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZoneOffset.isSupported(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.NodeChangeListener.childAdded(NodeChangeEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "NodeChangeEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.AccessibleObject.getDeclaredAnnotations()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.getQueryTimeout()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.IntBuffer.get(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.io.FileInputStream.finalize()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.event.TextListener.textValueChanged(TextEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "TextEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.truncatedTo(TemporalUnit)": {
        "args": [
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.awt.Container.processEvent(AWTEvent)": {
        "args": [
            "AWTEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CountedCompleter.onCompletion(CountedCompleter)": {
        "args": [
            "CountedCompleter"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.DefaultKeyboardFocusManager.upFocusCycle(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.setReceiveBufferSize(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.awt.event.MouseEvent.getMouseModifiersText(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SimpleTimeZone.getOffset(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertificateFactorySpi.engineGenerateCertPath(InputStream)": {
        "args": [
            "InputStream"
        ], 
        "@throws": [
            "CertificateException", 
            "UnsupportedOperationException"
        ], 
        "throws": [
            "CertificateException"
        ]
    }, 
    "java.util.concurrent.SynchronousQueue.take()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicMarkableReference.weakCompareAndSet(V, V, boolean, boolean)": {
        "args": [
            "V", 
            "V", 
            "boolean", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.padNext(int, char)": {
        "args": [
            "int", 
            "char"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.image.DataBuffer.getElemFloat(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.PSSParameterSpec.getMGFParameters()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsEnvironment.createGraphics(BufferedImage)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BufferedImage"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.rmi.server.UID.write(DataOutput)": {
        "args": [
            "DataOutput"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.invoke.MethodType.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Dimension2D.getHeight()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.KeyAdapter.keyTyped(KeyEvent)": {
        "args": [
            "KeyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ClassLoadingMXBean.setVerbose(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.binarySearch(Object[], Object)": {
        "args": [
            "Object[]", 
            "Object"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.net.URI.create(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDateTime.plusMinutes(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.addMouseWheelListener(MouseWheelListener)": {
        "args": [
            "MouseWheelListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetContext.dropComplete(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "InvalidDnDOperationException"
        ], 
        "throws": [
            "InvalidDnDOperationException"
        ]
    }, 
    "java.time.Duration.minusMillis(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.nio.file.StandardCopyOption.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.RSAOtherPrimeInfo.getCrtCoefficient()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.withNano(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.Menu.insert(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.image.MultiPixelPackedSampleModel.getNumDataElements()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.read(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException", 
            "NullPointerException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.YearMonth.parse(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [
            "DateTimeParseException"
        ], 
        "throws": []
    }, 
    "java.awt.event.WindowAdapter.windowLostFocus(WindowEvent)": {
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.createCustomCursor(Image, Point, String)": {
        "args": [
            "Image", 
            "Point", 
            "String"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "HeadlessException"
        ], 
        "throws": [
            "IndexOutOfBoundsException", 
            "HeadlessException"
        ]
    }, 
    "java.util.concurrent.CountedCompleter.quietlyCompleteRoot()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousSocketChannel.read(ByteBuffer[], int, int, long, TimeUnit, A, CompletionHandler)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer[]", 
            "int", 
            "int", 
            "long", 
            "TimeUnit", 
            "A", 
            "CompletionHandler"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "IllegalArgumentException", 
            "ReadPendingException", 
            "NotYetConnectedException", 
            "ShutdownChannelGroupException"
        ], 
        "throws": []
    }, 
    "java.util.stream.LongStream.mapToDouble(LongToDoubleFunction)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "LongToDoubleFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.AttributedCharacterIterator.getRunLimit()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.longValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Dialog.setOpacity(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.set(int, int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.createTransformedShape(AffineTransform)": {
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.Temporal.plus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.PathIterator.getWindingRule()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.handlesWheelScrolling()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.computeTime()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.thenRun(Runnable)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Runnable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferInt.setElem(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.SequenceInputStream.read(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.beans.PropertyChangeSupport.firePropertyChange(PropertyChangeEvent)": {
        "args": [
            "PropertyChangeEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.removeFocusListener(FocusListener)": {
        "args": [
            "FocusListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.draw3DRect(int, int, int, int, boolean)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.ofLocal(LocalDateTime, ZoneId, ZoneOffset)": {
        "args": [
            "LocalDateTime", 
            "ZoneId", 
            "ZoneOffset"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.FramePeer.setTitle(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.RuleBasedCollator.getCollationElementIterator(CharacterIterator)": {
        "args": [
            "CharacterIterator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CodingErrorAction.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Path.register(WatchService, Kind[], Modifier[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "WatchService", 
            "Kind[]", 
            "Modifier[]"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IllegalArgumentException", 
            "ClosedWatchServiceException", 
            "NotDirectoryException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.jar.Pack200.newPacker()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.getStyle()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.acl.Acl.setName(Principal, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Principal", 
            "String"
        ], 
        "@throws": [
            "NotOwnerException"
        ], 
        "throws": [
            "NotOwnerException"
        ]
    }, 
    "java.awt.image.renderable.RenderableImageOp.getMinY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Observable.deleteObserver(Observer)": {
        "args": [
            "Observer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramPacket.setSocketAddress(SocketAddress)": {
        "args": [
            "SocketAddress"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.beans.IndexedPropertyDescriptor.setIndexedWriteMethod(Method)": {
        "args": [
            "Method"
        ], 
        "@throws": [
            "IntrospectionException"
        ], 
        "throws": [
            "IntrospectionException"
        ]
    }, 
    "java.net.HttpURLConnection.setChunkedStreamingMode(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.navigableKeySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ResourceBundle.setParent(ResourceBundle)": {
        "args": [
            "ResourceBundle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collectors.mapping(Function, Collector)": {
        "args": [
            "Function", 
            "Collector"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendZoneOrOffsetId()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.parseLong(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.time.ZonedDateTime.minusMinutes(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.event.InputEvent.isAltGraphDown()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.removeAccessibleSelection(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.CRC32.update(ByteBuffer)": {
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.applet.AppletStub.getAppletContext()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.readUnsignedByte()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.event.PaintEvent.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.isCompatibleSampleModel(SampleModel)": {
        "args": [
            "SampleModel"
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.function.DoubleUnaryOperator.andThen(DoubleUnaryOperator)": {
        "args": [
            "DoubleUnaryOperator"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.beans.FeatureDescriptor.getShortDescription()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.writeDouble(double)": {
        "args": [
            "double"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.spec.DSAParameterSpec.getP()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SecureRandom.getInstance(String, Provider)": {
        "args": [
            "String", 
            "Provider"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "NoSuchAlgorithmException"
        ]
    }, 
    "java.time.temporal.TemporalAdjusters.lastDayOfMonth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.thenComposeAsync(Function, Executor)": {
        "args": [
            "Function", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Shape.getBounds()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Area.reset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuItem.getAccessibleActionCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.Matcher.hitEnd()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.FormatStyle.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.RuntimeMXBean.getBootClassPath()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.stream.Stream.empty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentColorModel.getRed(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.Compiler.disable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Phaser.onAdvance(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Method.getAnnotatedReturnType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.LogRecord.getSourceMethodName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextComponent.addTextListener(TextListener)": {
        "args": [
            "TextListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.finalize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationSystem.registerGroup(ActivationGroupDesc)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ActivationGroupDesc"
        ], 
        "@throws": [
            "ActivationException", 
            "RemoteException"
        ], 
        "throws": [
            "ActivationException", 
            "RemoteException"
        ]
    }, 
    "java.awt.dnd.DropTargetDropEvent.rejectDrop()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.catchException(MethodHandle, Class, MethodHandle)": {
        "args": [
            "MethodHandle", 
            "Class", 
            "MethodHandle"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.ArrayDeque.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLClassLoader.getResourceAsStream(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Permissions.add(Permission)": {
        "args": [
            "Permission"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.Rectangle.setRect(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Shape.getPathIterator(AffineTransform)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getIndexInfo(String, String, String, boolean, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String", 
            "String", 
            "boolean", 
            "boolean"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.PrimitiveIterator.forEachRemaining(Consumer)": {
        "args": [
            "Consumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getLocation(Point)": {
        "args": [
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLInput.readSQLXML()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.RasterOp.filter(Raster, WritableRaster)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Raster", 
            "WritableRaster"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractSequentialList.get(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.nio.file.SecureDirectoryStream.newDirectoryStream(T, LinkOption[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "LinkOption[]"
        ], 
        "@throws": [
            "ClosedDirectoryStreamException", 
            "NotDirectoryException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.MenuComponent.addAccessibleSelection(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.BeanInfo.getIcon(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FontMetrics.getDescent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.HashMap.containsKey(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.compute(K, BiFunction)": {
        "args": [
            "K", 
            "BiFunction"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalStateException", 
            "RuntimeException"
        ], 
        "throws": []
    }, 
    "java.awt.PointerInfo.getLocation()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.LongStream.build()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.MouseDragGestureRecognizer.mouseReleased(MouseEvent)": {
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FontMetrics.getStringBounds(char[], int, int, Graphics)": {
        "args": [
            "char[]", 
            "int", 
            "int", 
            "Graphics"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextField.minimumSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.RSAPrivateCrtKeySpec.getPrimeP()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseDate.atTime(LocalTime)": {
        "args": [
            "LocalTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.getInstance(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "KeyStoreException"
        ], 
        "throws": [
            "KeyStoreException"
        ]
    }, 
    "java.awt.Component.isOpaque()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseEra.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.VetoableChangeSupport.fireVetoableChange(PropertyChangeEvent)": {
        "args": [
            "PropertyChangeEvent"
        ], 
        "@throws": [
            "PropertyVetoException"
        ], 
        "throws": [
            "PropertyVetoException"
        ]
    }, 
    "java.awt.Toolkit.isModalityTypeSupported(ModalityType)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ModalityType"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongArray.getAndIncrement(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.setPriority(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.stream.Stream.skip(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.text.AttributedCharacterIterator.getRunLimit(Attribute)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Attribute"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.ChronoField.getRangeUnit()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.SynchronousQueue.peek()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.LayoutManager2.getLayoutAlignmentY(Container)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Image.getProperty(String, ImageObserver)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "ImageObserver"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Random.ints()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractMap.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.plusSeconds(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.MediaTracker.waitForAll()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.lang.StringBuffer.insert(int, CharSequence)": {
        "args": [
            "int", 
            "CharSequence"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetDropEvent.getTransferable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsSubqueriesInQuantifieds()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.DataBufferDouble.setElemFloat(int, int, float)": {
        "args": [
            "int", 
            "int", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Image.getAccelerationPriority()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.LayoutPath.pointToPath(Point2D, Point2D)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Point2D", 
            "Point2D"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.IntSummaryStatistics.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.LineNumberReader.skip(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IOException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Toolkit.createChoice(Choice)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Choice"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.io.FileFilter.accept(File)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "File"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.DayOfWeek.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.NumberFormat.format(long, StringBuffer, FieldPosition)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "StringBuffer", 
            "FieldPosition"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.PageAttributes.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getAccessibleIndexInParent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.withHour(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.text.StringCharacterIterator.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.PrinterJob.getPrintService()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.getByteArray(String, byte[])": {
        "args": [
            "String", 
            "byte[]"
        ], 
        "@throws": [
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Choice.select(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.sql.Connection.isReadOnly()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.logging.Logger.finer(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferDouble.getData()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.mapToInt(DoubleToIntFunction)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DoubleToIntFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyVetoException.getPropertyChangeEvent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.remove(HierarchyBoundsListener, HierarchyBoundsListener)": {
        "args": [
            "HierarchyBoundsListener", 
            "HierarchyBoundsListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Executors.defaultThreadFactory()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.CollationElementIterator.setOffset(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URI.getAuthority()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Parameter.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.plusDays(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.net.URLStreamHandler.equals(URL, URL)": {
        "args": [
            "URL", 
            "URL"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.getDescent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.prepareStatement(String, int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Package.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Canvas.getAccessibleContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.setEscapeProcessing(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.getLast()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.lang.Short.intValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.isMultipleMode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.MultiPixelPackedSampleModel.getPixel(int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.text.Collator.hashCode()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImageProducer.isConsumer(ImageConsumer)": {
        "args": [
            "ImageConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.StandardOpenOption.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GradientPaint.getPoint2()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.applet.Applet.getCodeBase()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DriverManager.getLoginTimeout()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.methodType(Class, List)": {
        "args": [
            "Class", 
            "List"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getBytes(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicIntegerArray.accumulateAndGet(int, int, IntBinaryOperator)": {
        "args": [
            "int", 
            "int", 
            "IntBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.sort(short[], int, int)": {
        "args": [
            "short[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.Autoscroll.getAutoscrollInsets()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.LongStream.sorted()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyFactorySpi.engineGetKeySpec(Key, Class)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Key", 
            "Class"
        ], 
        "@throws": [
            "InvalidKeySpecException"
        ], 
        "throws": [
            "InvalidKeySpecException"
        ]
    }, 
    "java.time.zone.ZoneOffsetTransition.getOffsetBefore()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.getMissingGlyphCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Inflater.setInput(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getAlignmentY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Period.isNegative()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Authenticator.getPasswordAuthentication()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.match(DataFlavor)": {
        "args": [
            "DataFlavor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ByteArrayOutputStream.write(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Executors.newFixedThreadPool(int, ThreadFactory)": {
        "args": [
            "int", 
            "ThreadFactory"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.Duration.ofSeconds(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.toDegrees(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.getMatchAllSubjectAltNames()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.getOpacity()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingQueue.offer(E, long, TimeUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.spi.CurrencyNameProvider.getSymbol(String, Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Locale"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.JobAttributes.setPageRanges(int[][])": {
        "args": [
            "int[][]"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.sql.Date.setMinutes(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.upFocusCycle(Component)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.LongStream.summaryStatistics()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.FloatBuffer.put(int, float)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "float"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.util.SimpleTimeZone.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ArrayBlockingQueue.contains(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.OptionalDouble.isPresent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Runtime.exec(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException", 
            "IOException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.font.TextLayout.getAdvance()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.remove(EventListener)": {
        "args": [
            "EventListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Provider.putService(Service)": {
        "args": [
            "Service"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateClob(int, Reader, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Reader", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.IllegalFormatCodePointException.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.instrument.Instrumentation.appendToSystemClassLoaderSearch(JarFile)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "JarFile"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Locale.getISOCountries()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.toUnsignedLong(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ConvolveOp.getPoint2D(Point2D, Point2D)": {
        "args": [
            "Point2D", 
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuBar.remove(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.System.setProperty(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.HashMap.put(K, V)": {
        "args": [
            "K", 
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistDate.getLong(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTarget.isActive()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateFloat(String, float)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "float"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.ColorConvertOp.getBounds2D(Raster)": {
        "args": [
            "Raster"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.IllegalFormatConversionException.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDateTime.equals(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Member.getName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Number.floatValue()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.allowsCoreThreadTimeOut()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Point.setLocation(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.LogRecord.setMessage(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.Selector.isOpen()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.setSubjectPublicKeyAlgID(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.CopyOnWriteArraySet.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferFloat.getElemDouble(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Set.removeAll(Collection)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.zip.CheckedInputStream.read()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.OutputStreamWriter.flush()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.TreeMap.get(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.font.GlyphMetrics.getAdvanceX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.remove(ComponentListener, ComponentListener)": {
        "args": [
            "ComponentListener", 
            "ComponentListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.FileVisitor.preVisitDirectory(T, BasicFileAttributes)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "BasicFileAttributes"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.readLock()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.range(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.plusHours(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.security.cert.PKIXCertPathBuilderResult.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.getContent(Class[])": {
        "args": [
            "Class[]"
        ], 
        "@throws": [
            "IOException", 
            "UnknownServiceException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.dnd.DragSource.getDragSourceListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.flush()": {
        "args": [
            ""
        ], 
        "@throws": [
            "BackingStoreException"
        ], 
        "throws": [
            "BackingStoreException"
        ]
    }, 
    "java.util.zip.ZipEntry.getCompressedSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.Chronology.getCalendarType()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.CharBuffer.get()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "BufferUnderflowException"
        ], 
        "throws": []
    }, 
    "java.awt.image.Raster.getSampleDouble(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Frame.getState()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.ownDeletesAreVisible(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.print.PrinterJob.cancel()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.RecursiveAction.compute()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.MemoryMXBean.gc()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ThreadGroup.enumerate(Thread[], boolean)": {
        "args": [
            "Thread[]", 
            "boolean"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.io.File.getFreeSpace()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.zip.Inflater.needsDictionary()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.CodeSource.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.cancel()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.IllegalFormatWidthException.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.hypot(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.FieldPosition.getFieldAttribute()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RMIClassLoader.getDefaultProviderInstance()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistDate.lengthOfMonth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLOutput.writeDate(Date)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Date"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.Inet6Address.isMCLinkLocal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ProcessBuilder.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateBigDecimal(String, BigDecimal)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "BigDecimal"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Long.parseUnsignedLong(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.util.ArrayList.removeRange(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.ptLineDistSq(double, double, double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantLock.isHeldByCurrentThread()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getURL(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.rmi.server.RMIServerSocketFactory.createServerSocket(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.reflect.Method.getParameterTypes()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TrayIcon.getMouseListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.isMimeTypeEqual(DataFlavor)": {
        "args": [
            "DataFlavor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ManagementFactory.newPlatformMXBeanProxy(MBeanServerConnection, String, Class)": {
        "args": [
            "MBeanServerConnection", 
            "String", 
            "Class"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Window.setFocusableWindowState(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setNull(String, int, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int", 
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Class.isAnonymousClass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateCharacterStream(String, Reader, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Reader", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.channels.WritableByteChannel.write(ByteBuffer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [
            "NonWritableChannelException", 
            "ClosedChannelException", 
            "AsynchronousCloseException", 
            "ClosedByInterruptException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.Wrapper.unwrap(Class)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Class"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.file.FileSystems.getFileSystem(URI)": {
        "args": [
            "URI"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "FileSystemNotFoundException", 
            "ProviderNotFoundException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setDate(int, Date, Calendar)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Date", 
            "Calendar"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.chrono.Chronology.date(Era, int, int, int)": {
        "args": [
            "Era", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.RectangularShape.setFrame(double, double, double, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.dgc.VMID.isUnique()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.doubleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.HttpURLConnection.setFixedLengthStreamingMode(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalStateException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.function.IntBinaryOperator.applyAsInt(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.withOffsetSameInstant(ZoneOffset)": {
        "args": [
            "ZoneOffset"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URL.getQuery()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ServiceLoader.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URL.getPath()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyChangeSupport.getPropertyChangeListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.OutputStreamWriter.write(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.ZoneOffset.getLong(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandle.asSpreader(Class, int)": {
        "args": [
            "Class", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "WrongMethodTypeException"
        ], 
        "throws": []
    }, 
    "java.security.KeyStore.entryInstanceOf(String, Class)": {
        "args": [
            "String", 
            "Class"
        ], 
        "@throws": [
            "NullPointerException", 
            "KeyStoreException"
        ], 
        "throws": [
            "KeyStoreException"
        ]
    }, 
    "java.awt.MenuItem.enable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getBinaryStream(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.ZonedDateTime.getOffset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferStrategy.getCapabilities()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.removeFirst()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.await(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.PriorityQueue.toArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Color.getTransparency()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImage.getMinY()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.Pattern.quote(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.GregorianCalendar.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Throwable.getLocalizedMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.setFont(Font)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Font"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.NavigableMap.tailMap(K)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.Year.isSupported(TemporalUnit)": {
        "args": [
            "TemporalUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadInfo.getBlockedCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Observable.clearChanged()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.createCompatibleWritableRaster(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "RasterFormatException"
        ], 
        "throws": []
    }, 
    "java.awt.Choice.addItem(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.getNCharacterStream(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.ObjectInputValidation.validateObject()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "InvalidObjectException"
        ], 
        "throws": [
            "InvalidObjectException"
        ]
    }, 
    "java.lang.Character.isMirrored(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.toNanoOfDay()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.moveTo(float, float)": {
        "args": [
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CardLayout.layoutContainer(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Array.set(Object, int, Object)": {
        "args": [
            "Object", 
            "int", 
            "Object"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ]
    }, 
    "java.lang.Math.getExponent(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ByteArrayInputStream.read(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.Properties.stringPropertyNames()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Area.isSingular()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.reverseOrder(Comparator)": {
        "args": [
            "Comparator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormat.getDateInstance()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.GregorianCalendar.toZonedDateTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isJavaLetterOrDigit(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.LayoutManager.preferredLayoutSize(Container)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.copyOf(short[], int)": {
        "args": [
            "short[]", 
            "int"
        ], 
        "@throws": [
            "NegativeArraySizeException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Integer.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.getAlpha(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.ConstantCallSite.dynamicInvoker()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.stream.Collectors.counting()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.NetworkInterface.getSubInterfaces()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RMIClassLoader.loadClass(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "MalformedURLException", 
            "ClassNotFoundException"
        ], 
        "throws": [
            "MalformedURLException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.sql.PreparedStatement.setTime(int, Time, Calendar)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Time", 
            "Calendar"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Double.intValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.getNano()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.getAccessibleChildrenCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingQueue.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.OutputStreamWriter.getEncoding()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TimeZone.getDSTSavings()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.JobAttributes.setToPage(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.getObject(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.DataInput.readFloat()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.cert.CertPath.getEncoded(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "CertificateEncodingException"
        ], 
        "throws": [
            "CertificateEncodingException"
        ]
    }, 
    "java.awt.font.ShapeGraphicAttribute.getDescent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.mkdirs()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantLock.isLocked()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.MessageFormat.readResolve()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InvalidObjectException"
        ], 
        "throws": [
            "InvalidObjectException"
        ]
    }, 
    "java.lang.StringBuffer.append(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongArray.weakCompareAndSet(int, long, long)": {
        "args": [
            "int", 
            "long", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Array.getResultSet(long, int, Map)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "int", 
            "Map"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.BufferedImage.getMinX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendText(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ByteArrayOutputStream.toString(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "UnsupportedEncodingException"
        ], 
        "throws": [
            "UnsupportedEncodingException"
        ]
    }, 
    "java.util.stream.BaseStream.unordered()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.toString(double[])": {
        "args": [
            "double[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.getGreatestMinimum(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.LineBreakMeasurer.nextLayout(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.WeekFields.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.toOffsetDateTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.GregorianCalendar.isWeekDateSupported()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CharsetEncoder.unmappableCharacterAction()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadMXBean.getThreadInfo(long[], boolean, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long[]", 
            "boolean", 
            "boolean"
        ], 
        "@throws": [
            "SecurityException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.Calendar.getInstance()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StringWriter.write(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.GlyphMetrics.isWhitespace()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.RuntimeMXBean.getSystemProperties()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateClob(String, Reader)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Reader"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.chrono.IsoChronology.prolepticYear(Era, int)": {
        "args": [
            "Era", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormat.readResolve()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InvalidObjectException"
        ], 
        "throws": [
            "InvalidObjectException"
        ]
    }, 
    "java.util.concurrent.ConcurrentLinkedQueue.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPane.isWheelScrollingEnabled()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterators.estimateSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.getLastModified()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Base64.encode(ByteBuffer)": {
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Deflater.deflate(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRLEntry.getRevocationDate()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.AbstractExecutorService.invokeAny(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException", 
            "ExecutionException"
        ]
    }, 
    "java.awt.CardLayout.getLayoutAlignmentY(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.LineMetrics.getStrikethroughOffset()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLClassLoader.newInstance(URL[])": {
        "args": [
            "URL[]"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.ObjectOutput.writeObject(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Optional.ofNullable(T)": {
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.insertsAreDetected(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.management.ThreadMXBean.isSynchronizerUsageSupported()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahChronology.eraOf(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.skipBytes(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.ParameterMetaData.getScale(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.BorderLayout.getConstraints(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.minusHours(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.isCompatibleSampleModel(SampleModel)": {
        "args": [
            "SampleModel"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.applet.Applet.getImage(URL)": {
        "args": [
            "URL"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.LongAdder.sum()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Date.getTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferInt.getBankData()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.spi.AbstractSelectionKey.isValid()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setSQLXML(int, SQLXML)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "SQLXML"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.URLStreamHandler.getHostAddress(URL)": {
        "args": [
            "URL"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.getPathIterator(AffineTransform)": {
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.DeflaterInputStream.read()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.MonthDay.parse(CharSequence, DateTimeFormatter)": {
        "args": [
            "CharSequence", 
            "DateTimeFormatter"
        ], 
        "@throws": [
            "DateTimeParseException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.getLocationOnScreen()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalComponentStateException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.setVisible(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.getClip()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getLocation()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Driver.getMajorVersion()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.peek()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.interfaces.DSAParams.getQ()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousChannelGroup.shutdownNow()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.regex.Matcher.end(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalStateException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.OptionalDouble.orElseThrow(Supplier)": {
        "args": [
            "Supplier"
        ], 
        "@throws": [
            "X", 
            "NullPointerException"
        ], 
        "throws": [
            "Throwable"
        ]
    }, 
    "java.net.HttpCookie.setDiscard(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Policy.implies(ProtectionDomain, Permission)": {
        "args": [
            "ProtectionDomain", 
            "Permission"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintStream.setError()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuItem.getShortcut()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.lastIndexOf(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSource.getDragSourceMotionListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentNavigableMap.keySet()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.getEntry(String, ProtectionParameter)": {
        "args": [
            "String", 
            "ProtectionParameter"
        ], 
        "@throws": [
            "NullPointerException", 
            "NoSuchAlgorithmException", 
            "UnrecoverableEntryException", 
            "UnrecoverableKeyException", 
            "KeyStoreException"
        ], 
        "throws": [
            "NoSuchAlgorithmException", 
            "UnrecoverableEntryException", 
            "KeyStoreException"
        ]
    }, 
    "java.util.TreeMap.floorKey(K)": {
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.MenuItem.getAccessibleContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.putChar(char)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "char"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.awt.TextComponent.getAccessibleText()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Byte.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.parallelSort(short[], int, int)": {
        "args": [
            "short[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.nio.CharBuffer.charAt(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.net.InetAddress.isMulticastAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BandedSampleModel.setPixels(int, int, int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.ptLineDist(double, double, double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.isTileWritable(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.Integer.toUnsignedString(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateBoolean(String, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "boolean"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.TreeMap.tailMap(K)": {
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.RoundRectangle2D.intersects(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertificateFactorySpi.engineGenerateCRLs(InputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "InputStream"
        ], 
        "@throws": [
            "CRLException"
        ], 
        "throws": [
            "CRLException"
        ]
    }, 
    "java.lang.reflect.Method.isSynthetic()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseListener.mouseReleased(MouseEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.Buffer.capacity()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.clone()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "OutOfMemoryError", 
            "OutOfMemoryError", 
            "OutOfMemoryError"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.quietlyInvoke()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.itemStateChanged(ItemEvent)": {
        "args": [
            "ItemEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragGestureEvent.startDrag(Cursor, Transferable)": {
        "args": [
            "Cursor", 
            "Transferable"
        ], 
        "@throws": [
            "InvalidDnDOperationException", 
            "NullPointerException"
        ], 
        "throws": [
            "InvalidDnDOperationException"
        ]
    }, 
    "java.math.BigInteger.shortValueExact()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.security.spec.PSSParameterSpec.getMGFAlgorithm()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRL.getRevokedCertificate(X509Certificate)": {
        "args": [
            "X509Certificate"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Toolkit.getMouseInfoPeer()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.getPixels(int, int, int, int, double[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "double[]", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantLock.getWaitingThreads(Condition)": {
        "args": [
            "Condition"
        ], 
        "@throws": [
            "IllegalMonitorStateException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.text.StringCharacterIterator.first()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.isHeldExclusively()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.TreeSet.ceiling(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.Array.getArray(Map)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Map"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.text.Collator.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.FileSystemException.getFile()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.getSampleModel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isUnicodeIdentifierStart(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.ValueRange.checkValidIntValue(long, TemporalField)": {
        "args": [
            "long", 
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.setKeepAlive(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.nio.channels.SelectionKey.isReadable()": {
        "args": [
            ""
        ], 
        "@throws": [
            "CancelledKeyException"
        ], 
        "throws": []
    }, 
    "java.awt.BasicStroke.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RescaleOp.createCompatibleDestRaster(Raster)": {
        "args": [
            "Raster"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractCollection.toArray(T[])": {
        "args": [
            "T[]"
        ], 
        "@throws": [
            "ArrayStoreException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.GridBagLayout.invalidateLayout(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.PixelInterleavedSampleModel.createSubsetSampleModel(int[])": {
        "args": [
            "int[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.LongStream.skip(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicBoolean.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.plusMinutes(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.adjustmentValueChanged(AdjustmentEvent)": {
        "args": [
            "AdjustmentEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Clock.system(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.getWindowFocusListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.putLong(String, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "long"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.Channels.newWriter(WritableByteChannel, CharsetEncoder, int)": {
        "args": [
            "WritableByteChannel", 
            "CharsetEncoder", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getBounds()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Color.darker()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.FeatureDescriptor.isHidden()": {
        "Hidden": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Base64.getDecoder()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getMinimumSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.signum(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.SocketImpl.setPerformancePreferences(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.DoubleBuffer.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.set(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPane.setScrollPosition(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.beans.PropertyEditorSupport.getJavaInitializationString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FileInputStream.skip(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.MenuItem.doAccessibleAction(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Float.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImageOp.getBounds2D(BufferedImage)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BufferedImage"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistDate.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseChronology.isLeapYear(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferFloat.setElemDouble(int, int, double)": {
        "args": [
            "int", 
            "int", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseListener.mouseExited(MouseEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.ofEpochMilli(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.GraphicsConfiguration.createCompatibleImage(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.Selector.select(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "IOException", 
            "ClosedSelectorException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.zip.ZipOutputStream.setMethod(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Area.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.awaitUntil(Date)": {
        "args": [
            "Date"
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.lang.Math.acos(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.getBounds2D()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SortedMap.headMap(K)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.PreferenceChangeEvent.getNewValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.absolute(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.management.ThreadMXBean.isThreadContentionMonitoringSupported()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Observable.countObservers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipEntry.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.Attributes.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collectors.groupingByConcurrent(Function, Supplier, Collector)": {
        "args": [
            "Function", 
            "Supplier", 
            "Collector"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.Chronology.period(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getAccessibleSelection()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.checkedSortedSet(SortedSet, Class)": {
        "args": [
            "SortedSet", 
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Modifier.isPrivate(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.getOffset()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.plus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.security.spec.DSAPrivateKeySpec.getP()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.RecursiveAction.setRawResult(Void)": {
        "args": [
            "Void"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.spi.BreakIteratorProvider.getWordInstance(Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Container.isAncestorOf(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Parameter.getDeclaredAnnotation(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Character.getType(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URI.toURL()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "MalformedURLException"
        ], 
        "throws": [
            "MalformedURLException"
        ]
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.getQueuedWriterThreads()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.deliverEvent(Event)": {
        "args": [
            "Event"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Identity.addCertificate(Certificate)": {
        "args": [
            "Certificate"
        ], 
        "@throws": [
            "KeyManagementException", 
            "SecurityException"
        ], 
        "throws": [
            "KeyManagementException"
        ]
    }, 
    "java.rmi.dgc.Lease.getVMID()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.FileChannel.read(ByteBuffer[], int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.StringBuilder.append(StringBuffer)": {
        "args": [
            "StringBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.SequenceInputStream.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Container.locate(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServiceRevokedEvent.isCurrentServiceInvalidNow()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Signature.update(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "SignatureException"
        ], 
        "throws": [
            "SignatureException"
        ]
    }, 
    "java.nio.channels.AsynchronousSocketChannel.provider()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PushbackReader.mark(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.MonthDay.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextMeasurer.getLineBreakIndex(int, float)": {
        "args": [
            "int", 
            "float"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.PopupMenu.addNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.color.ColorSpace.toRGB(float[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "float[]"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderContext.getAreaOfInterest()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.setEntry(String, Entry, ProtectionParameter)": {
        "args": [
            "String", 
            "Entry", 
            "ProtectionParameter"
        ], 
        "@throws": [
            "NullPointerException", 
            "KeyStoreException"
        ], 
        "throws": [
            "KeyStoreException"
        ]
    }, 
    "java.security.cert.CertificateFactory.generateCertPath(InputStream)": {
        "args": [
            "InputStream"
        ], 
        "@throws": [
            "CertificateException"
        ], 
        "throws": [
            "CertificateException"
        ]
    }, 
    "java.awt.geom.QuadCurve2D.getPathIterator(AffineTransform, double)": {
        "args": [
            "AffineTransform", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Method.isBridge()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.createTextArea(TextArea)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "TextArea"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.time.chrono.ChronoLocalDate.isAfter(ChronoLocalDate)": {
        "args": [
            "ChronoLocalDate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkPropertyAccess(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.sql.Statement.executeUpdate(String, String[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String[]"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException", 
            "SQLTimeoutException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.ResultSet.getObject(String, Class)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Class"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.Signature.verify(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "SignatureException"
        ], 
        "throws": [
            "SignatureException"
        ]
    }, 
    "java.security.KeyFactory.translateKey(Key)": {
        "args": [
            "Key"
        ], 
        "@throws": [
            "InvalidKeyException"
        ], 
        "throws": [
            "InvalidKeyException"
        ]
    }, 
    "java.util.BitSet.previousClearBit(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.LongAccumulator.intValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferDouble.getBankData()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.getNumericValue(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.ContainerEvent.getContainer()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.applet.AppletContext.showDocument(URL, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "URL", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragGestureListener.dragGestureRecognized(DragGestureEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DragGestureEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Optional.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedQueue.toArray(T[])": {
        "args": [
            "T[]"
        ], 
        "@throws": [
            "ArrayStoreException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.Signature.setParameter(String, Object)": {
        "args": [
            "String", 
            "Object"
        ], 
        "@throws": [
            "InvalidParameterException"
        ], 
        "throws": [
            "InvalidParameterException"
        ]
    }, 
    "java.security.cert.X509Certificate.getSerialNumber()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoEra.getValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getMouseMotionListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadMXBean.getDaemonThreadCount()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.ChronoUnit.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.unscaledValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.radix()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandleInfo.getReferenceKind()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.isFocusable()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TexturePaint.createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints)": {
        "args": [
            "ColorModel", 
            "Rectangle", 
            "Rectangle2D", 
            "AffineTransform", 
            "RenderingHints"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.fill(byte[], int, int, byte)": {
        "args": [
            "byte[]", 
            "int", 
            "int", 
            "byte"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.rmi.server.LoaderHandler.getSecurityContext(ClassLoader)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ClassLoader"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLException.getSQLState()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Number.shortValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterators.spliterator(OfLong, long, int)": {
        "args": [
            "OfLong", 
            "long", 
            "int"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.text.MessageFormat.setFormatsByArgumentIndex(Format[])": {
        "args": [
            "Format[]"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.text.NumberFormat.getMinimumIntegerDigits()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Introspector.getBeanInfoSearchPath()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextField.getAccessibleContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.getUpdateCount()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.ObjectInputStream.readUnsignedShort()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.MediaTracker.statusID(int, boolean)": {
        "args": [
            "int", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.BufferCapabilities.getFrontBufferCapabilities()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.InputEvent.getMaskForButton(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.file.WatchKey.isValid()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Time.getYear()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.ThreadGroup.activeGroupCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CardLayout.getHgap()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormat.isLenient()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.spi.SelectorProvider.openPipe()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.reflect.Array.setByte(Object, int, byte)": {
        "args": [
            "Object", 
            "int", 
            "byte"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ]
    }, 
    "java.time.LocalDate.atTime(LocalTime)": {
        "args": [
            "LocalTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Policy.setPolicy(Policy)": {
        "args": [
            "Policy"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.getCurrencySymbol()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseListener.mouseClicked(MouseEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URI.relativize(URI)": {
        "args": [
            "URI"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.event.ItemEvent.getStateChange()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Choice.addItemListener(ItemListener)": {
        "args": [
            "ItemListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.IndexedPropertyChangeEvent.getIndex()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.getNextRightHit(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.getTransferType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Savepoint.getSavepointName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.management.ThreadMXBean.dumpAllThreads(boolean, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean", 
            "boolean"
        ], 
        "@throws": [
            "SecurityException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.getDayOfWeek()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.DeflaterOutputStream.write(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.ByteBuffer.array()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ReadOnlyBufferException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingQueue.contains(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.releaseWritableTile(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.WritableRaster.setPixel(int, int, float[])": {
        "args": [
            "int", 
            "int", 
            "float[]"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.image.Raster.createInterleavedRaster(int, int, int, int, Point)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "Point"
        ], 
        "@throws": [
            "RasterFormatException"
        ], 
        "throws": []
    }, 
    "java.security.cert.CertStore.getCertificates(CertSelector)": {
        "args": [
            "CertSelector"
        ], 
        "@throws": [
            "CertStoreException"
        ], 
        "throws": [
            "CertStoreException"
        ]
    }, 
    "java.awt.image.DataBufferDouble.setElemFloat(int, float)": {
        "args": [
            "int", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Executable.toGenericString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.InetAddress.getCanonicalHostName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.get(String, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "long"
        ], 
        "@throws": [
            "IOException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.datatransfer.DataFlavor.isMimeTypeSerializedObject()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.isCompletedAbnormally()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyFactory.getInstance(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "NoSuchProviderException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "NoSuchAlgorithmException", 
            "NoSuchProviderException"
        ]
    }, 
    "java.time.chrono.ThaiBuddhistDate.minus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ConvolveOp.filter(Raster, WritableRaster)": {
        "args": [
            "Raster", 
            "WritableRaster"
        ], 
        "@throws": [
            "NullPointerException", 
            "ImagingOpException", 
            "ImagingOpException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.Math.copySign(float, float)": {
        "args": [
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.poll()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.WindowAdapter.windowClosing(WindowEvent)": {
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkPrintJobAccess()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.lang.Long.rotateLeft(long, int)": {
        "args": [
            "long", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.getAutoCommit()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.AlgorithmParameterGenerator.init(AlgorithmParameterSpec, SecureRandom)": {
        "args": [
            "AlgorithmParameterSpec", 
            "SecureRandom"
        ], 
        "@throws": [
            "InvalidAlgorithmParameterException"
        ], 
        "throws": [
            "InvalidAlgorithmParameterException"
        ]
    }, 
    "java.nio.ShortBuffer.compact()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.sql.SQLOutput.writeSQLXML(SQLXML)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "SQLXML"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.file.Files.probeContentType(Path)": {
        "args": [
            "Path"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.DatabaseMetaData.doesMaxRowSizeIncludeBlobs()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Collections.emptySortedSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AlgorithmParameterGenerator.init(int, SecureRandom)": {
        "args": [
            "int", 
            "SecureRandom"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Dialog.getAccessibleStateSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.getCtrlX()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.pack()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.LongAdder.reset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DriverManager.getConnection(String, Properties)": {
        "args": [
            "String", 
            "Properties"
        ], 
        "@throws": [
            "SQLException", 
            "SQLTimeoutException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.ThreadPoolExecutor.getMaximumPoolSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.HashMap.putAll(Map)": {
        "args": [
            "Map"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Font.getLineMetrics(char[], int, int, FontRenderContext)": {
        "args": [
            "char[]", 
            "int", 
            "int", 
            "FontRenderContext"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.putInt(String, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.function.DoubleToIntFunction.applyAsInt(double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextComponent.getCharacterAttribute(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadInfo.getLockedSynchronizers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.getAccessibleName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.applet.AudioClip.loop()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ByteArrayInputStream.available()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Package.getImplementationTitle()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ResourceBundle.getBundle(String, Locale, Control)": {
        "args": [
            "String", 
            "Locale", 
            "Control"
        ], 
        "@throws": [
            "NullPointerException", 
            "MissingResourceException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.spi.SelectorProvider.openSelector()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.ResultSet.updateTime(String, Time)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Time"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.dnd.DropTargetDragEvent.getCurrentDataFlavorsAsList()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.withEarlierOffsetAtOverlap()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Stream.distinct()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.Pattern.asPredicate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.of(int, Month, int, int, int, int)": {
        "args": [
            "int", 
            "Month", 
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousSocketChannel.open()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.prefs.Preferences.putFloat(String, float)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "float"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.jar.Pack200.pack(JarFile, OutputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "JarFile", 
            "OutputStream"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.chrono.ChronoLocalDate.plus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.getSource(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.IsoChronology.eras()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Point2D.getY()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GridBagLayout.arrangeGrid(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormatSymbols.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsNamedParameters()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.RadialGradientPaint.createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints)": {
        "args": [
            "ColorModel", 
            "Rectangle", 
            "Rectangle2D", 
            "AffineTransform", 
            "RenderingHints"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TrayIcon.getPopupMenu()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AlgorithmParameters.getProvider()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.isSupported(TemporalUnit)": {
        "args": [
            "TemporalUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.AttributedString.addAttributes(Map, int, int)": {
        "args": [
            "Map", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.getResource(String, BeanContextChild)": {
        "args": [
            "String", 
            "BeanContextChild"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getBoolean(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.CardLayout.invalidateLayout(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URISyntaxException.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.getColorModel()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Color.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getArray(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.AffineTransform.getShearInstance(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.LockInfo.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractMap.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.Writer.flush()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Arrays.parallelSetAll(int[], IntUnaryOperator)": {
        "args": [
            "int[]", 
            "IntUnaryOperator"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.cert.PKIXParameters.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderContext.preConcetenateTransform(AffineTransform)": {
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Inflater.setDictionary(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getSource()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.compareTo(ChronoLocalDateTime)": {
        "args": [
            "ChronoLocalDateTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZoneId.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.hasNextLine()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.writeInt(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Checkbox.getLabel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.until(Temporal, TemporalUnit)": {
        "args": [
            "Temporal", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.compareAndSet(T, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.util.Vector.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Identity.setInfo(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.text.ChoiceFormat.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.MatchResult.end(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalStateException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextMembershipEvent.toArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.getFamily(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Menu.removeAll()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.setPerMill(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.color.ICC_Profile.setData(int, byte[])": {
        "args": [
            "int", 
            "byte[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.NodeChangeListener.childRemoved(NodeChangeEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "NodeChangeEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.LDAPCertStoreParameters.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.plusMinutes(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.FlatteningPathIterator.next()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Double.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.security.Signer.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Objects.hash(Object[])": {
        "args": [
            "Object[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.StandardCopyOption.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintWriter.println(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.LongUnaryOperator.compose(LongUnaryOperator)": {
        "args": [
            "LongUnaryOperator"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.CheckboxGroup.setCurrent(Checkbox)": {
        "args": [
            "Checkbox"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServices.addBeanContextServicesListener(BeanContextServicesListener)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BeanContextServicesListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.abs()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextChildSupport.removeVetoableChangeListener(String, VetoableChangeListener)": {
        "args": [
            "String", 
            "VetoableChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerArray.getAndUpdate(int, IntUnaryOperator)": {
        "args": [
            "int", 
            "IntUnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.capacity()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneOffsetTransitionRule.getMonth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.getChild(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "BackingStoreException"
        ], 
        "throws": [
            "BackingStoreException"
        ]
    }, 
    "java.sql.PreparedStatement.setString(int, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.locks.Lock.tryLock()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.getRunningThreadCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.applet.Applet.showStatus(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.setCurrency(Currency)": {
        "args": [
            "Currency"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.readByte()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.ObjectOutputStream.putFields()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.chrono.JapaneseDate.isSupported(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.from(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.Container.validate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseDate.now(Clock)": {
        "args": [
            "Clock"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.NavigableSet.pollLast()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getNString(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.List.setBackground(Color)": {
        "args": [
            "Color"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.getTrafficClass()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.awt.Container.areFocusTraversalKeysSet(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.FontMetrics.getMaxDescent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.getFlatness(double, double, double, double, double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.Matcher.appendTail(StringBuffer)": {
        "args": [
            "StringBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseEvent.getModifiersEx()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.logrb(Level, String, String, String, String, Object[])": {
        "args": [
            "Level", 
            "String", 
            "String", 
            "String", 
            "String", 
            "Object[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerArray.weakCompareAndSet(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Arc2D.contains(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.System.setOut(PrintStream)": {
        "args": [
            "PrintStream"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceListener.dropActionChanged(DragSourceDragEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DragSourceDragEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetDropEvent.dropComplete(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MediaTracker.removeImage(Image)": {
        "args": [
            "Image"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ConvolveOp.getKernel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLong.updateAndGet(LongUnaryOperator)": {
        "args": [
            "LongUnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.VetoableChangeListenerProxy.vetoableChange(PropertyChangeEvent)": {
        "args": [
            "PropertyChangeEvent"
        ], 
        "@throws": [
            "PropertyVetoException"
        ], 
        "throws": [
            "PropertyVetoException"
        ]
    }, 
    "java.awt.geom.Rectangle2D.getPathIterator(AffineTransform)": {
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocket.getReuseAddress()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.nio.file.Files.setOwner(Path, UserPrincipal)": {
        "args": [
            "Path", 
            "UserPrincipal"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.stream.DoubleStream.noneMatch(DoublePredicate)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DoublePredicate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isJavaIdentifierPart(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Field.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FilePermission.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.adjustInto(Temporal)": {
        "args": [
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.FileDialog.setMode(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicReference.getAndSet(V)": {
        "args": [
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.needsGui()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.CharacterIterator.previous()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SignedObject.getAlgorithm()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DataTruncation.getDataSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.JarInputStream.getNextEntry()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ZipException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.HttpCookie.setMaxAge(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.format(DateTimeFormatter)": {
        "args": [
            "DateTimeFormatter"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.beans.FeatureDescriptor.setShortDescription(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.DialogPeer.setTitle(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CyclicBarrier.getNumberWaiting()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Arc2D.setAngleStart(Point2D)": {
        "args": [
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.thenComposeAsync(Function)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.copyValueOf(char[])": {
        "args": [
            "char[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Polygon.intersects(Rectangle2D)": {
        "args": [
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Date.setDate(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getAccessibleRole()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.removeLast()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicInteger.intValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalField.getFrom(TemporalAccessor)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.applet.AudioClip.stop()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.ECParameterSpec.getCurve()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.componentResized(ComponentEvent)": {
        "args": [
            "ComponentEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.SecureDirectoryStream.deleteDirectory(T)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T"
        ], 
        "@throws": [
            "ClosedDirectoryStreamException", 
            "NoSuchFileException", 
            "DirectoryNotEmptyException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.im.InputContext.setCharacterSubsets(Subset[])": {
        "args": [
            "Subset[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.next()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.im.InputMethodRequests.getSelectedText(Attribute[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Attribute[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Inet6Address.getByAddress(String, byte[], int)": {
        "args": [
            "String", 
            "byte[]", 
            "int"
        ], 
        "@throws": [
            "UnknownHostException"
        ], 
        "throws": [
            "UnknownHostException"
        ]
    }, 
    "java.security.cert.TrustAnchor.getCAPublicKey()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyEditorSupport.getAsText()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.destroy()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchMethodError"
        ], 
        "throws": []
    }, 
    "java.time.chrono.Chronology.equals(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Currency.getInstance(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.stream.BaseStream.iterator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.isEqual(OffsetDateTime)": {
        "args": [
            "OffsetDateTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Color.getColorComponents(float[])": {
        "args": [
            "float[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.CookieManager.getCookieStore()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StringReader.read()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.rmi.server.RMIFailureHandler.failure(Exception)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Exception"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.now()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Runtime.exec(String[], String[])": {
        "args": [
            "String[]", 
            "String[]"
        ], 
        "@throws": [
            "SecurityException", 
            "IOException", 
            "NullPointerException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.DataInputStream.readLong()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.DatabaseMetaData.getSchemaTerm()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Component.contains(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.newBufferedReader(Path)": {
        "args": [
            "Path"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.CharBuffer.get(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.net.NetworkInterface.isPointToPoint()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.awt.Window.show()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getBlob(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.SQLInput.readFloat()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.ComponentSampleModel.getNumDataElements()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStoreSpi.engineStore(OutputStream, char[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "OutputStream", 
            "char[]"
        ], 
        "@throws": [
            "IOException", 
            "NoSuchAlgorithmException", 
            "CertificateException"
        ], 
        "throws": [
            "IOException", 
            "NoSuchAlgorithmException", 
            "CertificateException"
        ]
    }, 
    "java.beans.BeanInfo.getMethodDescriptors()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Collator.getDecomposition()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AllPermission.newPermissionCollection()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RescaleOp.filter(Raster, WritableRaster)": {
        "args": [
            "Raster", 
            "WritableRaster"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.text.AttributedCharacterIterator.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Statement.execute()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NullPointerException", 
            "NoSuchMethodException", 
            "SecurityException", 
            "Exception"
        ], 
        "throws": [
            "Exception"
        ]
    }, 
    "java.lang.reflect.Method.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.normalizeMimeTypeParameter(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractList.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRL.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormat.parseObject(String, ParsePosition)": {
        "args": [
            "String", 
            "ParsePosition"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.Buffer.remaining()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate(Runnable, long, long, TimeUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Runnable", 
            "long", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "RejectedExecutionException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.Month.isSupported(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.DefaultPersistenceDelegate.instantiate(Object, Encoder)": {
        "args": [
            "Object", 
            "Encoder"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Date.getHours()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.FramePeer.setResizable(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.DomainLoadStoreParameter.getProtectionParams()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationDesc.getGroupID()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.put(String, short)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "short"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.StringBuffer.getChars(int, int, char[], int)": {
        "args": [
            "int", 
            "int", 
            "char[]", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.Chronology.eras()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Period.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Optional.orElseThrow(Supplier)": {
        "args": [
            "Supplier"
        ], 
        "@throws": [
            "X", 
            "NullPointerException"
        ], 
        "throws": [
            "Throwable"
        ]
    }, 
    "java.lang.Long.getLong(String, long)": {
        "args": [
            "String", 
            "long"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.Semaphore.drainPermits()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractMap.keySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.format(DateTimeFormatter)": {
        "args": [
            "DateTimeFormatter"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.zip.ZipInputStream.skip(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ZipException", 
            "IOException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.LocalDateTime.withSecond(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.beans.PropertyEditorSupport.setSource(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyEditor.setValue(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collection.add(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.io.PrintStream.append(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.parallelPrefix(int[], int, int, IntBinaryOperator)": {
        "args": [
            "int[]", 
            "int", 
            "int", 
            "IntBinaryOperator"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.SimpleTimeZone.setStartRule(int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.color.ColorSpace.toCIEXYZ(float[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "float[]"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.nio.IntBuffer.put(int[])": {
        "args": [
            "int[]"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.nio.Buffer.hasRemaining()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.setTcpNoDelay(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.lang.invoke.MethodType.methodType(Class, Class)": {
        "args": [
            "Class", 
            "Class"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseDate.getLong(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.MonthDay.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.stream(double[], int, int)": {
        "args": [
            "double[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.setCurve(Point2D[], int)": {
        "args": [
            "Point2D[]", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.isRepresentationClassByteBuffer()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.WindowListener.windowClosed(WindowEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Byte.floatValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.intersects(PathIterator, Rectangle2D)": {
        "args": [
            "PathIterator", 
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.MultiPixelPackedSampleModel.getDataBitOffset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormatSymbols.getInstance()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.getService(BeanContextChild, Object, Class, Object, BeanContextServiceRevokedListener)": {
        "args": [
            "BeanContextChild", 
            "Object", 
            "Class", 
            "Object", 
            "BeanContextServiceRevokedListener"
        ], 
        "@throws": [], 
        "throws": [
            "TooManyListenersException"
        ]
    }, 
    "java.security.PrivilegedActionException.getException()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahDate.withVariant(HijrahChronology)": {
        "args": [
            "HijrahChronology"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Rectangle.add(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.InputStream.read()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.DataBufferDouble.getElemFloat(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.minusNanos(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.AWTKeyStroke.readResolve()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "ObjectStreamException"
        ]
    }, 
    "java.beans.beancontext.BeanContextSupport.okToUseGui()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Inet6Address.getScopeId()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.StreamSupport.doubleStream(Supplier, int, boolean)": {
        "args": [
            "Supplier", 
            "int", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getObject(int, Class)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Class"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.DataBuffer.getElemDouble(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.NumberFormat.format(Object, StringBuffer, FieldPosition)": {
        "args": [
            "Object", 
            "StringBuffer", 
            "FieldPosition"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.contains(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.setFocusCycleRoot(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Boolean.compare(boolean, boolean)": {
        "args": [
            "boolean", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Period.subtractFrom(Temporal)": {
        "args": [
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.Base64.getEncoder()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.FileSystems.newFileSystem(URI, Map, ClassLoader)": {
        "args": [
            "URI", 
            "Map", 
            "ClassLoader"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "FileSystemAlreadyExistsException", 
            "ProviderNotFoundException", 
            "ServiceConfigurationError", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.stream.Stream.flatMapToDouble(Function)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.getChronology()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Signer.getPrivateKey()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Constructor.getDeclaredAnnotations()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceContext.removeDragSourceListener(DragSourceListener)": {
        "args": [
            "DragSourceListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.getLong()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "BufferUnderflowException"
        ], 
        "throws": []
    }, 
    "java.util.stream.Stream.flatMapToInt(Function)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MultipleGradientPaint.getFractions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.copy(Path, Path, CopyOption[])": {
        "args": [
            "Path", 
            "Path", 
            "CopyOption[]"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "FileAlreadyExistsException", 
            "DirectoryNotEmptyException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.LinkedTransferQueue.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.peer.DropTargetContextPeer.dropComplete(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationGroupDesc.getPropertyOverrides()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.now(Clock)": {
        "args": [
            "Clock"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.MemoryUsage.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.isAbsolute()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocket.isConnected()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Certificate.toString(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PolicyNode.getValidPolicy()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.get(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Executable.isSynthetic()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getConcurrency()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.ZoneId.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.SocketImpl.connect(SocketAddress, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "SocketAddress", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Spliterator.hasCharacteristics(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadMXBean.getPeakThreadCount()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.FeatureDescriptor.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TimeZone.getOffset(int, int, int, int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.applet.Applet.resize(Dimension)": {
        "args": [
            "Dimension"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Color.RGBtoHSB(int, int, int, float[])": {
        "args": [
            "int", 
            "int", 
            "int", 
            "float[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.Writer.append(char)": {
        "args": [
            "char"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Boolean.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.spi.CalendarNameProvider.getDisplayName(String, int, int, int, Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int", 
            "int", 
            "int", 
            "Locale"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.WeakHashMap.forEach(BiConsumer)": {
        "args": [
            "BiConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getDeclaredAnnotationsByType(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ComponentColorModel.getComponents(int, int[], int)": {
        "args": [
            "int", 
            "int[]", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Font.getAttributes()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSetMetaData.isAutoIncrement(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.BasicStroke.getLineWidth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CheckboxMenuItem.setCurrentAccessibleValue(Number)": {
        "args": [
            "Number"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.currentThread()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.spi.AsynchronousChannelProvider.openAsynchronousSocketChannel(AsynchronousChannelGroup)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "AsynchronousChannelGroup"
        ], 
        "@throws": [
            "IllegalChannelGroupException", 
            "ShutdownChannelGroupException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Component.getHierarchyListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Path.getParent()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.parse(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.color.ICC_Profile.getProfileClass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextArea.getColumns()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Scrollbar.getAccessibleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.min(Collection, Comparator)": {
        "args": [
            "Collection", 
            "Comparator"
        ], 
        "@throws": [
            "ClassCastException", 
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendZoneText(TextStyle, Set)": {
        "args": [
            "TextStyle", 
            "Set"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.minus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistChronology.zonedDateTime(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.format(DateTimeFormatter)": {
        "args": [
            "DateTimeFormatter"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.net.MulticastSocket.leaveGroup(InetAddress)": {
        "args": [
            "InetAddress"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Class.getProtectionDomain()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.resolveProxyClass(String[])": {
        "args": [
            "String[]"
        ], 
        "@throws": [
            "IOException", 
            "ClassNotFoundException"
        ], 
        "throws": [
            "IOException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.util.regex.Pattern.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Executors.newWorkStealingPool(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.image.DataBuffer.getElemDouble(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.replace(char, char)": {
        "args": [
            "char", 
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.System.arraycopy(Object, int, Object, int, int)": {
        "args": [
            "Object", 
            "int", 
            "Object", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "ArrayStoreException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.AbstractCollection.toArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.StringTokenizer.countTokens()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.get(String, char)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "char"
        ], 
        "@throws": [
            "IOException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.reflect.Parameter.getModifiers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.MonthDay.withMonth(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.copyData(WritableRaster)": {
        "args": [
            "WritableRaster"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.Pageable.getPrintable(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": [
            "IndexOutOfBoundsException"
        ]
    }, 
    "java.nio.ByteBuffer.put(ByteBuffer)": {
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "IllegalArgumentException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DragGestureRecognizer.unregisterListeners()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.BorderLayout.addLayoutComponent(String, Component)": {
        "args": [
            "String", 
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.complete(T)": {
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FilePermission.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.lines(Path, Charset)": {
        "args": [
            "Path", 
            "Charset"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.reflect.Field.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextChildSupport.fireVetoableChange(String, Object, Object)": {
        "args": [
            "String", 
            "Object", 
            "Object"
        ], 
        "@throws": [
            "PropertyVetoException"
        ], 
        "throws": [
            "PropertyVetoException"
        ]
    }, 
    "java.awt.Component.getAlignmentX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.isRepresentationClassSerializable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuItem.getListeners(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.time.zone.ZoneRulesProvider.getAvailableZoneIds()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.getState()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayList.replaceAll(UnaryOperator)": {
        "args": [
            "UnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.binarySearch(Object[], int, int, Object)": {
        "args": [
            "Object[]", 
            "int", 
            "int", 
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.AWTKeyStroke.getAWTKeyStroke(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.getDefaultRepresentationClassAsString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertificateFactorySpi.engineGenerateCRL(InputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "InputStream"
        ], 
        "@throws": [
            "CRLException"
        ], 
        "throws": [
            "CRLException"
        ]
    }, 
    "java.lang.invoke.MethodType.parameterType(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.RoundRectangle2D.getPathIterator(AffineTransform)": {
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.now()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Canvas.getBufferStrategy()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.FloatBuffer.isDirect()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Checkbox.processEvent(AWTEvent)": {
        "args": [
            "AWTEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousSocketChannel.connect(SocketAddress)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "SocketAddress"
        ], 
        "@throws": [
            "UnresolvedAddressException", 
            "UnsupportedAddressTypeException", 
            "AlreadyConnectedException", 
            "ConnectionPendingException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.text.DateFormatSymbols.setZoneStrings(String[][])": {
        "args": [
            "String[][]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.PrintWriter.println(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.getFlatnessSq(double[], int)": {
        "args": [
            "double[]", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getAccessibleAt(Point)": {
        "args": [
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.atDate(LocalDate)": {
        "args": [
            "LocalDate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.MemoryMXBean.getNonHeapMemoryUsage()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GridBagLayout.addLayoutComponent(Component, Object)": {
        "args": [
            "Component", 
            "Object"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.writeUTF(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.VolatileImage.contentsLost()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.duplicate()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.setPixel(int, int, float[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "float[]", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.Dictionary.remove(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.YearMonth.from(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.asDoubleBuffer()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.WindowPeer.toBack()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Button.getAccessibleActionCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SecureRandom.getProvider()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedTransferQueue.drainTo(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquireNanos(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.Window.addWindowStateListener(WindowStateListener)": {
        "args": [
            "WindowStateListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TrayIcon.addMouseMotionListener(MouseMotionListener)": {
        "args": [
            "MouseMotionListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferShort.setElem(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseEvent.getPoint()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.unmodifiableSortedSet(SortedSet)": {
        "args": [
            "SortedSet"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.cos(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.WeakHashMap.containsKey(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.MathContext.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.getDayOfYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentNavigableMap.subMap(K, K)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K", 
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Container.setFocusCycleRoot(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.getExtension(char)": {
        "args": [
            "char"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.reparent(ContainerPeer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ContainerPeer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.expm1(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CharsetDecoder.decodeLoop(ByteBuffer, CharBuffer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer", 
            "CharBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.validatePendingAdd(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.higherEntry(K)": {
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousChannelGroup.withFixedThreadPool(int, ThreadFactory)": {
        "args": [
            "int", 
            "ThreadFactory"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.beans.beancontext.BeanContextSupport.contains(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.drawPolyline(int[], int[], int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int[]", 
            "int[]", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.HashMap.getOrDefault(Object, V)": {
        "args": [
            "Object", 
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.sleep(long, int)": {
        "args": [
            "long", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.time.chrono.ChronoLocalDate.hashCode()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Set.iterator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.thenAcceptAsync(Consumer, Executor)": {
        "args": [
            "Consumer", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.ServerSocketChannel.validOps()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyChangeSupport.addPropertyChangeListener(PropertyChangeListener)": {
        "args": [
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.ParseException.getErrorOffset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Boolean.hashCode(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.RuleBasedCollator.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.ServerSocket.bind(SocketAddress, int)": {
        "args": [
            "SocketAddress", 
            "int"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.CallableStatement.getObject(String, Map)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Map"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Collections.emptyEnumeration()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RGBImageFilter.substituteColorModel(ColorModel, ColorModel)": {
        "args": [
            "ColorModel", 
            "ColorModel"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.LineBreakMeasurer.nextOffset(float, int, boolean)": {
        "args": [
            "float", 
            "int", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setRef(int, Ref)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Ref"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.regex.Matcher.group()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.lang.Class.getMethods()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.time.LocalTime.isSupported(TemporalUnit)": {
        "args": [
            "TemporalUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsConfiguration.createCompatibleVolatileImage(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.cert.CertPathParameters.clone()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.spi.NumberFormatProvider.getCurrencyInstance(Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.LongAdder.floatValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.setSubjectPublicKey(PublicKey)": {
        "args": [
            "PublicKey"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.Channels.newReader(ReadableByteChannel, CharsetDecoder, int)": {
        "args": [
            "ReadableByteChannel", 
            "CharsetDecoder", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.getMinimalDaysInFirstWeek()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.getBytes(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "UnsupportedEncodingException"
        ], 
        "throws": [
            "UnsupportedEncodingException"
        ]
    }, 
    "java.util.BitSet.toLongArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.getParamClasses()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RMISocketFactory.createServerSocket(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.geom.Rectangle2D.intersect(Rectangle2D, Rectangle2D, Rectangle2D)": {
        "args": [
            "Rectangle2D", 
            "Rectangle2D", 
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.setExponentSeparator(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.file.Path.register(WatchService, Kind[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "WatchService", 
            "Kind[]"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IllegalArgumentException", 
            "ClosedWatchServiceException", 
            "NotDirectoryException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Character.isJavaIdentifierStart(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.minusDays(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.BorderLayout.invalidateLayout(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.MemoryPoolMXBean.getUsage()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.DosFileAttributeView.setArchive(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.cert.PKIXParameters.addCertPathChecker(PKIXCertPathChecker)": {
        "args": [
            "PKIXCertPathChecker"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLType.getName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.setXORMode(Color)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Color"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.synchronizedList(List)": {
        "args": [
            "List"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.WritableRenderedImage.addTileObserver(TileObserver)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "TileObserver"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Executable.getAnnotatedReturnType()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.drawRoundRect(int, int, int, int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getAccessibleComponent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.AffineTransformOp.createCompatibleDestRaster(Raster)": {
        "args": [
            "Raster"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipFile.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.function.BiPredicate.and(BiPredicate)": {
        "args": [
            "BiPredicate"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.zip.Adler32.update(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.spliterator(long[])": {
        "args": [
            "long[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.Activatable.inactive(ActivationID)": {
        "args": [
            "ActivationID"
        ], 
        "@throws": [
            "UnknownObjectException", 
            "ActivationException", 
            "RemoteException", 
            "UnsupportedOperationException"
        ], 
        "throws": [
            "UnknownObjectException", 
            "ActivationException", 
            "RemoteException"
        ]
    }, 
    "java.time.Instant.from(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.Choice.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.PaintEvent.getUpdateRect()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistDate.plus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.WeakHashMap.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.FileSystem.getFileStores()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SelectionKey.isWritable()": {
        "args": [
            ""
        ], 
        "@throws": [
            "CancelledKeyException"
        ], 
        "throws": []
    }, 
    "java.lang.Integer.highestOneBit(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.getZeroDigit()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Deque.removeFirst()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.util.Spliterator.getComparator()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ScheduledThreadPoolExecutor.execute(Runnable)": {
        "args": [
            "Runnable"
        ], 
        "@throws": [
            "RejectedExecutionException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Graphics.drawPolygon(Polygon)": {
        "args": [
            "Polygon"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertificateRevokedException.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceContext.dragDropEnd(DragSourceDropEvent)": {
        "args": [
            "DragSourceDropEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousSocketChannel.shutdownInput()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NotYetConnectedException", 
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.channels.MembershipKey.unblock(InetAddress)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "InetAddress"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.applet.Applet.getDocumentBase()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.XMLEncoder.flush()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getTileHeight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.isVertical()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.InflaterInputStream.fill()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.jar.JarInputStream.getNextJarEntry()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ZipException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.ThreadGroup.getParent()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.EventQueue.getCurrentEvent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Deque.pollLast()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.peer.DropTargetPeer.removeDropTarget(DropTarget)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DropTarget"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Formatter.getHead(Handler)": {
        "args": [
            "Handler"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.getOOBInline()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.io.Writer.write(char[], int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.math.BigDecimal.divide(BigDecimal, MathContext)": {
        "args": [
            "BigDecimal", 
            "MathContext"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.zip.CheckedInputStream.read(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Spliterators.spliteratorUnknownSize(OfDouble, int)": {
        "args": [
            "OfDouble", 
            "int"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.print(Graphics)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Graphics"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.LongUnaryOperator.identity()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.TextComponentPeer.select(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Bidi.getRunLimit(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.firePropertyChange(String, double, double)": {
        "args": [
            "String", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.getDataElements(float[], int, Object)": {
        "args": [
            "float[]", 
            "int", 
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.Class.getCanonicalName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Polygon.invalidate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingQueue.put(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "InterruptedException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.concurrent.LinkedTransferQueue.getWaitingConsumerCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.put(int, byte)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "byte"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.awt.Scrollbar.setValueIsAdjusting(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseDate.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.stop(Throwable)": {
        "args": [
            "Throwable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.spi.NumberFormatProvider.getPercentInstance(Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.IsoChronology.isLeapYear(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getListeners(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Comparable.compareTo(T)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T"
        ], 
        "@throws": [
            "NullPointerException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.security.spec.ECPublicKeySpec.getW()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.getInsets()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.ChronoUnit.between(Temporal, Temporal)": {
        "args": [
            "Temporal", 
            "Temporal"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.isDynamicLayoutSet()": {
        "args": [
            ""
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.awt.Desktop.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Enumeration.hasMoreElements()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDateTime.isAfter(ChronoLocalDateTime)": {
        "args": [
            "ChronoLocalDateTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CRLSelector.match(CRL)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CRL"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantLock.getQueuedThreads()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextField.setEchoCharacter(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Date.setSeconds(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.stream.StreamSupport.intStream(Supplier, int, boolean)": {
        "args": [
            "Supplier", 
            "int", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.divide(BigDecimal, int, RoundingMode)": {
        "args": [
            "BigDecimal", 
            "int", 
            "RoundingMode"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ComponentSampleModel.createCompatibleSampleModel(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.charset.CoderResult.isUnmappable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingDeque.pollLast(long, TimeUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.TextField.echoCharIsSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.LookupOp.filter(BufferedImage, BufferedImage)": {
        "args": [
            "BufferedImage", 
            "BufferedImage"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.LinkedList.addAll(int, Collection)": {
        "args": [
            "int", 
            "Collection"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.charset.CharsetEncoder.reset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.WritableRaster.setSamples(int, int, int, int, int, double[])": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "double[]"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.sql.DriverManager.println(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.getTransferType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Inflater.getRemaining()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getFloat(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Double.byteValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ParameterMetaData.getParameterType(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.regex.Matcher.region(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.stream.Stream.toArray()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Signature.initSign(PrivateKey, SecureRandom)": {
        "args": [
            "PrivateKey", 
            "SecureRandom"
        ], 
        "@throws": [
            "InvalidKeyException"
        ], 
        "throws": [
            "InvalidKeyException"
        ]
    }, 
    "java.nio.charset.spi.CharsetProvider.charsetForName(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.NetworkInterface.getDisplayName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.copyOf(char[], int)": {
        "args": [
            "char[]", 
            "int"
        ], 
        "@throws": [
            "NegativeArraySizeException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater(Class, String)": {
        "args": [
            "Class", 
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "RuntimeException"
        ], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.getCaretShape(TextHitInfo)": {
        "args": [
            "TextHitInfo"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.compareTo(BigInteger)": {
        "args": [
            "BigInteger"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Rectangle2D.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandleProxies.wrapperInstanceType(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Frame.setExtendedState(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterators.spliterator(Iterator, long, int)": {
        "args": [
            "Iterator", 
            "long", 
            "int"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateInt(String, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.LocalTime.withNano(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.Formatter.out()": {
        "args": [
            ""
        ], 
        "@throws": [
            "FormatterClosedException"
        ], 
        "throws": []
    }, 
    "java.io.PrintStream.println(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.SynchronousQueue.removeAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.FramePeer.setBoundsPrivate(int, int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.shiftRight(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Button.setLabel(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CheckboxMenuItem.getMinimumAccessibleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.getInteger(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.lang.Character.isUpperCase(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingQueue.spliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsRefCursors()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.file.spi.FileTypeDetector.probeContentType(Path)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Path"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.OffsetTime.withOffsetSameLocal(ZoneOffset)": {
        "args": [
            "ZoneOffset"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipEntry.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Robot.mouseWheel(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setObject(String, Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Object"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.zip.GZIPOutputStream.finish()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.logging.Logger.setParent(Logger)": {
        "args": [
            "Logger"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDate.isSupported(TemporalUnit)": {
        "args": [
            "TemporalUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ScheduledThreadPoolExecutor.getRemoveOnCancelPolicy()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.removeAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.String.indexOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.AccessibleObject.setAccessible(AccessibleObject[], boolean)": {
        "args": [
            "AccessibleObject[]", 
            "boolean"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.nio.FloatBuffer.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintStream.checkError()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImageOp.createCompatibleDestImage(BufferedImage, ColorModel)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BufferedImage", 
            "ColorModel"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.HierarchyEvent.getChangeFlags()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationException.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandle.type()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.MessageDigest.update(ByteBuffer)": {
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.setEnabled(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RemoteRef.remoteEquals(RemoteRef)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "RemoteRef"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.isCertificateEntry(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "KeyStoreException"
        ], 
        "throws": [
            "KeyStoreException"
        ]
    }, 
    "java.time.chrono.ChronoZonedDateTime.getLong(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.FileSystemException.getOtherFile()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.parallel()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.setLine(Point2D, Point2D)": {
        "args": [
            "Point2D", 
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.getDataBuffer()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuilder.deleteCharAt(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.TimeZone.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.setCurrency(Currency)": {
        "args": [
            "Currency"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.hitTestChar(float, float)": {
        "args": [
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FontMetrics.getFont()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Arc2D.setFrame(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.UserPrincipalLookupService.lookupPrincipalByGroupName(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "UserPrincipalNotFoundException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.regex.Matcher.find()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.now()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getPropertyChangeListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryReleaseShared(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalMonitorStateException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.TreeSet.subSet(E, boolean, E, boolean)": {
        "args": [
            "E", 
            "boolean", 
            "E", 
            "boolean"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Toolkit.createButton(Button)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Button"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.awt.image.renderable.ParameterBlock.getIntParameter(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DropTarget.getDropTargetContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.getFontMetrics(Font)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Font"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsOrderByUnrelated()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Locale.clearExtensions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.setLocation(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.delItem(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocketImpl.leaveGroup(SocketAddress, NetworkInterface)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "SocketAddress", 
            "NetworkInterface"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.stream.LongStream.reduce(LongBinaryOperator)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "LongBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.getFontName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.Manifest.getAttributes(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.getInstance(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLInput.readAsciiStream()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.ForkJoinTask.compareAndSetForkJoinTaskTag(short, short)": {
        "args": [
            "short", 
            "short"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.PageAttributes.setPrintQuality(PrintQualityType)": {
        "args": [
            "PrintQualityType"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateBlob(String, InputStream, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "InputStream", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Runtime.removeShutdownHook(Thread)": {
        "args": [
            "Thread"
        ], 
        "@throws": [
            "IllegalStateException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.Hashtable.keySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.DeflaterInputStream.markSupported()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintWriter.print(char[])": {
        "args": [
            "char[]"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Time.setMonth(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.spi.AbstractSelector.cancelledKeys()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.HttpCookie.getCommentURL()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ContainerOrderFocusTraversalPolicy.getFirstComponent(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Scanner.useDelimiter(Pattern)": {
        "args": [
            "Pattern"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorConvertOp.filter(Raster, WritableRaster)": {
        "args": [
            "Raster", 
            "WritableRaster"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.MappedByteBuffer.force()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CardLayout.minimumLayoutSize(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.LongStream.anyMatch(LongPredicate)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "LongPredicate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FocusTraversalPolicy.getFirstComponent(Container)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Container"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.CheckboxMenuItem.doAccessibleAction(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.DoubleAdder.reset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.isForegroundSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.getBaseline()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.PosixFileAttributeView.name()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.PriorityQueue.spliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.add(HierarchyListener, HierarchyListener)": {
        "args": [
            "HierarchyListener", 
            "HierarchyListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.peekLast()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Adjustable.getMaximum()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.drawImage(Image, int, int, int, int, int, int, int, int, Color, ImageObserver)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Image", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "Color", 
            "ImageObserver"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getBaseline(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.event.ComponentListener.componentMoved(ComponentEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ComponentEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateShort(String, short)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "short"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.color.ICC_ColorSpace.toCIEXYZ(float[])": {
        "args": [
            "float[]"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.AccessibleObject.isAccessible()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.mouseUp(Event, int, int)": {
        "args": [
            "Event", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsMultipleOpenResults()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.DriverManager.getDriver(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Graphics.drawPolygon(int[], int[], int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int[]", 
            "int[]", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.DelayQueue.offer(E, long, TimeUnit)": {
        "args": [
            "E", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.isReadOnly()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.Clob.setString(long, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.stream.IntStream.range(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Timestamp.toInstant()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.ConsoleHandler.publish(LogRecord)": {
        "args": [
            "LogRecord"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Shape.intersects(Rectangle2D)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.NumericShaper.getRangeSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneOffsetTransition.isOverlap()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.NetworkInterface.getMTU()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.lang.StringBuffer.lastIndexOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.mouseDragged(MouseEvent)": {
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Rectangle.translate(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Date.getMinutes()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.pow(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Short.valueOf(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.security.spec.DSAGenParameterSpec.getPrimePLength()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ProcessBuilder.from(File)": {
        "args": [
            "File"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Float.isFinite(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.spi.FileSystemProvider.readAttributes(Path, String, LinkOption[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Path", 
            "String", 
            "LinkOption[]"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IllegalArgumentException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.dnd.DropTargetDragEvent.getLocation()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintWriter.print(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.contains(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.StampedLock.isWriteLocked()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZoneOffset.getId()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyEditorSupport.setValue(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.TrustAnchor.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandle.asVarargsCollector(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.im.InputContext.endComposition()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.walkFileTree(Path, Set, int, FileVisitor)": {
        "args": [
            "Path", 
            "Set", 
            "int", 
            "FileVisitor"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "SecurityException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.DatagramSocket.getLocalAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyDescriptor.setWriteMethod(Method)": {
        "args": [
            "Method"
        ], 
        "@throws": [
            "IntrospectionException"
        ], 
        "throws": [
            "IntrospectionException"
        ]
    }, 
    "java.util.Map.putAll(Map)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Map"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.isObscured()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.put(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getJDBCMajorVersion()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.text.DateFormatSymbols.getWeekdays()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getAccessibleSelection(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collection.spliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.NumberFormat.getPercentInstance()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.LayoutManager2.getLayoutAlignmentX(Container)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Short.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.awt.image.ImageConsumer.setPixels(int, int, int, int, ColorModel, int[], int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "ColorModel", 
            "int[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.getScaleY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.PageAttributes.getOrientationRequested()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadLocalRandom.nextInt()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormat.getInstance()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.getGroupingSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.append(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Inet6Address.isMulticastAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.PosixFilePermission.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.MessageDigestSpi.engineUpdate(byte)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "byte"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ByteArrayOutputStream.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.SystemFlavorMap.setFlavorsForNative(String, DataFlavor[])": {
        "args": [
            "String", 
            "DataFlavor[]"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.text.DecimalFormat.applyLocalizedPattern(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.AWTKeyStroke.getKeyEventType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DirectColorModel.getComponents(Object, int[], int)": {
        "args": [
            "Object", 
            "int[]", 
            "int"
        ], 
        "@throws": [
            "ClassCastException", 
            "ArrayIndexOutOfBoundsException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.logging.Logger.setResourceBundle(ResourceBundle)": {
        "args": [
            "ResourceBundle"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.lang.ClassLoader.resolveClass(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.beans.Visibility.avoidingGui()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.boxed()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.getWeekYear()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.time.Year.minus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.List.actionPerformed(ActionEvent)": {
        "args": [
            "ActionEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.OptionalLong.isPresent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.lengthOfMonth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.RenderingHints.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getMaxColumnNameLength()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.Kernel.getHeight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.getDisplayCountry(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Double.compareTo(Double)": {
        "args": [
            "Double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.add(BigInteger)": {
        "args": [
            "BigInteger"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.Buffer.mark()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Kernel.getWidth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.join(CharSequence, Iterable)": {
        "args": [
            "CharSequence", 
            "Iterable"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetTime.minusNanos(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.toInstant()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.JobAttributes.setDestination(DestinationType)": {
        "args": [
            "DestinationType"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.List.getAccessibleSelectionCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RasterOp.getPoint2D(Point2D, Point2D)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Point2D", 
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.remove(ContainerListener, ContainerListener)": {
        "args": [
            "ContainerListener", 
            "ContainerListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FileDialog.getDirectory()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Period.normalized()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.Iterator.remove()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.HeadlessException.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StreamTokenizer.slashStarComments(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicInteger.getAndSet(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.BasicFileAttributeView.name()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.revalidate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.PriorityQueue.peek()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.parseCaseSensitive()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MediaTracker.waitForID(int, long)": {
        "args": [
            "int", 
            "long"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.nio.channels.SocketChannel.open()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.CheckboxMenuItem.getItemListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.getBackground()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.add(ComponentListener, ComponentListener)": {
        "args": [
            "ComponentListener", 
            "ComponentListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndIncrement(T)": {
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.multiplyExact(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.StringBuffer.setLength(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingDeque.offerLast(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.net.Inet4Address.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.PatternSyntaxException.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferFloat.getElemFloat(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.PolicySpi.engineImplies(ProtectionDomain, Permission)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ProtectionDomain", 
            "Permission"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.getIssuer()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getBytes(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.file.spi.FileSystemProvider.getFileAttributeView(Path, Class, LinkOption[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Path", 
            "Class", 
            "LinkOption[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendOffset(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setNCharacterStream(String, Reader)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Reader"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.Executors.newSingleThreadExecutor(ThreadFactory)": {
        "args": [
            "ThreadFactory"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.cert.Certificate.getEncoded()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "CertificateEncodingException"
        ], 
        "throws": [
            "CertificateEncodingException"
        ]
    }, 
    "java.util.stream.Stream.of(T[])": {
        "args": [
            "T[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.containsAlias(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "KeyStoreException"
        ], 
        "throws": [
            "KeyStoreException"
        ]
    }, 
    "java.time.LocalTime.now(Clock)": {
        "args": [
            "Clock"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.logrb(Level, String, String, String, String)": {
        "args": [
            "Level", 
            "String", 
            "String", 
            "String", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.bcsPreDeserializationHook(ObjectInputStream)": {
        "args": [
            "ObjectInputStream"
        ], 
        "@throws": [
            "IOException", 
            "ClassNotFoundException"
        ], 
        "throws": [
            "IOException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.awt.event.InputEvent.getModifiersEx()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.IntBuffer.duplicate()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextArea.minimumSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentSampleModel.setSamples(int, int, int, int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Phaser.getRegisteredParties()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setCharacterStream(String, Reader, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Reader", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.SocketPermission.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.List.addAll(Collection)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.DefaultKeyboardFocusManager.discardKeyEvents(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.CRC32.update(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertStore.getDefaultType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.toLocalDate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.firePropertyChange(String, long, long)": {
        "args": [
            "String", 
            "long", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.VetoableChangeSupport.removeVetoableChangeListener(VetoableChangeListener)": {
        "args": [
            "VetoableChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseChronology.dateYearDay(Era, int, int)": {
        "args": [
            "Era", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.shutdown()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.time.temporal.ValueRange.getMaximum()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.OptionalInt.isPresent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.AWTEventListenerProxy.getEventMask()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RenderedImage.getNumXTiles()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.getWeeksInWeekYear()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.net.Inet4Address.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.fill(double[], int, int, double)": {
        "args": [
            "double[]", 
            "int", 
            "int", 
            "double"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.math.BigDecimal.divideAndRemainder(BigDecimal)": {
        "args": [
            "BigDecimal"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.security.Provider.compute(Object, BiFunction)": {
        "args": [
            "Object", 
            "BiFunction"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDate.range(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.getFontMetrics(Font)": {
        "args": [
            "Font"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.isLeftToRight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GridLayout.getHgap()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.Paper.getHeight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractCollection.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.AccessControlException.getPermission()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.DigestOutputStream.write(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.ObjectOutputStream.write(ObjectOutput)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ObjectOutput"
        ], 
        "@throws": [
            "IOException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.ProcessBuilder.directory()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Parameter.getAnnotations()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.areFocusTraversalKeysSet(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.Class.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.FileStore.getAttribute(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.geom.CubicCurve2D.contains(Point2D)": {
        "args": [
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterators.spliterator(int[], int)": {
        "args": [
            "int[]", 
            "int"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Proxy.getProxyClass(ClassLoader, Class[])": {
        "args": [
            "ClassLoader", 
            "Class[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": [
            "IllegalArgumentException"
        ]
    }, 
    "java.awt.font.GlyphMetrics.getType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.StampedLock.tryConvertToWriteLock(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Authenticator.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.locatorsUpdateCopy()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.math.BigInteger.clearBit(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.sql.Statement.executeUpdate(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLTimeoutException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.URLConnection.getContentType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics2D.rotate(double, double, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.NumberFormat.format(double)": {
        "args": [
            "double"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.componentMoved(ComponentEvent)": {
        "args": [
            "ComponentEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CharsetDecoder.onUnmappableCharacter(CodingErrorAction)": {
        "args": [
            "CodingErrorAction"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getURL(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.VolatileImage.getHeight()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ManagementFactory.getPlatformManagementInterfaces()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPaneAdjustable.getValueIsAdjusting()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintStream.print(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isHighSurrogate(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.interfaces.RSAPrivateCrtKey.getPrimeExponentP()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.getY2()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.MemoryType.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.putShort(short)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "short"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.awt.Dialog.isUndecorated()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.Pack200.removePropertyChangeListener(PropertyChangeListener)": {
        "args": [
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPane.setLayout(LayoutManager)": {
        "args": [
            "LayoutManager"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.InterfaceAddress.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.getSample(int, int, int, DataBuffer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Container.getComponent(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.TextComponent.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertificateRevokedException.getRevocationReason()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics2D.getComposite()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.HttpURLConnection.getResponseMessage()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.DatagramSocket.getSoTimeout()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.awt.Component.getAccessibleStateSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Timestamp.setNanos(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.Class.isInterface()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.IsoChronology.dateNow()": {
        "args": [
            ""
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.lang.StringBuilder.append(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.getQueuedThreads()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.setSize(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.MenuBar.remove(MenuComponent)": {
        "args": [
            "MenuComponent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Adler32.update(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CountedCompleter.getPendingCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.StringCharacterIterator.current()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.Era.getLong(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousSocketChannel.getLocalAddress()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.ClassValue.get(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Class.getSuperclass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.getWindowStateListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextField.minimumSize(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceDragEvent.getDropAction()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.execute(String, int[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int[]"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException", 
            "SQLTimeoutException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Objects.toString(Object, String)": {
        "args": [
            "Object", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicReferenceArray.getAndSet(int, E)": {
        "args": [
            "int", 
            "E"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetListener.drop(DropTargetDropEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DropTargetDropEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DirectColorModel.getComponents(int, int[], int)": {
        "args": [
            "int", 
            "int[]", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.logrb(Level, String, String, ResourceBundle, String, Throwable)": {
        "args": [
            "Level", 
            "String", 
            "String", 
            "ResourceBundle", 
            "String", 
            "Throwable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBuffer.getElem(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Dimension.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.connect()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SocketTimeoutException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.GraphicsConfiguration.getNormalizingTransform()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.FileLock.acquiredBy()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.redispatchEvent(Component, AWTEvent)": {
        "args": [
            "Component", 
            "AWTEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DecimalStyle.withNegativeSign(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.ResultSet.updateNull(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.temporal.TemporalUnit.isDateBased()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Signature.getProvider()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.computeIfPresent(K, BiFunction)": {
        "args": [
            "K", 
            "BiFunction"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalStateException", 
            "RuntimeException"
        ], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.keyPressed(KeyEvent)": {
        "args": [
            "KeyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setRowId(String, RowId)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "RowId"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.locks.Condition.await()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.TreeMap.lowerEntry(K)": {
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.SecureRandom.generateSeed(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeMap.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collectors.toList()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.get(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.regex.Pattern.split(CharSequence, int)": {
        "args": [
            "CharSequence", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Float.min(float, float)": {
        "args": [
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.setToRotation(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterators.spliterator(long[], int, int, int)": {
        "args": [
            "long[]", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.supplyAsync(Supplier, Executor)": {
        "args": [
            "Supplier", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocket.getPort()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.DayOfWeek.get(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.io.Console.printf(String, Object[])": {
        "args": [
            "String", 
            "Object[]"
        ], 
        "@throws": [
            "IllegalFormatException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadLocalRandom.nextInt(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.withLocale(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MutableCallSite.syncAll(MutableCallSite[])": {
        "args": [
            "MutableCallSite[]"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.logging.FileHandler.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.sql.Time.setTime(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setString(String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.reflect.Field.setInt(Object, int)": {
        "args": [
            "Object", 
            "int"
        ], 
        "@throws": [
            "IllegalAccessException", 
            "IllegalArgumentException", 
            "NullPointerException", 
            "ExceptionInInitializerError"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "IllegalAccessException"
        ]
    }, 
    "java.time.temporal.TemporalAdjusters.ofDateAdjuster(UnaryOperator)": {
        "args": [
            "UnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.FloatBuffer.wrap(float[], int, int)": {
        "args": [
            "float[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.peer.DragSourceContextPeer.getCursor()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.SystemTray.getPropertyChangeListeners(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.getParameter(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongArray.getAndSet(int, long)": {
        "args": [
            "int", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.ShapeGraphicAttribute.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextHitInfo.leading(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ProcessBuilder.file()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.getValue()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Proxy.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.remove(Runnable)": {
        "args": [
            "Runnable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateClob(String, Clob)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Clob"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.BlockingDeque.put(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "InterruptedException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.image.renderable.RenderContext.setTransform(AffineTransform)": {
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.isWritable(Path)": {
        "args": [
            "Path"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.GregorianCalendar.from(ZonedDateTime)": {
        "args": [
            "ZonedDateTime"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Scanner.nextBigInteger(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "InputMismatchException", 
            "NoSuchElementException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.thenCombine(CompletionStage, BiFunction)": {
        "args": [
            "CompletionStage", 
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.normalizeMimeType(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.nextLine()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.logging.LogManager.getProperty(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServices.getService(BeanContextChild, Object, Class, Object, BeanContextServiceRevokedListener)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BeanContextChild", 
            "Object", 
            "Class", 
            "Object", 
            "BeanContextServiceRevokedListener"
        ], 
        "@throws": [
            "TooManyListenersException"
        ], 
        "throws": [
            "TooManyListenersException"
        ]
    }, 
    "java.util.stream.DoubleStream.max()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.PrinterJob.printDialog(PrintRequestAttributeSet)": {
        "args": [
            "PrintRequestAttributeSet"
        ], 
        "@throws": [
            "HeadlessException", 
            "NullPointerException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.io.PipedWriter.write(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.Period.withDays(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.ceiling(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.LinkedList.remove(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.subtractExact(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.management.OperatingSystemMXBean.getVersion()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.security.KeyStoreSpi.engineLoad(InputStream, char[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "InputStream", 
            "char[]"
        ], 
        "@throws": [
            "IOException", 
            "NoSuchAlgorithmException", 
            "CertificateException"
        ], 
        "throws": [
            "IOException", 
            "NoSuchAlgorithmException", 
            "CertificateException"
        ]
    }, 
    "java.awt.dnd.DropTargetContext.getTransferData(DataFlavor)": {
        "args": [
            "DataFlavor"
        ], 
        "@throws": [
            "IOException", 
            "UnsupportedFlavorException"
        ], 
        "throws": [
            "UnsupportedFlavorException", 
            "IOException"
        ]
    }, 
    "java.util.regex.MatchResult.group(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalStateException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.PrimitiveIterator.next()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicMarkableReference.set(V, boolean)": {
        "args": [
            "V", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.getRed(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLOutput.writeBlob(Blob)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Blob"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.cert.Certificate.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.CharBuffer.put(int, char)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "char"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.text.ParsePosition.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.PrintGraphics.getPrintJob()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.prepareCall(String, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.DatabaseMetaData.getSuperTypes(String, String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String", 
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.CharBuffer.put(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "IndexOutOfBoundsException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.lang.CharSequence.charAt(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.MinguoChronology.eraOf(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.GregorianCalendar.getTimeZone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.RenderingHints.containsKey(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.createBuffers(int, BufferCapabilities)": {
        "args": [
            "int", 
            "BufferCapabilities"
        ], 
        "@throws": [
            "AWTException", 
            "IllegalStateException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "AWTException"
        ]
    }, 
    "java.util.Base64.getMimeEncoder()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkPermission(Permission, Object)": {
        "args": [
            "Permission", 
            "Object"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.CheckboxPeer.setState(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StringWriter.append(CharSequence, int, int)": {
        "args": [
            "CharSequence", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.setInfinity(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Set.size()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.createDirectories(Path, FileAttribute[])": {
        "args": [
            "Path", 
            "FileAttribute[]"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "FileAlreadyExistsException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.beans.EventSetDescriptor.isUnicast()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ExecutorCompletionService.take()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.lang.reflect.Field.isEnumConstant()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertStoreSpi.engineGetCRLs(CRLSelector)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CRLSelector"
        ], 
        "@throws": [
            "CertStoreException"
        ], 
        "throws": [
            "CertStoreException"
        ]
    }, 
    "java.awt.event.FocusAdapter.focusGained(FocusEvent)": {
        "args": [
            "FocusEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SplittableRandom.longs(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.Year.atDay(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.getLocale()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalComponentStateException"
        ], 
        "throws": []
    }, 
    "java.util.LinkedList.toArray(T[])": {
        "args": [
            "T[]"
        ], 
        "@throws": [
            "ArrayStoreException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.stream.Stream.min(Comparator)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Comparator"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDate.adjustInto(Temporal)": {
        "args": [
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.event.KeyEvent.getKeyChar()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.ParsePosition.getErrorIndex()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ImageFilter.setHints(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.spi.BreakIteratorProvider.getLineInstance(Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.ThreadGroup.setDaemon(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.print.PrinterJob.printDialog()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.lang.reflect.Field.isSynthetic()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertStore.getInstance(String, CertStoreParameters, Provider)": {
        "args": [
            "String", 
            "CertStoreParameters", 
            "Provider"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "InvalidAlgorithmParameterException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "NoSuchAlgorithmException", 
            "InvalidAlgorithmParameterException"
        ]
    }, 
    "java.security.Policy.getInstance(String, Parameters, Provider)": {
        "args": [
            "String", 
            "Parameters", 
            "Provider"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException", 
            "IllegalArgumentException", 
            "NoSuchAlgorithmException"
        ], 
        "throws": [
            "NoSuchAlgorithmException"
        ]
    }, 
    "java.io.ObjectInputStream.readDouble()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.format.DecimalStyle.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.getWarningString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintStream.clearError()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.LDAPCertStoreParameters.getPort()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Scrollbar.getAccessibleRole()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collection.addAll(Collection)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.beans.PropertyEditorSupport.paintValue(Graphics, Rectangle)": {
        "args": [
            "Graphics", 
            "Rectangle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyDescriptor.setBound(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.EnumSet.copyOf(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.net.HttpURLConnection.usingProxy()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocket.getChannel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Random.doubles(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.LocalTime.plus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.nio.FloatBuffer.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Dialog.setResizable(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.MenuBarPeer.addHelpMenu(Menu)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Menu"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Handler.setEncoding(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException", 
            "UnsupportedEncodingException"
        ], 
        "throws": [
            "SecurityException", 
            "UnsupportedEncodingException"
        ]
    }, 
    "java.nio.channels.SelectionKey.channel()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SinglePixelPackedSampleModel.getBitOffsets()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.format(DateTimeFormatter)": {
        "args": [
            "DateTimeFormatter"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.nio.CharBuffer.array()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ReadOnlyBufferException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.image.PackedColorModel.createCompatibleSampleModel(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.LockSupport.unpark(Thread)": {
        "args": [
            "Thread"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.getLanguage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.FileSystemException.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.OptionalLong.ifPresent(LongConsumer)": {
        "args": [
            "LongConsumer"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.file.spi.FileSystemProvider.isSameFile(Path, Path)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Path", 
            "Path"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.HttpCookie.getSecure()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Rectangle.contains(int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getBytes(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.IntSummaryStatistics.getCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.get(String, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "double"
        ], 
        "@throws": [
            "IOException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.acl.Group.addMember(Principal)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Principal"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferFloat.setElem(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getIgnoreRepaint()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.intValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextComponent.getBackground()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateRef(int, Ref)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Ref"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.BitSet.nextSetBit(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.exportNode(OutputStream)": {
        "args": [
            "OutputStream"
        ], 
        "@throws": [
            "IOException", 
            "BackingStoreException"
        ], 
        "throws": [
            "IOException", 
            "BackingStoreException"
        ]
    }, 
    "java.security.Provider.getServices()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.getFont(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getTableTypes()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.locks.Condition.signalAll()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.spliterator(double[])": {
        "args": [
            "double[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintStream.printf(String, Object[])": {
        "args": [
            "String", 
            "Object[]"
        ], 
        "@throws": [
            "IllegalFormatException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.runAsync(Runnable, Executor)": {
        "args": [
            "Runnable", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.CharArrayReader.read()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.charset.Charset.isSupported(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalCharsetNameException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.execute(ForkJoinTask)": {
        "args": [
            "ForkJoinTask"
        ], 
        "@throws": [
            "NullPointerException", 
            "RejectedExecutionException"
        ], 
        "throws": []
    }, 
    "java.util.Date.setTime(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRLSelector.getCertificateChecking()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.ChoiceFormat.setChoices(double[], String[])": {
        "args": [
            "double[]", 
            "String[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.DisplayMode.getHeight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.WindowListener.windowDeactivated(WindowEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.compareTo(Duration)": {
        "args": [
            "Duration"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getAccessibleParent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Semaphore.acquireUninterruptibly(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.AlgorithmParameterGenerator.getInstance(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "NoSuchProviderException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "NoSuchAlgorithmException", 
            "NoSuchProviderException"
        ]
    }, 
    "java.util.TimerTask.scheduledExecutionTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.listIterator(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Window.getModalExclusionType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseDate.until(ChronoLocalDate)": {
        "args": [
            "ChronoLocalDate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.getReadLockCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.setCurrencySymbol(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.readObject()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ClassNotFoundException", 
            "InvalidClassException", 
            "StreamCorruptedException", 
            "OptionalDataException", 
            "IOException"
        ], 
        "throws": [
            "IOException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.util.logging.Logger.getLogger(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsCatalogsInProcedureCalls()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.jar.Attributes.putAll(Map)": {
        "args": [
            "Map"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ComponentColorModel.isCompatibleRaster(Raster)": {
        "args": [
            "Raster"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextComponent.setText(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getDeclaredField(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NoSuchFieldException", 
            "NullPointerException", 
            "SecurityException"
        ], 
        "throws": [
            "NoSuchFieldException", 
            "SecurityException"
        ]
    }, 
    "java.sql.DatabaseMetaData.supportsGroupByBeyondSelect()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.Raster.createBandedRaster(int, int, int, int, Point)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "Point"
        ], 
        "@throws": [
            "RasterFormatException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.BorderLayout.preferredLayoutSize(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBuffer.getElemFloat(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRL.verify(PublicKey, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "PublicKey", 
            "String"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "InvalidKeyException", 
            "NoSuchProviderException", 
            "SignatureException", 
            "CRLException"
        ], 
        "throws": [
            "CRLException", 
            "NoSuchAlgorithmException", 
            "InvalidKeyException", 
            "NoSuchProviderException", 
            "SignatureException"
        ]
    }, 
    "java.net.HttpCookie.setVersion(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.management.ThreadInfo.getStackTrace()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.peer.DropTargetContextPeer.acceptDrag(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setBlob(int, Blob)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Blob"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.stream.Collector.characteristics()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.removeSpi(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.BitSet.get(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.jar.JarFile.getJarEntry(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.io.ObjectInput.skip(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.Duration.abs()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.text.DecimalFormat.setNegativeSuffix(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.plus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.beans.PersistenceDelegate.instantiate(Object, Encoder)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object", 
            "Encoder"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.LocalTime.parse(CharSequence, DateTimeFormatter)": {
        "args": [
            "CharSequence", 
            "DateTimeFormatter"
        ], 
        "@throws": [
            "DateTimeParseException"
        ], 
        "throws": []
    }, 
    "java.awt.im.InputContext.removeNotify(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedTransferQueue.add(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentMap.merge(K, V, BiFunction)": {
        "args": [
            "K", 
            "V", 
            "BiFunction"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Arc2D.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocket.disconnect()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.CharBuffer.arrayOffset()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ReadOnlyBufferException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.logging.ConsoleHandler.close()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.pollLast()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentNavigableMap.headMap(K, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K", 
            "boolean"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.charset.Charset.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.avoidingGui()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Point2D.setLocation(float, float)": {
        "args": [
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.peek(DoubleConsumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DoubleConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getFocusTraversalKeys(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Rectangle2D.createIntersection(Rectangle2D)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Month.getDisplayName(TextStyle, Locale)": {
        "args": [
            "TextStyle", 
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.AclFileAttributeView.name()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SocketChannel.write(ByteBuffer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [
            "NotYetConnectedException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.reflect.Field.getFloat(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "IllegalAccessException", 
            "IllegalArgumentException", 
            "NullPointerException", 
            "ExceptionInInitializerError"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "IllegalAccessException"
        ]
    }, 
    "java.util.concurrent.ThreadLocalRandom.next(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.keyDown(Event, int)": {
        "args": [
            "Event", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalAmount.getUnits()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.intern()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.canDisplayUpTo(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.createSymbolicLink(Path, Path, FileAttribute[])": {
        "args": [
            "Path", 
            "Path", 
            "FileAttribute[]"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "FileAlreadyExistsException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.InputStream.read(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException", 
            "NullPointerException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.OffsetTime.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.getLong(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.add(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Bidi.getLength()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collection.retainAll(Collection)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.cert.X509CRL.getSigAlgName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.NetworkInterface.isUp()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.security.PKCS12Attribute.getEncoded()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getKeyListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.copyOfRange(short[], int, int)": {
        "args": [
            "short[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.PipedReader.connect(PipedWriter)": {
        "args": [
            "PipedWriter"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Component.removeNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationGroupDesc.getData()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormatSymbols.getAmPmStrings()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.CharBuffer.wrap(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Point.getY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Stream.reduce(T, BinaryOperator)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "BinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getAnnotationsByType(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.getMapSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509Certificate.checkValidity(Date)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Date"
        ], 
        "@throws": [
            "CertificateExpiredException", 
            "CertificateNotYetValidException"
        ], 
        "throws": [
            "CertificateExpiredException", 
            "CertificateNotYetValidException"
        ]
    }, 
    "java.awt.Font.createFont(int, InputStream)": {
        "args": [
            "int", 
            "InputStream"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "FontFormatException", 
            "IOException"
        ], 
        "throws": [
            "FontFormatException", 
            "IOException"
        ]
    }, 
    "java.awt.peer.ComponentPeer.getGraphics()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.DayOfWeek.getLong(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.font.LineBreakMeasurer.setPosition(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.withSecond(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.text.Annotation.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Path.startsWith(Path)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Path"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.minusSeconds(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.ResourceBundle.getBundle(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "MissingResourceException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.Era.get(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.image.DataBufferFloat.setElemFloat(int, float)": {
        "args": [
            "int", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationDesc.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.put(String, char)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "char"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ComponentSampleModel.setSample(int, int, int, float, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "float", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ListPeer.select(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahDate.toEpochDay()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509Certificate.checkValidity()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "CertificateExpiredException", 
            "CertificateNotYetValidException"
        ], 
        "throws": [
            "CertificateExpiredException", 
            "CertificateNotYetValidException"
        ]
    }, 
    "java.util.Spliterators.emptyDoubleSpliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.readFully(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Math.nextUp(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipOutputStream.putNextEntry(ZipEntry)": {
        "args": [
            "ZipEntry"
        ], 
        "@throws": [
            "ZipException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.geom.RoundRectangle2D.getArcWidth()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.SimpleBeanInfo.getDefaultEventIndex()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.LineNumberReader.reset()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.text.Collator.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.setNaN(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.spi.AbstractSelector.provider()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.minusWeeks(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.font.TextHitInfo.getOtherHit()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Short.hashCode(short)": {
        "args": [
            "short"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTKeyStroke.getAWTKeyStroke(int, int, boolean)": {
        "args": [
            "int", 
            "int", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.DomainLoadStoreParameter.getProtectionParameter()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingDeque.offer(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.math.BigInteger.probablePrime(int, Random)": {
        "args": [
            "int", 
            "Random"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.toLocalDateTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setClob(String, Clob)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Clob"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.chrono.MinguoChronology.dateEpochDay(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.LinkedHashMap.replaceAll(BiFunction)": {
        "args": [
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.drawImage(Image, int, int, int, int, Color, ImageObserver)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Image", 
            "int", 
            "int", 
            "int", 
            "int", 
            "Color", 
            "ImageObserver"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getMetaData()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.spec.PKCS8EncodedKeySpec.getEncoded()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.InvocationEvent.getThrowable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getDate(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.Arc2D.contains(Rectangle2D)": {
        "args": [
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FontMetrics.charWidth(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Comparator.comparingInt(ToIntFunction)": {
        "args": [
            "ToIntFunction"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.stream.Stream.iterate(T, UnaryOperator)": {
        "args": [
            "T", 
            "UnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandleInfo.getMethodType()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.BasicFileAttributeView.setTimes(FileTime, FileTime, FileTime)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "FileTime", 
            "FileTime", 
            "FileTime"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.SecurityManager.checkWrite(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.zip.Deflater.setStrategy(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.SplittableRandom.ints(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.Executors.newSingleThreadScheduledExecutor(ThreadFactory)": {
        "args": [
            "ThreadFactory"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.net.Proxy.type()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.higher(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Throwable.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.binarySearch(int[], int)": {
        "args": [
            "int[]", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.EventSetDescriptor.getListenerMethodDescriptors()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.max(float, float)": {
        "args": [
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.toNanos()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.jar.Attributes.containsKey(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.thenAcceptBothAsync(CompletionStage, BiConsumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CompletionStage", 
            "BiConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertificateFactory.getInstance(String, Provider)": {
        "args": [
            "String", 
            "Provider"
        ], 
        "@throws": [
            "CertificateException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "CertificateException"
        ]
    }, 
    "java.sql.DatabaseMetaData.getColumnPrivileges(String, String, String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String", 
            "String", 
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.datatransfer.DataFlavor.getReaderForText(Transferable)": {
        "args": [
            "Transferable"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalArgumentException", 
            "NullPointerException", 
            "UnsupportedEncodingException", 
            "UnsupportedFlavorException", 
            "IOException"
        ], 
        "throws": [
            "UnsupportedFlavorException", 
            "IOException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicLongFieldUpdater.lazySet(T, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.hasNext(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.UnknownFormatConversionException.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CharsetDecoder.averageCharsPerByte()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedHashMap.get(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.newKeySet(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Container.getComponentAt(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentSampleModel.getSampleDouble(int, int, int, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StreamTokenizer.pushBack()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.parseCaseInsensitive()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.Channel.close()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.beans.PropertyChangeSupport.fireIndexedPropertyChange(String, int, boolean, boolean)": {
        "args": [
            "String", 
            "int", 
            "boolean", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationMonitor.activeObject(ActivationID, MarshalledObject)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ActivationID", 
            "MarshalledObject"
        ], 
        "@throws": [
            "UnknownObjectException", 
            "RemoteException"
        ], 
        "throws": [
            "UnknownObjectException", 
            "RemoteException"
        ]
    }, 
    "java.awt.TextComponent.processEvent(AWTEvent)": {
        "args": [
            "AWTEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.LongStream.parallel()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.skip(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.jar.Attributes.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.getBounds()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.numberOfLeadingZeros(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.getPath()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.FutureTask.set(V)": {
        "args": [
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.DSAPrivateKeySpec.getX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.checkImage(Image, int, int, ImageObserver)": {
        "args": [
            "Image", 
            "int", 
            "int", 
            "ImageObserver"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.ancestorResized(HierarchyEvent)": {
        "args": [
            "HierarchyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.remove(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.lang.Long.min(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.addAll(int, Collection)": {
        "args": [
            "int", 
            "Collection"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.logging.LogRecord.getResourceBundle()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.FileChannel.tryLock()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ClosedChannelException", 
            "OverlappingFileLockException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryRelease(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalMonitorStateException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.lang.Character.isISOControl(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.registry.LocateRegistry.getRegistry(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "RemoteException"
        ], 
        "throws": [
            "RemoteException"
        ]
    }, 
    "java.util.concurrent.Phaser.awaitAdvanceInterruptibly(int, long, TimeUnit)": {
        "args": [
            "int", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException", 
            "TimeoutException"
        ], 
        "throws": [
            "InterruptedException", 
            "TimeoutException"
        ]
    }, 
    "java.util.EnumMap.put(K, V)": {
        "args": [
            "K", 
            "V"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.getTransparency()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Stream.findAny()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.File.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.repaint(int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.isLeap(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateObject(int, Object, SQLType, int)": {
        "args": [
            "int", 
            "Object", 
            "SQLType", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.SocketImpl.sendUrgentData(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.function.Function.identity()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetDragEvent.getDropAction()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintStream.write(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.MessageFormat.getLocale()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.DesktopPeer.edit(File)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "File"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Thread.sleep(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.lang.reflect.Executable.getParameterCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationGroupDesc.getLocation()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.NetworkChannel.bind(SocketAddress)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "SocketAddress"
        ], 
        "@throws": [
            "AlreadyBoundException", 
            "UnsupportedAddressTypeException", 
            "ClosedChannelException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.font.TextLayout.getBaselineOffsets()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.generate(IntSupplier)": {
        "args": [
            "IntSupplier"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.MembershipKey.drop()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.move(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataOutput.writeByte(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Map.comparingByKey(Comparator)": {
        "args": [
            "Comparator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.LineMetrics.getBaselineIndex()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.HashMap.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousSocketChannel.write(ByteBuffer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [
            "WritePendingException", 
            "NotYetConnectedException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.add(E)": {
        "args": [
            "E"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertPathBuilder.getAlgorithm()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getUserName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.function.BinaryOperator.maxBy(Comparator)": {
        "args": [
            "Comparator"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Graphics.setClip(int, int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.isReleasable()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Constructor.getParameterCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateShort(int, short)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "short"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.ForkJoinPool.shutdownNow()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.Adjustable.setVisibleAmount(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterators.iterator(OfLong)": {
        "args": [
            "OfLong"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Math.abs(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.ImageGraphicAttribute.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Enum.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Visibility.needsGui()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.copy(InputStream, Path, CopyOption[])": {
        "args": [
            "InputStream", 
            "Path", 
            "CopyOption[]"
        ], 
        "@throws": [
            "IOException", 
            "FileAlreadyExistsException", 
            "DirectoryNotEmptyException", 
            "UnsupportedOperationException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.charset.CoderResult.isOverflow()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandleProxies.wrapperInstanceTarget(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.io.LineNumberInputStream.read()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Math.tan(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.getResolverStyle()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLClassLoader.addURL(URL)": {
        "args": [
            "URL"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.getSurplusQueuedTaskCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.getHour()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTarget.createDropTargetAutoScroller(Component, Point)": {
        "args": [
            "Component", 
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Introspector.getBeanInfo(Class, Class, int)": {
        "args": [
            "Class", 
            "Class", 
            "int"
        ], 
        "@throws": [
            "IntrospectionException"
        ], 
        "throws": [
            "IntrospectionException"
        ]
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.put(K, V)": {
        "args": [
            "K", 
            "V"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Character.isWhitespace(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.toString(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.plusNanos(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.Checkbox.getMinimumAccessibleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setBlob(int, InputStream, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "InputStream", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicInteger.getAndUpdate(IntUnaryOperator)": {
        "args": [
            "IntUnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PushbackReader.ready()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.KeyboardFocusManager.getGlobalPermanentFocusOwner()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.nio.channels.AsynchronousChannelGroup.awaitTermination(long, TimeUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.nio.file.Files.createTempFile(Path, String, String, FileAttribute[])": {
        "args": [
            "Path", 
            "String", 
            "String", 
            "FileAttribute[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.ResultSet.relative(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.dnd.DragGestureRecognizer.addDragGestureListener(DragGestureListener)": {
        "args": [
            "DragGestureListener"
        ], 
        "@throws": [
            "TooManyListenersException"
        ], 
        "throws": [
            "TooManyListenersException"
        ]
    }, 
    "java.net.HttpURLConnection.getHeaderFieldDate(String, long)": {
        "args": [
            "String", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.set(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getRGB(int, int, int, int, int[], int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocket.setDatagramSocketImplFactory(DatagramSocketImplFactory)": {
        "args": [
            "DatagramSocketImplFactory"
        ], 
        "@throws": [
            "IOException", 
            "SocketException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.URLConnection.getConnectTimeout()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.TrayIconPeer.dispose()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseEvent.isPopupTrigger()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.codePointBefore(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.net.URLConnection.getDefaultRequestProperty(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.thenRun(Runnable)": {
        "args": [
            "Runnable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ClassLoader.findClass(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "ClassNotFoundException"
        ], 
        "throws": [
            "ClassNotFoundException"
        ]
    }, 
    "java.awt.MenuComponent.isShowing()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.getCallbackHandler()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.getQueuedTaskCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.getNano()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.nextUp(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertificateRevokedException.getRevocationDate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Modifier.isVolatile(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Insets.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.parse(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [
            "DateTimeParseException"
        ], 
        "throws": []
    }, 
    "java.security.SecureRandom.getSeed(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Timestamp.equals(Timestamp)": {
        "args": [
            "Timestamp"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PushbackInputStream.unread(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.ConcurrentHashMap.reduce(long, BiFunction, BiFunction)": {
        "args": [
            "long", 
            "BiFunction", 
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.getLineMetrics(CharacterIterator, int, int, FontRenderContext)": {
        "args": [
            "CharacterIterator", 
            "int", 
            "int", 
            "FontRenderContext"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLDecoder.decode(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "UnsupportedEncodingException"
        ], 
        "throws": [
            "UnsupportedEncodingException"
        ]
    }, 
    "java.awt.Scrollbar.getMaximumAccessibleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.setBackground(Color)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Color"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.setSubject(X500Principal)": {
        "args": [
            "X500Principal"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.FileTime.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Inet4Address.isMCNodeLocal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.WatchService.close()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.stream.Stream.sorted(Comparator)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Comparator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.Function.compose(Function)": {
        "args": [
            "Function"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.SecurityManager.currentLoadedClass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Rectangle.createUnion(Rectangle2D)": {
        "args": [
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.fork()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.contains(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousByteChannel.write(ByteBuffer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [
            "WritePendingException"
        ], 
        "throws": []
    }, 
    "java.util.Map.clear()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.BitSet.previousSetBit(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getConnection()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.text.StringCharacterIterator.previous()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Short.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ref.Reference.enqueue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.BreakIterator.first()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.WeakHashMap.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireShared(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.setIssuer(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Thread.run()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.setCursorName(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.SynchronousQueue.toArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.setTransactionIsolation(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.zip.ZipEntry.getLastAccessTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.Reader.markSupported()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Scrollbar.setOrientation(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.StrictMath.round(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.setRejectedExecutionHandler(RejectedExecutionHandler)": {
        "args": [
            "RejectedExecutionHandler"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.putDouble(double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.inside(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.getCharacterLevel(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.interfaces.DSAParams.getG()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.List.spliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArraySet.toArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TimeZone.getDisplayName(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.event.KeyEvent.setModifiers(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.keySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.TimeUnit.toMicros(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLong.addAndGet(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateLong(int, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.stream.IntStream.mapToDouble(IntToDoubleFunction)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "IntToDoubleFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.setBounds(Rectangle)": {
        "args": [
            "Rectangle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.plusMonths(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.Polygon.contains(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.setGroupingUsed(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.PrivilegedActionException.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.EventQueue.invokeAndWait(Runnable)": {
        "args": [
            "Runnable"
        ], 
        "@throws": [
            "InterruptedException", 
            "InvocationTargetException"
        ], 
        "throws": [
            "InterruptedException", 
            "InvocationTargetException"
        ]
    }, 
    "java.io.FilterInputStream.mark(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Encoder.get(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.throwing(String, String, Throwable)": {
        "args": [
            "String", 
            "String", 
            "Throwable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSetMetaData.isReadOnly(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.SQLInput.readInt()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.chrono.HijrahChronology.dateNow()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.LayoutManager.minimumLayoutSize(Container)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.Selector.open()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.rmi.activation.ActivationGroup.activeObject(ActivationID, MarshalledObject)": {
        "args": [
            "ActivationID", 
            "MarshalledObject"
        ], 
        "@throws": [
            "UnknownObjectException", 
            "RemoteException", 
            "ActivationException"
        ], 
        "throws": [
            "ActivationException", 
            "UnknownObjectException", 
            "RemoteException"
        ]
    }, 
    "java.nio.channels.spi.AbstractSelectableChannel.implConfigureBlocking(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.LocalTime.parse(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [
            "DateTimeParseException"
        ], 
        "throws": []
    }, 
    "java.rmi.server.UnicastRemoteObject.exportObject(Remote)": {
        "args": [
            "Remote"
        ], 
        "@throws": [
            "RemoteException"
        ], 
        "throws": [
            "RemoteException"
        ]
    }, 
    "java.awt.geom.Line2D.getP1()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.Condition.await(long, TimeUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.concurrent.ConcurrentHashMap.reduceValues(long, BiFunction)": {
        "args": [
            "long", 
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ServiceLoader.loadInstalled(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.getDataElements(int, int, Object)": {
        "args": [
            "int", 
            "int", 
            "Object"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.nio.file.spi.FileSystemProvider.isHidden(Path)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Path"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.temporal.ChronoUnit.isDateBased()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Stream.mapToDouble(ToDoubleFunction)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ToDoubleFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SinglePixelPackedSampleModel.getPixels(int, int, int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.isCancelled()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.InterfaceAddress.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.canDisplayUpTo(CharacterIterator, int, int)": {
        "args": [
            "CharacterIterator", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.spi.InputMethodContext.createInputMethodJFrame(String, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "boolean"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.getDataElements(int[], int, Object)": {
        "args": [
            "int[]", 
            "int", 
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "ArrayIndexOutOfBoundsException", 
            "IllegalArgumentException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.Container.transferFocusDownCycle()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.applet.Applet.start()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.isFlavorSerializedObjectType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantLock.getWaitQueueLength(Condition)": {
        "args": [
            "Condition"
        ], 
        "@throws": [
            "IllegalMonitorStateException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.removeComponentListener(ComponentListener)": {
        "args": [
            "ComponentListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.MessageDigest.clone()": {
        "args": [
            ""
        ], 
        "@throws": [
            "CloneNotSupportedException"
        ], 
        "throws": [
            "CloneNotSupportedException"
        ]
    }, 
    "java.sql.DatabaseMetaData.getFunctionColumns(String, String, String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String", 
            "String", 
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.invoke.MethodType.changeReturnType(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.rmi.server.RemoteObjectInvocationHandler.invoke(Object, Method, Object[])": {
        "args": [
            "Object", 
            "Method", 
            "Object[]"
        ], 
        "@throws": [
            "Throwable"
        ], 
        "throws": [
            "Throwable"
        ]
    }, 
    "java.awt.Color.getRGBColorComponents(float[])": {
        "args": [
            "float[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Deflater.deflate(byte[], int, int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Deque.removeLastOccurrence(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.NavigableMap.tailMap(K, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K", 
            "boolean"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetTime.getHour()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.Matcher.hasAnchoringBounds()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.dropArguments(MethodHandle, int, List)": {
        "args": [
            "MethodHandle", 
            "int", 
            "List"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.MenuComponent.isVisible()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.checkedSortedMap(SortedMap, Class, Class)": {
        "args": [
            "SortedMap", 
            "Class", 
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.getMaxCharBounds(FontRenderContext)": {
        "args": [
            "FontRenderContext"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.JobAttributes.getPrinter()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalMonitorStateException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.constant(Class, Object)": {
        "args": [
            "Class", 
            "Object"
        ], 
        "@throws": [
            "NullPointerException", 
            "ClassCastException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Parameter.isVarArgs()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.of(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getAccessibleChildrenCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.signalAll()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalMonitorStateException"
        ], 
        "throws": []
    }, 
    "java.util.Properties.storeToXML(OutputStream, String)": {
        "args": [
            "OutputStream", 
            "String"
        ], 
        "@throws": [
            "IOException", 
            "NullPointerException", 
            "ClassCastException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.geom.Area.exclusiveOr(Area)": {
        "args": [
            "Area"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.net.HttpCookie.setDomain(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Map.containsValue(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.jar.Attributes.entrySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.VetoableChangeSupport.getVetoableChangeListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Inet4Address.isAnyLocalAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.unmodifiableSortedMap(SortedMap)": {
        "args": [
            "SortedMap"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.getMaximumIntegerDigits()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.skip(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.LinearGradientPaint.getStartPoint()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.JobAttributes.setMinPage(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.file.Files.setPosixFilePermissions(Path, Set)": {
        "args": [
            "Path", 
            "Set"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.chrono.HijrahChronology.zonedDateTime(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Map.replaceAll(BiFunction)": {
        "args": [
            "BiFunction"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException", 
            "ConcurrentModificationException"
        ], 
        "throws": []
    }, 
    "java.beans.VetoableChangeSupport.hasListeners(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.put(String, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDateTime.with(TemporalField, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "TemporalField", 
            "long"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.DatagramChannel.getRemoteAddress()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.renderable.RenderableImageOp.isDynamic()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.registerOutParameter(String, SQLType, int)": {
        "args": [
            "String", 
            "SQLType", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Long.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsDataManipulationTransactionsOnly()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.beans.FeatureDescriptor.isExpert()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GridBagLayout.AdjustForGravity(GridBagConstraints, Rectangle)": {
        "args": [
            "GridBagConstraints", 
            "Rectangle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ImageProducer.startProduction(ImageConsumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ImageConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Double.isFinite(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.color.ICC_Profile.getInstance(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetTime.isEqual(OffsetTime)": {
        "args": [
            "OffsetTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocket.getLocalSocketAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.readShort()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.CompletableFuture.runAfterEitherAsync(CompletionStage, Runnable, Executor)": {
        "args": [
            "CompletionStage", 
            "Runnable", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.FileAttribute.name()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoPeriod.addTo(Temporal)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDateTime.getMonth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ImageFilter.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.color.ICC_ColorSpace.getMinValue(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Scrollbar.getVisibleAmount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.System.setErr(PrintStream)": {
        "args": [
            "PrintStream"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.net.URLStreamHandler.openConnection(URL)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "URL"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.rmi.Naming.rebind(String, Remote)": {
        "args": [
            "String", 
            "Remote"
        ], 
        "@throws": [
            "MalformedURLException", 
            "RemoteException", 
            "AccessException"
        ], 
        "throws": [
            "RemoteException", 
            "MalformedURLException"
        ]
    }, 
    "java.awt.JobAttributes.getDialog()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.SynchronousQueue.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataOutputStream.writeShort(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.BufferedWriter.newLine()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.SecurityManager.getThreadGroup()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Modifier.fieldModifiers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AlgorithmParameters.getEncoded()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Component.getX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.LineBreakMeasurer.nextLayout(float, int, boolean)": {
        "args": [
            "float", 
            "int", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.JobAttributes.getFromPage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.RenderingHints.put(Object, Object)": {
        "args": [
            "Object", 
            "Object"
        ], 
        "@throws": [
            "NullPointerException", 
            "ClassCastException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Optional.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Ref.getBaseTypeName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.Provider.getProperty(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyEditorManager.findEditor(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PipedReader.ready()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.KeyFactorySpi.engineGeneratePrivate(KeySpec)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "KeySpec"
        ], 
        "@throws": [
            "InvalidKeySpecException"
        ], 
        "throws": [
            "InvalidKeySpecException"
        ]
    }, 
    "java.nio.file.Files.createTempDirectory(Path, String, FileAttribute[])": {
        "args": [
            "Path", 
            "String", 
            "FileAttribute[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.zip.CRC32.reset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CharsetEncoder.onMalformedInput(CodingErrorAction)": {
        "args": [
            "CodingErrorAction"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.isDoubleBuffered()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FilterInputStream.reset()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.im.InputContext.isCompositionEnabled()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.getX1()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.FileLock.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyFactory.generatePrivate(KeySpec)": {
        "args": [
            "KeySpec"
        ], 
        "@throws": [
            "InvalidKeySpecException"
        ], 
        "throws": [
            "InvalidKeySpecException"
        ]
    }, 
    "java.beans.beancontext.BeanContextSupport.initialize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.createBufferStrategy(int, BufferCapabilities)": {
        "args": [
            "int", 
            "BufferCapabilities"
        ], 
        "@throws": [
            "AWTException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "AWTException"
        ]
    }, 
    "java.awt.font.GlyphVector.getGlyphOutline(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.net.SecureCacheResponse.getCipherSuite()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.parallelPrefix(long[], int, int, LongBinaryOperator)": {
        "args": [
            "long[]", 
            "int", 
            "int", 
            "LongBinaryOperator"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseDate.now()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.transferFocusBackward()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.findVirtual(Class, String, MethodType)": {
        "args": [
            "Class", 
            "String", 
            "MethodType"
        ], 
        "@throws": [
            "NoSuchMethodException", 
            "IllegalAccessException", 
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": [
            "NoSuchMethodException", 
            "IllegalAccessException"
        ]
    }, 
    "java.util.Spliterators.spliterator(OfDouble, long, int)": {
        "args": [
            "OfDouble", 
            "long", 
            "int"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.DigestInputStream.on(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getSuperTables(String, String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String", 
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicLongArray.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Area.contains(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.AbstractExecutorService.submit(Runnable)": {
        "args": [
            "Runnable"
        ], 
        "@throws": [
            "RejectedExecutionException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.CharSequence.toString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.LogRecord.setSequenceNumber(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.getLong(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.net.URI.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getGenericInterfaces()": {
        "args": [
            ""
        ], 
        "@throws": [
            "GenericSignatureFormatError", 
            "TypeNotPresentException", 
            "MalformedParameterizedTypeException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.minusWeeks(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.nio.charset.CharsetDecoder.flush(CharBuffer)": {
        "args": [
            "CharBuffer"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.MenuContainer.getFont()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setURL(int, URL)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "URL"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.Connection.createSQLXML()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.RoundRectangle2D.getArcHeight()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.forEach(Consumer)": {
        "args": [
            "Consumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.UnicastRemoteObject.clone()": {
        "args": [
            ""
        ], 
        "@throws": [
            "CloneNotSupportedException"
        ], 
        "throws": [
            "CloneNotSupportedException"
        ]
    }, 
    "java.time.chrono.HijrahDate.getLong(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.BasicFileAttributes.isDirectory()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.GregorianCalendar.getGreatestMinimum(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setAsciiStream(String, InputStream, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "InputStream", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.LocalDateTime.toLocalDate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ClassLoadingMXBean.isVerbose()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.TrayIconPeer.displayMessage(String, String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.getMaximumCursorColors()": {
        "args": [
            ""
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.util.Random.setSeed(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLXML.free()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.URLConnection.getReadTimeout()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.getDayOfYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLOutput.writeBytes(byte[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Math.toRadians(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingDeque.offerFirst(E, long, TimeUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.removeIf(Predicate)": {
        "args": [
            "Predicate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertPathValidatorSpi.engineValidate(CertPath, CertPathParameters)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CertPath", 
            "CertPathParameters"
        ], 
        "@throws": [
            "CertPathValidatorException", 
            "InvalidAlgorithmParameterException"
        ], 
        "throws": [
            "CertPathValidatorException", 
            "InvalidAlgorithmParameterException"
        ]
    }, 
    "java.time.format.DateTimeFormatter.withResolverFields(TemporalField[])": {
        "args": [
            "TemporalField[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.getCaretInfo(TextHitInfo, Rectangle2D)": {
        "args": [
            "TextHitInfo", 
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferInt.getData(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.color.ICC_Profile.readResolve()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ObjectStreamException"
        ], 
        "throws": [
            "ObjectStreamException"
        ]
    }, 
    "java.util.concurrent.AbstractExecutorService.invokeAll(Collection, long, TimeUnit)": {
        "args": [
            "Collection", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.net.Proxy.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.tailSet(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.Thread.uncaughtException(Thread, Throwable)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Thread", 
            "Throwable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousFileChannel.tryLock()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ClosedChannelException", 
            "OverlappingFileLockException", 
            "NonWritableChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.DirectColorModel.coerceData(WritableRaster, boolean)": {
        "args": [
            "WritableRaster", 
            "boolean"
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDateTime.atOffset(ZoneOffset)": {
        "args": [
            "ZoneOffset"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.MessageDigest.isEqual(byte[], byte[])": {
        "args": [
            "byte[]", 
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.SystemFlavorMap.addUnencodedNativeForFlavor(DataFlavor, String)": {
        "args": [
            "DataFlavor", 
            "String"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.TextComponent.removeTextListener(TextListener)": {
        "args": [
            "TextListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ItemSelectable.removeItemListener(ItemListener)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ItemListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.AutoCloseable.close()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "Exception"
        ], 
        "throws": [
            "Exception"
        ]
    }, 
    "java.security.spec.DSAPublicKeySpec.getG()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.IsoChronology.dateNow(Clock)": {
        "args": [
            "Clock"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.until(Temporal, TemporalUnit)": {
        "args": [
            "Temporal", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.image.Raster.getDataElements(int, int, int, int, Object)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "Object"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "CloneNotSupportedException"
        ]
    }, 
    "java.time.Instant.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ShortBuffer.slice()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RGBImageFilter.setPixels(int, int, int, int, ColorModel, int[], int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "ColorModel", 
            "int[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicInteger.decrementAndGet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.getTransparentPixel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicReference.lazySet(V)": {
        "args": [
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RemoteRef.getRefClass(ObjectOutput)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ObjectOutput"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetContext.getTransferable()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InvalidDnDOperationException"
        ], 
        "throws": [
            "InvalidDnDOperationException"
        ]
    }, 
    "java.util.concurrent.Phaser.register()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.lang.Throwable.getSuppressed()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LongSummaryStatistics.getCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StringBufferInputStream.read()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.newTaskFor(Callable)": {
        "args": [
            "Callable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.poll()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.getCurrency()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.now()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.ServerSocket.setPerformancePreferences(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.LongBuffer.compareTo(LongBuffer)": {
        "args": [
            "LongBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getShort(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.CodeSource.getCodeSigners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getTimestamp(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Graphics.drawString(AttributedCharacterIterator, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "AttributedCharacterIterator", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.adapt(Runnable, T)": {
        "args": [
            "Runnable", 
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.clearBatch()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.PageAttributes.setMediaToDefault()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.replace(K, V)": {
        "args": [
            "K", 
            "V"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.Duration.minusDays(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.StringJoiner.setEmptyValue(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.stream.Collectors.averagingLong(ToLongFunction)": {
        "args": [
            "ToLongFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.IntSummaryStatistics.accept(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CardLayout.maximumLayoutSize(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.Writer.write(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.applet.Applet.destroy()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AccessControlContext.getDomainCombiner()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.lang.Class.getClasses()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.lang.Object.finalize()": {
        "args": [
            ""
        ], 
        "@throws": [
            "Throwable"
        ], 
        "throws": [
            "Throwable"
        ]
    }, 
    "java.util.ArrayList.toArray(T[])": {
        "args": [
            "T[]"
        ], 
        "@throws": [
            "ArrayStoreException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ComponentColorModel.getAlphaRaster(WritableRaster)": {
        "args": [
            "WritableRaster"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.AnnotatedElement.getDeclaredAnnotationsByType(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.math.BigInteger.longValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.RuleBasedCollator.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.focusLost(FocusEvent)": {
        "args": [
            "FocusEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.JDBCType.getVendor()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.findInLine(Pattern)": {
        "args": [
            "Pattern"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetContext.acceptDrag(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedTransferQueue.poll(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.sql.DatabaseMetaData.supportsOpenStatementsAcrossCommit()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.PseudoColumnUsage.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahDate.isLeapYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.remove(Object, boolean)": {
        "args": [
            "Object", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getMaxColumnsInOrderBy()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.DataOutputStream.writeByte(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.geom.Line2D.intersects(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.Manifest.read(InputStream)": {
        "args": [
            "InputStream"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.SampleModel.setSamples(int, int, int, int, int, float[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "float[]", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.io.CharArrayWriter.reset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics2D.setComposite(Composite)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Composite"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDate.query(TemporalQuery)": {
        "args": [
            "TemporalQuery"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.TreeSet.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentColorModel.getAlpha(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.TreeMap.subMap(K, boolean, K, boolean)": {
        "args": [
            "K", 
            "boolean", 
            "K", 
            "boolean"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.from(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateNString(int, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.channels.AsynchronousByteChannel.write(ByteBuffer, A, CompletionHandler)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer", 
            "A", 
            "CompletionHandler"
        ], 
        "@throws": [
            "WritePendingException", 
            "ShutdownChannelGroupException"
        ], 
        "throws": []
    }, 
    "java.net.InetAddress.isAnyLocalAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ComponentOrientation.getOrientation(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormat.getDateTimeInstance()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.getLong(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.applet.AppletStub.appletResize(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Provider.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractQueue.addAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.regex.Matcher.reset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.removeAccessibleSelection(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.subtract(BigDecimal, MathContext)": {
        "args": [
            "BigDecimal", 
            "MathContext"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.beans.PropertyDescriptor.createPropertyEditor(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.BiConsumer.accept(T, U)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "U"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeMap.descendingMap()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.completeExceptionally(Throwable)": {
        "args": [
            "Throwable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.thenRunAsync(Runnable)": {
        "args": [
            "Runnable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.stream(T[], int, int)": {
        "args": [
            "T[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.EnumSet.of(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.forEach(BiConsumer)": {
        "args": [
            "BiConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.getKeepAlive()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.awt.Window.getOwner()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.getDisplayCountry()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.parallelSort(char[])": {
        "args": [
            "char[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedTransferQueue.poll()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Choice.insert(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ComponentColorModel.getRGB(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.Chronology.isLeapYear(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.getBlue(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.BitSet.nextClearBit(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.stream.Stream.builder()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TimerTask.run()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.insertArguments(MethodHandle, int, Object[])": {
        "args": [
            "MethodHandle", 
            "int", 
            "Object[]"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.PermissionCollection.elements()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateByte(String, byte)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "byte"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Hashtable.computeIfAbsent(K, Function)": {
        "args": [
            "K", 
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.annotation.RetentionPolicy.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.Chronology.from(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.getFirstQueuedThread()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalAmount.get(TemporalUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.util.function.ToDoubleFunction.applyAsDouble(T)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.createTranslatedChild(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "RasterFormatException"
        ], 
        "throws": []
    }, 
    "java.util.logging.Logger.logp(Level, String, String, String)": {
        "args": [
            "Level", 
            "String", 
            "String", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.pollNextLocalTask()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.FeatureDescriptor.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.Matcher.start()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.Rectangle.grow(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.IsoChronology.localDateTime(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.nio.Buffer.hasArray()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.LogManager.reset()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.awt.image.ColorModel.getRGB(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.PageAttributes.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.spi.BreakIteratorProvider.getCharacterInstance(Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Scrollbar.processAdjustmentEvent(AdjustmentEvent)": {
        "args": [
            "AdjustmentEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionService.take()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.lang.System.inheritedChannel()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.interfaces.RSAPrivateCrtKey.getPrimeExponentQ()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.DayOfWeek.isSupported(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CountedCompleter.tryComplete()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.parseLenient()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayList.listIterator(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.getNumSources()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLPermission.getActions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.acceptEitherAsync(CompletionStage, Consumer, Executor)": {
        "args": [
            "CompletionStage", 
            "Consumer", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquire(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.getLocalPort()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ShortBuffer.put(ShortBuffer)": {
        "args": [
            "ShortBuffer"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "IllegalArgumentException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.time.temporal.TemporalAdjusters.lastInMonth(DayOfWeek)": {
        "args": [
            "DayOfWeek"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyChangeEvent.getNewValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZoneId.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.appendCodePoint(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuilder.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.StampedLock.isReadLocked()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FilterInputStream.read(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Window.getOwnerlessWindows()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRL.verify(PublicKey)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "PublicKey"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "InvalidKeyException", 
            "NoSuchProviderException", 
            "SignatureException", 
            "CRLException"
        ], 
        "throws": [
            "CRLException", 
            "NoSuchAlgorithmException", 
            "InvalidKeyException", 
            "NoSuchProviderException", 
            "SignatureException"
        ]
    }, 
    "java.awt.ScrollPaneAdjustable.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayDeque.peekFirst()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.classEquals(Class, Class)": {
        "args": [
            "Class", 
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.LockSupport.parkUntil(Object, long)": {
        "args": [
            "Object", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Inflater.getBytesRead()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Collator.getInstance(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.Selector.wakeup()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingQueue.drainTo(Collection)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.io.PrintStream.println(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.parse(CharSequence, TemporalQuery)": {
        "args": [
            "CharSequence", 
            "TemporalQuery"
        ], 
        "@throws": [
            "DateTimeParseException"
        ], 
        "throws": []
    }, 
    "java.io.Reader.reset()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Arrays.parallelPrefix(double[], DoubleBinaryOperator)": {
        "args": [
            "double[]", 
            "DoubleBinaryOperator"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Long.shortValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextMembershipListener.childrenAdded(BeanContextMembershipEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BeanContextMembershipEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Point2D.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.importPreferences(InputStream)": {
        "args": [
            "InputStream"
        ], 
        "@throws": [
            "IOException", 
            "InvalidPreferencesFormatException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException", 
            "InvalidPreferencesFormatException"
        ]
    }, 
    "java.security.spec.MGF1ParameterSpec.getDigestAlgorithm()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PolicyNode.getParent()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.getTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.setAuthorityKeyIdentifier(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.NumberFormat.readResolve()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InvalidObjectException"
        ], 
        "throws": [
            "InvalidObjectException"
        ]
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.releaseService(BeanContextServices, Object, Object)": {
        "args": [
            "BeanContextServices", 
            "Object", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.minus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.withMonth(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.logging.SimpleFormatter.format(LogRecord)": {
        "args": [
            "LogRecord"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.ChronoUnit.isTimeBased()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.equals(short[], short[])": {
        "args": [
            "short[]", 
            "short[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractList.add(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.stream.Stream.concat(Stream, Stream)": {
        "args": [
            "Stream", 
            "Stream"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FontMetrics.getMaxDecent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.shear(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Throwable.fillInStackTrace()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.getClientInfo(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.OffsetDateTime.getNano()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.BufferCapabilities.isPageFlipping()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FontMetrics.getMaxCharBounds(Graphics)": {
        "args": [
            "Graphics"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Hashtable.remove(Object, Object)": {
        "args": [
            "Object", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.FocusEvent.getOppositeComponent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXRevocationChecker.setOcspResponderCert(X509Certificate)": {
        "args": [
            "X509Certificate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.LayoutManager2.invalidateLayout(Container)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setObject(String, Object, SQLType, int)": {
        "args": [
            "String", 
            "Object", 
            "SQLType", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.String.replace(CharSequence, CharSequence)": {
        "args": [
            "CharSequence", 
            "CharSequence"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseEra.getValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.getForeground()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPaneAdjustable.setMaximum(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "AWTError"
        ], 
        "throws": []
    }, 
    "java.awt.image.WritableRaster.setPixels(int, int, int, int, double[])": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "double[]"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.ArrayDeque.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeMap.firstKey()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.DatagramChannel.getLocalAddress()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Calendar.setWeekDate(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.text.ChoiceFormat.getLimits()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Random.nextDouble()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.Chronology.date(TemporalAccessor)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.net.ProxySelector.connectFailed(URI, SocketAddress, IOException)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "URI", 
            "SocketAddress", 
            "IOException"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.management.MemoryNotificationInfo.getCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.set(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException", 
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.io.Console.reader()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLInput.readURL()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.ImageConsumer.setDimensions(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Frame.setResizable(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Stream.map(Function)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.signal()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalMonitorStateException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.inverseTransform(Point2D, Point2D)": {
        "args": [
            "Point2D", 
            "Point2D"
        ], 
        "@throws": [
            "NoninvertibleTransformException"
        ], 
        "throws": [
            "NoninvertibleTransformException"
        ]
    }, 
    "java.security.cert.Extension.getId()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater(Class, String)": {
        "args": [
            "Class", 
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "RuntimeException"
        ], 
        "throws": []
    }, 
    "java.awt.ScrollPane.getViewportSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Period.getChronology()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTarget.removeDropTargetListener(DropTargetListener)": {
        "args": [
            "DropTargetListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Stack.pop()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EmptyStackException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateCharacterStream(String, Reader)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Reader"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.IllegalFormatFlagsException.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Float.intValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.next(Pattern)": {
        "args": [
            "Pattern"
        ], 
        "@throws": [
            "NoSuchElementException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CountedCompleter.exec()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.spi.InputMethod.setCharacterSubsets(Subset[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Subset[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyEditorSupport.addPropertyChangeListener(PropertyChangeListener)": {
        "args": [
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormat.setNumberFormat(NumberFormat)": {
        "args": [
            "NumberFormat"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferStrategy.getDrawGraphics()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.Chronology.localDateTime(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.time.YearMonth.minusYears(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.Deque.pop()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.util.zip.ZipOutputStream.write(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ZipException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.PreparedStatement.setNull(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Scanner.hasNextByte(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateBlob(int, InputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "InputStream"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.management.ThreadInfo.getBlockedTime()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.optionalEnd()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.text.DateFormatSymbols.getMonths()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBuffer.getElem(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.setCharAt(int, char)": {
        "args": [
            "int", 
            "char"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.AWTKeyStroke.registerSubclass(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.util.regex.Matcher.reset(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TrayIcon.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetDropEvent.getLocation()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getAccessibleChild(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.InputStream.reset()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.acl.Acl.toString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Compiler.compileClass(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Float.toHexString(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.Matcher.usePattern(Pattern)": {
        "args": [
            "Pattern"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseChronology.zonedDateTime(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayList.set(int, E)": {
        "args": [
            "int", 
            "E"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.beans.Customizer.setObject(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SortedSet.first()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.lang.StringBuilder.append(char[])": {
        "args": [
            "char[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SignatureSpi.engineUpdate(byte)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "byte"
        ], 
        "@throws": [
            "SignatureException"
        ], 
        "throws": [
            "SignatureException"
        ]
    }, 
    "java.awt.dnd.DragGestureEvent.startDrag(Cursor, Image, Point, Transferable, DragSourceListener)": {
        "args": [
            "Cursor", 
            "Image", 
            "Point", 
            "Transferable", 
            "DragSourceListener"
        ], 
        "@throws": [
            "InvalidDnDOperationException"
        ], 
        "throws": [
            "InvalidDnDOperationException"
        ]
    }, 
    "java.sql.CallableStatement.getBigDecimal(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.PriorityBlockingQueue.take()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.geom.CubicCurve2D.getCtrlY1()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneRules.getOffset(Instant)": {
        "args": [
            "Instant"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.spi.AbstractInterruptibleChannel.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Graphics2D.setTransform(AffineTransform)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.contentEquals(StringBuffer)": {
        "args": [
            "StringBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ResourceBundle.getBundle(String, Locale, ClassLoader, Control)": {
        "args": [
            "String", 
            "Locale", 
            "ClassLoader", 
            "Control"
        ], 
        "@throws": [
            "NullPointerException", 
            "MissingResourceException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.ScrollPaneAdjustable.setMinimum(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "AWTError"
        ], 
        "throws": []
    }, 
    "java.util.SortedSet.comparator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.List.toArray()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Menu.isTearOff()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoDate.now(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Executable.getParameterAnnotations()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.ofStrict(LocalDateTime, ZoneOffset, ZoneId)": {
        "args": [
            "LocalDateTime", 
            "ZoneOffset", 
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "NullPointerException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Dimension.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Iterable.forEach(Consumer)": {
        "args": [
            "Consumer"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.NavigableSet.ceiling(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.DataBufferByte.setElem(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLInput.readBoolean()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.ByteBuffer.wrap(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.AWTKeyStroke.getKeyCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.getAvailableLocales()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collectors.toMap(Function, Function, BinaryOperator, Supplier)": {
        "args": [
            "Function", 
            "Function", 
            "BinaryOperator", 
            "Supplier"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.DatagramChannel.read(ByteBuffer[], int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NotYetConnectedException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicInteger.getAndDecrement()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.NumericShaper.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SecureRandom.getInstance(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NoSuchAlgorithmException"
        ], 
        "throws": [
            "NoSuchAlgorithmException"
        ]
    }, 
    "java.security.cert.PKIXRevocationChecker.getSoftFailExceptions()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXParameters.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Currency.getDefaultFractionDigits()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Clob.getCharacterStream()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.channels.FileChannel.tryLock(long, long, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "long", 
            "boolean"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ClosedChannelException", 
            "OverlappingFileLockException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.geom.AffineTransform.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.MulticastSocket.joinGroup(SocketAddress, NetworkInterface)": {
        "args": [
            "SocketAddress", 
            "NetworkInterface"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.CompletableFuture.toCompletableFuture()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.LockSupport.parkNanos(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.await()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.image.AffineTransformOp.filter(Raster, WritableRaster)": {
        "args": [
            "Raster", 
            "WritableRaster"
        ], 
        "@throws": [
            "ImagingOpException"
        ], 
        "throws": []
    }, 
    "java.sql.Time.getMonth()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.getInt(String, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Button.getActionCommand()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SignatureSpi.engineVerify(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "SignatureException"
        ], 
        "throws": [
            "SignatureException"
        ]
    }, 
    "java.time.chrono.HijrahDate.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.InetAddress.isSiteLocalAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.getLocalSocketAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.getMonthValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.InflaterInputStream.markSupported()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.set(int, E)": {
        "args": [
            "int", 
            "E"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingQueue.toArray(T[])": {
        "args": [
            "T[]"
        ], 
        "@throws": [
            "ArrayStoreException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkAccess(Thread)": {
        "args": [
            "Thread"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Toolkit.getPropertyChangeListeners(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZoneOffset.ofHoursMinutesSeconds(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.hasWaiters(ConditionObject)": {
        "args": [
            "ConditionObject"
        ], 
        "@throws": [
            "IllegalMonitorStateException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.FlatteningPathIterator.getFlatness()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextChild.removeVetoableChangeListener(String, VetoableChangeListener)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "VetoableChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.dispatchEvent(AWTEvent)": {
        "args": [
            "AWTEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintStream.println(char[])": {
        "args": [
            "char[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.readBoolean()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.ComponentOrientation.getOrientation(ResourceBundle)": {
        "args": [
            "ResourceBundle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.OptionalInt.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.countComponents()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Frame.addNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.SimpleDateFormat.formatToCharacterIterator(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.subMap(K, boolean, K, boolean)": {
        "args": [
            "K", 
            "boolean", 
            "K", 
            "boolean"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.text.StringCharacterIterator.setText(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.shutdownOutput()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.String.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Provider.putIfAbsent(Object, Object)": {
        "args": [
            "Object", 
            "Object"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.im.spi.InputMethod.dispatchEvent(AWTEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "AWTEvent"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.font.ShapeGraphicAttribute.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.PageFormat.getImageableX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.AclEntry.newBuilder(AclEntry)": {
        "args": [
            "AclEntry"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.MouseInfoPeer.isWindowUnderMouse(Window)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Window"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.StreamHandler.publish(LogRecord)": {
        "args": [
            "LogRecord"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Ellipse2D.getX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.readDouble()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.OffsetTime.minusHours(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.ActionEvent.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.addAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongArray.getAndAccumulate(int, long, LongBinaryOperator)": {
        "args": [
            "int", 
            "long", 
            "LongBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.contains(Point2D)": {
        "args": [
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterators.spliterator(OfInt, long, int)": {
        "args": [
            "OfInt", 
            "long", 
            "int"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.Buffer.position()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkWrite(FileDescriptor)": {
        "args": [
            "FileDescriptor"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.stream.Collector.finisher()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.DigestInputStream.read(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.ObjectOutput.write(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Integer.parseInt(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicLongFieldUpdater.decrementAndGet(T)": {
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.removeContainerListener(ContainerListener)": {
        "args": [
            "ContainerListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setNString(String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.peer.TextComponentPeer.getCaretPosition()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.fireChildrenRemoved(BeanContextMembershipEvent)": {
        "args": [
            "BeanContextMembershipEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Provider.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractCollection.iterator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Field.getAnnotatedType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SortedMap.lastKey()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.lang.Thread.setContextClassLoader(ClassLoader)": {
        "args": [
            "ClassLoader"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.SimpleTimeZone.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedQueue.add(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CyclicBarrier.reset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.convertToIntDiscrete(Raster, boolean)": {
        "args": [
            "Raster", 
            "boolean"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.text.NumberFormat.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CollectionCertStoreParameters.getCollection()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.atan2(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FilePermission.newPermissionCollection()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.isSupported(TemporalUnit)": {
        "args": [
            "TemporalUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Array.getArray(long, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.EventListenerProxy.getListener()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.PreferenceChangeListener.preferenceChange(PreferenceChangeEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "PreferenceChangeEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Float.compareTo(Float)": {
        "args": [
            "Float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.FileChannel.truncate(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "NonWritableChannelException", 
            "ClosedChannelException", 
            "IllegalArgumentException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.ArrayDeque.element()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.awt.GradientPaint.getTransparency()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.SynchronousQueue.remainingCapacity()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocket.getInetAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.addItem(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.GraphicAttribute.getAscent()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getSigners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.isEqual(ChronoLocalDate)": {
        "args": [
            "ChronoLocalDate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.forDigit(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.getPeer()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseDate.lengthOfYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataOutputStream.writeBoolean(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.StringWriter.write(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setByte(String, byte)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "byte"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.text.CharacterIterator.getBeginIndex()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.componentHidden(ComponentEvent)": {
        "args": [
            "ComponentEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.MalformedInputException.getInputLength()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.setRoundingMode(RoundingMode)": {
        "args": [
            "RoundingMode"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.windowDeactivated(WindowEvent)": {
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentColorModel.getGreen(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "ArrayIndexOutOfBoundsException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.Vector.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DecimalStyle.getPositiveSign()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.plusWeeks(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.getLocale()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CharsetEncoder.implReset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BandedSampleModel.getSampleDouble(int, int, int, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.IsoChronology.eraOf(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setAsciiStream(int, InputStream, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "InputStream", 
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.event.MouseAdapter.mouseReleased(MouseEvent)": {
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.getLargestPoolSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.SignStyle.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ContainerPeer.beginValidate()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.clipRect(int, int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getRowIdLifetime()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.logging.Level.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.hitToPoint(TextHitInfo, Point2D)": {
        "args": [
            "TextHitInfo", 
            "Point2D"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.set(T, V)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataOutputStream.flush()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.DatabaseMetaData.deletesAreDetected(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.Area.isRectangular()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.removeLast()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.util.Locale.getISO3Language()": {
        "args": [
            ""
        ], 
        "@throws": [
            "MissingResourceException"
        ], 
        "throws": [
            "MissingResourceException"
        ]
    }, 
    "java.util.Vector.lastIndexOf(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.LongStream.min()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.findSpecial(Class, String, MethodType, Class)": {
        "args": [
            "Class", 
            "String", 
            "MethodType", 
            "Class"
        ], 
        "@throws": [
            "NoSuchMethodException", 
            "IllegalAccessException", 
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": [
            "NoSuchMethodException", 
            "IllegalAccessException"
        ]
    }, 
    "java.time.OffsetDateTime.getSecond()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Comparator.comparingLong(ToLongFunction)": {
        "args": [
            "ToLongFunction"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.TimeUnit.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadMXBean.getThreadCount()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Short.parseShort(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.text.Bidi.reorderVisually(byte[], int, Object[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "Object[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.saveInternal(ObjectOutputStream, String)": {
        "args": [
            "ObjectOutputStream", 
            "String"
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.charset.UnsupportedCharsetException.getCharsetName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Kernel.getKernelData(float[])": {
        "args": [
            "float[]"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.font.GraphicAttribute.getAlignment()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayDeque.push(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLong.doubleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getMaxTablesInSelect()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Runtime.traceMethodCalls(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.List.subList(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getPrimeExponentQ()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.TrayIconPeer.showPopupMenu(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkDelete(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.FontMetrics.getFontRenderContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.MonthDay.query(TemporalQuery)": {
        "args": [
            "TemporalQuery"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.GradientPaint.getPoint1()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.InflaterOutputStream.write(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException", 
            "ZipException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Container.setFocusTraversalKeys(int, Set)": {
        "args": [
            "int", 
            "Set"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetTime.query(TemporalQuery)": {
        "args": [
            "TemporalQuery"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.beans.PropertyChangeSupport.removePropertyChangeListener(PropertyChangeListener)": {
        "args": [
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.Channels.newChannel(InputStream)": {
        "args": [
            "InputStream"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.getObjectStreamClass()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.sort(T[], int, int, Comparator)": {
        "args": [
            "T[]", 
            "int", 
            "int", 
            "Comparator"
        ], 
        "@throws": [
            "ClassCastException", 
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.NavigableMap.descendingKeySet()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MediaTracker.removeImage(Image, int)": {
        "args": [
            "Image", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.spi.BreakIteratorProvider.getSentenceInstance(Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.SelectableChannel.register(Selector, int)": {
        "args": [
            "Selector", 
            "int"
        ], 
        "@throws": [
            "ClosedChannelException", 
            "ClosedSelectorException", 
            "IllegalBlockingModeException", 
            "IllegalSelectorException", 
            "CancelledKeyException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "ClosedChannelException"
        ]
    }, 
    "java.sql.CallableStatement.setObject(String, Object, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Object", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.font.GraphicAttribute.getOutline(AffineTransform)": {
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.FileChannel.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Polygon.contains(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneOffsetTransitionRule.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServices.revokeService(Class, BeanContextServiceProvider, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Class", 
            "BeanContextServiceProvider", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayList.lastIndexOf(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getByte(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.ArrayDeque.removeLast()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.util.Deque.addFirst(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "IllegalStateException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.sql.DriverManager.registerDriver(Driver, DriverAction)": {
        "args": [
            "Driver", 
            "DriverAction"
        ], 
        "@throws": [
            "SQLException", 
            "NullPointerException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.spi.ResourceBundleControlProvider.getControl(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.Clock.offset(Clock, Duration)": {
        "args": [
            "Clock", 
            "Duration"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TimeZone.getAvailableIDs(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.TextComponentPeer.getSelectionStart()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantLock.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.getDefaultUncaughtExceptionHandler()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ShortBuffer.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZoneId.getDisplayName(TextStyle, Locale)": {
        "args": [
            "TextStyle", 
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.remove()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.security.AlgorithmConstraints.permits(Set, String, AlgorithmParameters)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Set", 
            "String", 
            "AlgorithmParameters"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.Object.getClass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.KeyboardFocusManagerPeer.getCurrentFocusedWindow()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.instrument.Instrumentation.addTransformer(ClassFileTransformer, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ClassFileTransformer", 
            "boolean"
        ], 
        "@throws": [
            "NullPointerException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.net.Proxy.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Area.subtract(Area)": {
        "args": [
            "Area"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Math.nextUp(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Objects.compare(T, T, Comparator)": {
        "args": [
            "T", 
            "T", 
            "Comparator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FontMetrics.charWidth(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.createBackBuffers(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.createNewFile()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.ArrayBlockingQueue.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Button.processEvent(AWTEvent)": {
        "args": [
            "AWTEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.othersDeletesAreVisible(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.StrictMath.getExponent(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.setExtension(char, String)": {
        "args": [
            "char", 
            "String"
        ], 
        "@throws": [
            "IllformedLocaleException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicStampedReference.getReference()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.PopupMenu.getAccessibleRole()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseWheelEvent.getPreciseWheelRotation()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BandedSampleModel.setSample(int, int, int, float, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "float", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.GlyphVector.equals(GlyphVector)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "GlyphVector"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.setSamples(int, int, int, int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.plusYears(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.Choice.remove(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.OptionalInt.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.OptionalLong.getAsLong()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.net.Inet6Address.isLinkLocalAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.removeFirstOccurrence(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SeekableByteChannel.position()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.ExceptionInInitializerError.getException()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahEra.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Package.isSealed()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.EventObject.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsDevice.isDisplayChangeSupported()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.publicLookup()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getURL(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.Clock.tickSeconds(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.pow(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoChronology.getId()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.setDesignTime(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.AreaAveragingScaleFilter.setHints(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Stream.generate(Supplier)": {
        "args": [
            "Supplier"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.getBytes(int, int, byte[], int)": {
        "args": [
            "int", 
            "int", 
            "byte[]", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.print.PrinterJob.getPrinterJob()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.Locale.setDefault(Category, Locale)": {
        "args": [
            "Category", 
            "Locale"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.Duration.ofMillis(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Certificate.encode(OutputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "OutputStream"
        ], 
        "@throws": [
            "KeyException", 
            "IOException"
        ], 
        "throws": [
            "KeyException", 
            "IOException"
        ]
    }, 
    "java.awt.Component.getForeground()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.KeyEvent.getKeyText(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.Attributes.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.isReadable(Path)": {
        "args": [
            "Path"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.image.VolatileImage.getSource()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.SerializedLambda.getFunctionalInterfaceClass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalField.getDisplayName(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DirectColorModel.getGreen(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException", 
            "ClassCastException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.CheckboxMenuItemPeer.setState(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.FileTime.from(Instant)": {
        "args": [
            "Instant"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.preConcatenate(AffineTransform)": {
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.FileLock.channel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.getAllowUserInteraction()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPane.eventTypeEnabled(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.instrument.Instrumentation.redefineClasses(ClassDefinition[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ClassDefinition[]"
        ], 
        "@throws": [
            "UnmodifiableClassException", 
            "UnsupportedOperationException", 
            "ClassFormatError", 
            "NoClassDefFoundError", 
            "UnsupportedClassVersionError", 
            "ClassCircularityError", 
            "LinkageError", 
            "NullPointerException", 
            "ClassNotFoundException"
        ], 
        "throws": [
            "ClassNotFoundException", 
            "UnmodifiableClassException"
        ]
    }, 
    "java.applet.Applet.newAudioClip(URL)": {
        "args": [
            "URL"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Semaphore.acquire(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "InterruptedException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.peek()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.copyOfRange(U[], int, int, Class)": {
        "args": [
            "U[]", 
            "int", 
            "int", 
            "Class"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException", 
            "IllegalArgumentException", 
            "NullPointerException", 
            "ArrayStoreException"
        ], 
        "throws": []
    }, 
    "java.util.LongSummaryStatistics.accept(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.HashMap.putIfAbsent(K, V)": {
        "args": [
            "K", 
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipInputStream.closeEntry()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ZipException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.PriorityBlockingQueue.contains(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.intValueExact()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Parameter.isImplicit()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CompositeContext.dispose()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.CharBuffer.put(String, int, int)": {
        "args": [
            "String", 
            "int", 
            "int"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "IndexOutOfBoundsException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.nio.charset.CharsetDecoder.unmappableCharacterAction()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.CheckboxPeer.setLabel(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.RadialGradientPaint.getFocusPoint()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceDropEvent.getDropSuccess()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextComponent.setSelectionStart(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ManagementFactory.getMemoryMXBean()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Color.decode(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.awt.font.LineMetrics.getHeight()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collectors.averagingInt(ToIntFunction)": {
        "args": [
            "ToIntFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.MemoryImageSource.newPixels(int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Desktop.isSupported(Action)": {
        "args": [
            "Action"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.byteValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocket.getRemoteSocketAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.minusSeconds(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.security.spec.ECFieldF2m.getFieldSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ThreadGroup.enumerate(Thread[])": {
        "args": [
            "Thread[]"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.RoundRectangle2D.getX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.Clipboard.getData(DataFlavor)": {
        "args": [
            "DataFlavor"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalStateException", 
            "UnsupportedFlavorException", 
            "IOException"
        ], 
        "throws": [
            "UnsupportedFlavorException", 
            "IOException"
        ]
    }, 
    "java.net.Socket.setSoTimeout(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.awt.ScrollPaneAdjustable.getOrientation()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayDeque.offerLast(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Window.getWindowListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintStream.print(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.setCurve(double, double, double, double, double, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.StringCharacterIterator.setIndex(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.DoubleSummaryStatistics.getCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateBinaryStream(String, InputStream, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "InputStream", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Runtime.exit(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.font.FontRenderContext.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Beans.instantiate(ClassLoader, String, BeanContext, AppletInitializer)": {
        "args": [
            "ClassLoader", 
            "String", 
            "BeanContext", 
            "AppletInitializer"
        ], 
        "@throws": [
            "ClassNotFoundException", 
            "IOException"
        ], 
        "throws": [
            "IOException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.lang.Package.getImplementationVendor()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.InputStream.available()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.FontMetrics.getLeading()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Stack.peek()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EmptyStackException"
        ], 
        "throws": []
    }, 
    "java.awt.Color.getHSBColor(float, float, float)": {
        "args": [
            "float", 
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Signature.getAlgorithm()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Properties.store(Writer, String)": {
        "args": [
            "Writer", 
            "String"
        ], 
        "@throws": [
            "IOException", 
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.geom.Arc2D.makeBounds(double, double, double, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.readLine()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.cert.X509CRLEntry.getCertificateIssuer()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.obtrudeValue(T)": {
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BandedSampleModel.createCompatibleSampleModel(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.MenuItem.disable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.spliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isSupplementaryCodePoint(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInput.readObject()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ClassNotFoundException", 
            "IOException"
        ], 
        "throws": [
            "ClassNotFoundException", 
            "IOException"
        ]
    }, 
    "java.lang.ClassLoader.loadClass(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "ClassNotFoundException"
        ], 
        "throws": [
            "ClassNotFoundException"
        ]
    }, 
    "java.io.FileInputStream.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.StackTraceElement.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CountedCompleter.firstComplete()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.getSampleSize(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLOutput.writeObject(SQLData)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "SQLData"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.SystemTray.getTrayIconSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.signalAll()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalMonitorStateException"
        ], 
        "throws": []
    }, 
    "java.io.ObjectInput.read()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.DatabaseMetaData.getMaxIndexLength()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.ResultSet.updateTimestamp(String, Timestamp)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Timestamp"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.cert.PKIXRevocationChecker.getOptions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Frame.setMenuBar(MenuBar)": {
        "args": [
            "MenuBar"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.createWritableRaster(SampleModel, DataBuffer, Point)": {
        "args": [
            "SampleModel", 
            "DataBuffer", 
            "Point"
        ], 
        "@throws": [
            "RasterFormatException", 
            "RasterFormatException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArraySet.retainAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.rmi.server.RMIClassLoader.getClassAnnotation(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Field.setByte(Object, byte)": {
        "args": [
            "Object", 
            "byte"
        ], 
        "@throws": [
            "IllegalAccessException", 
            "IllegalArgumentException", 
            "NullPointerException", 
            "ExceptionInInitializerError"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "IllegalAccessException"
        ]
    }, 
    "java.awt.print.PrinterJob.getJobName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServiceProvider.getService(BeanContextServices, Object, Class, Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BeanContextServices", 
            "Object", 
            "Class", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextArea.preferredSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertPathBuilder.getDefaultType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingQueue.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.reverseBytes(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderContext.setRenderingHints(RenderingHints)": {
        "args": [
            "RenderingHints"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTarget.dragEnter(DropTargetDragEvent)": {
        "args": [
            "DropTargetDragEvent"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.add(AdjustmentListener, AdjustmentListener)": {
        "args": [
            "AdjustmentListener", 
            "AdjustmentListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Rectangle2D.contains(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBuffer.setElemDouble(int, int, double)": {
        "args": [
            "int", 
            "int", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setDate(String, Date, Calendar)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Date", 
            "Calendar"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.Period.ofWeeks(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.processMouseWheelEvent(MouseWheelEvent)": {
        "args": [
            "MouseWheelEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.annotateProxyClass(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.prefs.AbstractPreferences.childrenNames()": {
        "args": [
            ""
        ], 
        "@throws": [
            "BackingStoreException", 
            "IllegalStateException"
        ], 
        "throws": [
            "BackingStoreException"
        ]
    }, 
    "java.awt.List.getAccessibleContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongArray.set(int, long)": {
        "args": [
            "int", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.add(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Executable.getName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getShort(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.cert.X509CRL.getEncoded()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "CRLException"
        ], 
        "throws": [
            "CRLException"
        ]
    }, 
    "java.time.LocalDateTime.minusMonths(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.security.Permission.checkGuard(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.awt.event.WindowAdapter.windowGainedFocus(WindowEvent)": {
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ArrayBlockingQueue.add(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.RenderedImage.getMinTileY()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextChildSupport.getBeanContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceContext.setCursor(Cursor)": {
        "args": [
            "Cursor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuItem.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SocketChannel.validOps()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.getClipBounds()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseDate.minus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSource.startDrag(DragGestureEvent, Cursor, Transferable, DragSourceListener)": {
        "args": [
            "DragGestureEvent", 
            "Cursor", 
            "Transferable", 
            "DragSourceListener"
        ], 
        "@throws": [
            "InvalidDnDOperationException"
        ], 
        "throws": [
            "InvalidDnDOperationException"
        ]
    }, 
    "java.beans.beancontext.BeanContextServiceRevokedEvent.getServiceClass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.setForkJoinTaskTag(short)": {
        "args": [
            "short"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipEntry.getExtra()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.getNumBands()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.NetworkInterface.getHardwareAddress()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.awt.Graphics2D.rotate(double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.Temporal.with(TemporalField, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "TemporalField", 
            "long"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.rotate(double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkMemberAccess(Class, int)": {
        "args": [
            "Class", 
            "int"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.BorderLayout.removeLayoutComponent(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerArray.addAndGet(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.MemoryType.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEvent.consume()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.isEqual(ChronoLocalDateTime)": {
        "args": [
            "ChronoLocalDateTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.LongBuffer.array()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ReadOnlyBufferException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.put(String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.Container.isFocusTraversalPolicySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setNCharacterStream(int, Reader, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Reader", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getWaitQueueLength()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalMonitorStateException"
        ], 
        "throws": []
    }, 
    "java.util.Hashtable.putAll(Map)": {
        "args": [
            "Map"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.ScrollPane.doLayout()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Stream.flatMap(Function)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.DoubleBuffer.order()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collection.removeAll(Collection)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.enqueueKeyEvents(long, Component)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.readLine()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.file.Files.isSymbolicLink(Path)": {
        "args": [
            "Path"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.lang.ProcessBuilder.command()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.insert(int, String)": {
        "args": [
            "int", 
            "String"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.text.DateFormat.format(Date, StringBuffer, FieldPosition)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Date", 
            "StringBuffer", 
            "FieldPosition"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Currency.getDisplayName(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.charset.Charset.contains(Charset)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Charset"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isMirrored(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setNClob(int, Reader)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Reader"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.Month.plus(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics2D.getRenderingHint(Key)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Key"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DataTruncation.getParameter()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ComponentOrientation.isHorizontal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getForeground()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.RoundRectangle2D.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.Charset.newDecoder()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.MessageDigest.update(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorConvertOp.createCompatibleDestImage(BufferedImage, ColorModel)": {
        "args": [
            "BufferedImage", 
            "ColorModel"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.MenuComponent.getLocation()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.getLast()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.awt.image.PixelGrabber.setProperties(Hashtable)": {
        "args": [
            "Hashtable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.writeShort(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.Executors.callable(Runnable)": {
        "args": [
            "Runnable"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.temporal.TemporalField.isDateBased()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.filterTags(List, Collection)": {
        "args": [
            "List", 
            "Collection"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.cert.CertSelector.clone()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.tryReleaseShared(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalMonitorStateException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getQueuedThreads()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTarget.getComponent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.withYear(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.query(TemporalQuery)": {
        "args": [
            "TemporalQuery"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.LinkedList.addAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.applet.AppletContext.setStream(String, InputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "InputStream"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.zone.ZoneOffsetTransition.toEpochSecond()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.JarFile.stream()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.drawChars(char[], int, int, int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.logging.StreamHandler.flush()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.AclEntry.setFlags(Set)": {
        "args": [
            "Set"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.copyOfRange(int[], int, int)": {
        "args": [
            "int[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Graphics2D.getTransform()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.Chronology.eraOf(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.hasQueuedThreads()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Throwable.setStackTrace(StackTraceElement[])": {
        "args": [
            "StackTraceElement[]"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Color.getGreen()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousSocketChannel.connect(SocketAddress, A, CompletionHandler)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "SocketAddress", 
            "A", 
            "CompletionHandler"
        ], 
        "@throws": [
            "UnresolvedAddressException", 
            "UnsupportedAddressTypeException", 
            "AlreadyConnectedException", 
            "ConnectionPendingException", 
            "ShutdownChannelGroupException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.io.FilterWriter.write(String, int, int)": {
        "args": [
            "String", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Scrollbar.getAccessibleContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Clock.instant()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.Hashtable.entrySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.setClientInfo(Properties)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Properties"
        ], 
        "@throws": [
            "SQLClientInfoException"
        ], 
        "throws": [
            "SQLClientInfoException"
        ]
    }, 
    "java.sql.DatabaseMetaData.getProcedures(String, String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String", 
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.ClassLoader.getResources(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.ResourceBundle.keySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.list(Enumeration)": {
        "args": [
            "Enumeration"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.Certificate.verify(PublicKey, Provider)": {
        "args": [
            "PublicKey", 
            "Provider"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "InvalidKeyException", 
            "SignatureException", 
            "CertificateException", 
            "UnsupportedOperationException"
        ], 
        "throws": [
            "CertificateException", 
            "NoSuchAlgorithmException", 
            "InvalidKeyException", 
            "SignatureException"
        ]
    }, 
    "java.util.concurrent.CompletionStage.exceptionally(Function)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsResultSetHoldability(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.TextComponent.getSelectionStart()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.RowIdLifetime.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.LongAdder.add(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Blob.getBinaryStream(long, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.ProcessBuilder.command(List)": {
        "args": [
            "List"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.YearMonth.format(DateTimeFormatter)": {
        "args": [
            "DateTimeFormatter"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.zip.Checksum.update(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.clone()": {
        "args": [
            ""
        ], 
        "@throws": [
            "OutOfMemoryError"
        ], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.of(LocalDate, LocalTime, ZoneOffset)": {
        "args": [
            "LocalDate", 
            "LocalTime", 
            "ZoneOffset"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RemoteObject.getRef()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.CharArrayWriter.append(CharSequence, int, int)": {
        "args": [
            "CharSequence", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.sql.SQLInput.readNClob()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.Instant.query(TemporalQuery)": {
        "args": [
            "TemporalQuery"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.security.PolicySpi.engineRefresh()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getNString(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.OffsetDateTime.plusNanos(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ComponentSampleModel.getSampleSize(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.CodeSource.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.getCertificateValid()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingQueue.drainTo(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Parameter.getDeclaredAnnotationsByType(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.list(PrintWriter)": {
        "args": [
            "PrintWriter"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.management.RuntimeMXBean.isBootClassPathSupported()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.DigestInputStream.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoChronology.range(ChronoField)": {
        "args": [
            "ChronoField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.ServerCloneException.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.setMaximumSize(Dimension)": {
        "args": [
            "Dimension"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingDeque.putLast(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "InterruptedException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.stream.Collector.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.acl.Acl.removeEntry(Principal, AclEntry)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Principal", 
            "AclEntry"
        ], 
        "@throws": [
            "NotOwnerException"
        ], 
        "throws": [
            "NotOwnerException"
        ]
    }, 
    "java.awt.FlowLayout.setHgap(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.ParsePosition.getIndex()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getComponentAt(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.WeakHashMap.replaceAll(BiFunction)": {
        "args": [
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationSystem.registerObject(ActivationDesc)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ActivationDesc"
        ], 
        "@throws": [
            "ActivationException", 
            "UnknownGroupException", 
            "RemoteException"
        ], 
        "throws": [
            "ActivationException", 
            "UnknownGroupException", 
            "RemoteException"
        ]
    }, 
    "java.math.BigDecimal.negate(MathContext)": {
        "args": [
            "MathContext"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.TextComponent.getIndexAtPoint(Point)": {
        "args": [
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadLocalRandom.doubles()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.getFontMetrics()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setBinaryStream(String, InputStream, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "InputStream", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Component.lostFocus(Event, Object)": {
        "args": [
            "Event", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CheckboxMenuItem.getAccessibleActionCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.add(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.isLoggable(Level)": {
        "args": [
            "Level"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.LongSupplier.getAsLong()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.getStealCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.InterfaceAddress.getNetworkPrefixLength()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.BufferPoolMXBean.getTotalCapacity()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.System.getenv()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.Properties.load(Reader)": {
        "args": [
            "Reader"
        ], 
        "@throws": [
            "IOException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.retainAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.removePropertyChangeListener(PropertyChangeListener)": {
        "args": [
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocket.getLocalPort()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.NumericShaper.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.plusNanos(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Member.getDeclaringClass()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ThreadGroup.list()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.DatagramChannel.open()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.zone.ZoneOffsetTransition.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.ProtectionDomain.getCodeSource()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataOutputStream.write(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.ProcessBuilder.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.DoubleAccumulator.reset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.getType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.runAfterEitherAsync(CompletionStage, Runnable, Executor)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CompletionStage", 
            "Runnable", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalField.range()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.mod(BigInteger)": {
        "args": [
            "BigInteger"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.net.HttpCookie.setValue(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.IllegalFormatConversionException.getConversion()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.setBounds(int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.BorderLayout.setHgap(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.toBack()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.preferredSize(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getMaxCatalogNameLength()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.TextArea.getAccessibleStateSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahChronology.date(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.getExclusiveQueuedThreads()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Normalizer.isNormalized(CharSequence, Form)": {
        "args": [
            "CharSequence", 
            "Form"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.PageAttributes.getPrinterResolution()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.addHandler(Handler)": {
        "args": [
            "Handler"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.time.MonthDay.isSupported(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateString(int, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.fireServiceAdded(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.minus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.security.SignatureSpi.engineGetParameters()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.text.AttributedCharacterIterator.getAttribute(Attribute)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Attribute"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.PixelGrabber.getStatus()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.HashMap.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Enum.getDeclaringClass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Checkbox.getAccessibleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Queue.peek()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.thenAcceptBoth(CompletionStage, BiConsumer)": {
        "args": [
            "CompletionStage", 
            "BiConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.withDayOfMonth(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.lang.Integer.getInteger(String, Integer)": {
        "args": [
            "String", 
            "Integer"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.List.getFontMetrics(Font)": {
        "args": [
            "Font"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.getPeer()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.getDecimalSeparator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextArea.insert(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.readChar()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Character.digit(char, int)": {
        "args": [
            "char", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.Predicate.isEqual(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandle.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.HashMap.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.spi.InputMethod.activate()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.getQueuedTaskCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.BreakIterator.getSentenceInstance(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.KeyStore.getName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.Unreferenced.unreferenced()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.BreakIterator.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getMaxLogicalLobSize()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.file.WatchEvent.type()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramPacket.setPort(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.StreamSupport.doubleStream(OfDouble, boolean)": {
        "args": [
            "OfDouble", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getDeclaredFields()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.util.AbstractQueue.remove()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.StampedLock.tryReadLock(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.getAndAccumulate(T, V, BinaryOperator)": {
        "args": [
            "T", 
            "V", 
            "BinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Period.ofDays(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.dispatchEvent(AWTEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "AWTEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.listRoots()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.InvocationHandler.invoke(Object, Method, Object[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object", 
            "Method", 
            "Object[]"
        ], 
        "@throws": [
            "Throwable"
        ], 
        "throws": [
            "Throwable"
        ]
    }, 
    "java.awt.GraphicsDevice.setFullScreenWindow(Window)": {
        "args": [
            "Window"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URI.resolve(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.cachedChildren()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PolicyNode.getExpectedPolicies()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ShortBuffer.put(int, short)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "short"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.awt.image.Raster.createCompatibleWritableRaster()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsSubqueriesInComparisons()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.System.console()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.MessageDigest.reset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.DSAPublicKeySpec.getP()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.removeAllElements()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDateTime.plus(long, TemporalUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.Graphics2D.draw(Shape)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Shape"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.handleAsync(BiFunction)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextComponent.getAccessibleStateSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Byte.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ShortBuffer.arrayOffset()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ReadOnlyBufferException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.net.InetAddress.getLoopbackAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.FileSystems.newFileSystem(URI, Map)": {
        "args": [
            "URI", 
            "Map"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "FileSystemAlreadyExistsException", 
            "ProviderNotFoundException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.font.GlyphVector.getGlyphTransform(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.Thread.getState()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneOffsetTransition.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.HttpCookie.isHttpOnly()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceDropEvent.getDropAction()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getBoolean(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.MultipleGradientPaint.getTransform()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDate.isSupported(TemporalUnit)": {
        "args": [
            "TemporalUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SinglePixelPackedSampleModel.getSampleSize(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Bidi.baseIsLeftToRight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FlowLayout.layoutContainer(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.getNextLeftHit(TextHitInfo)": {
        "args": [
            "TextHitInfo"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.GregorianCalendar.getGregorianChange()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.minus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.temporal.WeekFields.weekOfYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseChronology.dateNow(Clock)": {
        "args": [
            "Clock"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CharsetEncoder.replaceWith(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.SignatureSpi.engineSign()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SignatureException"
        ], 
        "throws": [
            "SignatureException"
        ]
    }, 
    "java.nio.file.Files.readAttributes(Path, Class, LinkOption[])": {
        "args": [
            "Path", 
            "Class", 
            "LinkOption[]"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.ImageFilter.setColorModel(ColorModel)": {
        "args": [
            "ColorModel"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.reverse()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipOutputStream.setComment(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandle.invokeWithArguments(List)": {
        "args": [
            "List"
        ], 
        "@throws": [
            "NullPointerException", 
            "ClassCastException", 
            "WrongMethodTypeException", 
            "Throwable"
        ], 
        "throws": [
            "Throwable"
        ]
    }, 
    "java.lang.String.getBytes()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Short.compareTo(Short)": {
        "args": [
            "Short"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.ECFieldF2m.getReductionPolynomial()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Comparator.thenComparingInt(ToIntFunction)": {
        "args": [
            "ToIntFunction"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Collection.iterator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextComponent.setCaretPosition(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.net.DatagramSocketImpl.joinGroup(SocketAddress, NetworkInterface)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "SocketAddress", 
            "NetworkInterface"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.Period.toTotalMonths()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.SocketImpl.close()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.ResultSet.getCursorName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Map.remove(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.System.exit(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDateTime.from(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.stream.IntStream.mapToLong(IntToLongFunction)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "IntToLongFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.getCompletedTaskCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.Era.getValue()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.isShutdown()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocket.connect(SocketAddress)": {
        "args": [
            "SocketAddress"
        ], 
        "@throws": [
            "SocketException", 
            "IllegalArgumentException", 
            "SecurityException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.sql.ResultSet.getUnicodeStream(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.DefaultKeyboardFocusManager.dispatchEvent(AWTEvent)": {
        "args": [
            "AWTEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.EnumMap.putAll(Map)": {
        "args": [
            "Map"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.getType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.applet.Applet.getAudioClip(URL, String)": {
        "args": [
            "URL", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.CheckedOutputStream.write(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.PushbackReader.markSupported()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.thenAcceptBothAsync(CompletionStage, BiConsumer)": {
        "args": [
            "CompletionStage", 
            "BiConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.MemoryPoolMXBean.getPeakUsage()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.BitSet.flip(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getSchemas(String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.KeyStore.getProtectionAlgorithm()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.EnumSet.of(E, E)": {
        "args": [
            "E", 
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationGroup.inactiveObject(ActivationID)": {
        "args": [
            "ActivationID"
        ], 
        "@throws": [
            "UnknownObjectException", 
            "RemoteException", 
            "ActivationException"
        ], 
        "throws": [
            "ActivationException", 
            "UnknownObjectException", 
            "RemoteException"
        ]
    }, 
    "java.lang.Float.isNaN(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.SocketOptions.getOption(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SocketException", 
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.lang.reflect.Parameter.getAnnotationsByType(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetTime.minusMinutes(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.add(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.CookieStore.getCookies()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.truncatedTo(TemporalUnit)": {
        "args": [
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.security.Signature.update(ByteBuffer)": {
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [
            "SignatureException"
        ], 
        "throws": [
            "SignatureException"
        ]
    }, 
    "java.awt.KeyboardFocusManager.getGlobalFocusedWindow()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.net.URLStreamHandler.parseURL(URL, String, int, int)": {
        "args": [
            "URL", 
            "String", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.RectangularShape.intersects(Rectangle2D)": {
        "args": [
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextField.processEvent(AWTEvent)": {
        "args": [
            "AWTEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.max(BigInteger)": {
        "args": [
            "BigInteger"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.makeVisible(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Map.values()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.DosFileAttributes.isArchive()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Hashtable.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.getCurrentFocusCycleRoot()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.isFontSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferByte.getBankData()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyRep.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread)": {
        "args": [
            "Thread"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationSystem.getActivationDesc(ActivationID)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ActivationID"
        ], 
        "@throws": [
            "UnknownObjectException", 
            "ActivationException", 
            "RemoteException"
        ], 
        "throws": [
            "ActivationException", 
            "UnknownObjectException", 
            "RemoteException"
        ]
    }, 
    "java.nio.file.Files.readSymbolicLink(Path)": {
        "args": [
            "Path"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "NotLinkException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.List.listIterator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getAnnotations()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FlowLayout.preferredLayoutSize(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.interfaces.RSAKey.getModulus()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Frame.getAccessibleRole()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.ECField.getFieldSize()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.System.identityHashCode(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.IntBuffer.arrayOffset()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ReadOnlyBufferException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.nio.file.Files.walk(Path, int, FileVisitOption[])": {
        "args": [
            "Path", 
            "int", 
            "FileVisitOption[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "SecurityException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Window.setVisible(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.setDefaultFocusTraversalKeys(int, Set)": {
        "args": [
            "int", 
            "Set"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.datatransfer.Transferable.isDataFlavorSupported(DataFlavor)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DataFlavor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.put(String, float)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "float"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.List.get(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.IntSummaryStatistics.combine(IntSummaryStatistics)": {
        "args": [
            "IntSummaryStatistics"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ComponentColorModel.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertificateFactory.generateCRLs(InputStream)": {
        "args": [
            "InputStream"
        ], 
        "@throws": [
            "CRLException"
        ], 
        "throws": [
            "CRLException"
        ]
    }, 
    "java.util.logging.FileHandler.publish(LogRecord)": {
        "args": [
            "LogRecord"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.AccessibleObject.getAnnotations()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Exchanger.exchange(V, long, TimeUnit)": {
        "args": [
            "V", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException", 
            "TimeoutException"
        ], 
        "throws": [
            "InterruptedException", 
            "TimeoutException"
        ]
    }, 
    "java.awt.image.ColorModel.getComponentSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.getChildVetoableChangeListener(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.NavigableMap.firstEntry()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.instrument.Instrumentation.getAllLoadedClasses()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Clock.millis()": {
        "args": [
            ""
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.EnumSet.of(E, E[])": {
        "args": [
            "E", 
            "E[]"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationInstantiator.newInstance(ActivationID, ActivationDesc)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ActivationID", 
            "ActivationDesc"
        ], 
        "@throws": [
            "ActivationException", 
            "RemoteException"
        ], 
        "throws": [
            "ActivationException", 
            "RemoteException"
        ]
    }, 
    "java.io.StringWriter.getBuffer()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getDouble(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.DatabaseMetaData.getMaxProcedureNameLength()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Font.getStringBounds(String, FontRenderContext)": {
        "args": [
            "String", 
            "FontRenderContext"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.PageAttributes.setOrigin(OriginType)": {
        "args": [
            "OriginType"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.zip.Adler32.update(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.net.DatagramSocket.setTrafficClass(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.security.cert.X509Certificate.getIssuerAlternativeNames()": {
        "args": [
            ""
        ], 
        "@throws": [
            "CertificateParsingException"
        ], 
        "throws": [
            "CertificateParsingException"
        ]
    }, 
    "java.net.Socket.setSoLinger(boolean, int)": {
        "args": [
            "boolean", 
            "int"
        ], 
        "@throws": [
            "SocketException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.awt.Graphics2D.getRenderingHints()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.descendingMap()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.OptionalDouble.ifPresent(DoubleConsumer)": {
        "args": [
            "DoubleConsumer"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.net.InterfaceAddress.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Shape.contains(Point2D)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getDouble(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.PipedOutputStream.connect(PipedInputStream)": {
        "args": [
            "PipedInputStream"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.ResultSet.updateObject(int, Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Object"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicLong.getAndSet(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormatSymbols.setWeekdays(String[])": {
        "args": [
            "String[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.add(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.ResponseCache.getDefault()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.nio.ShortBuffer.wrap(short[], int, int)": {
        "args": [
            "short[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationSystem.unregisterObject(ActivationID)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ActivationID"
        ], 
        "@throws": [
            "ActivationException", 
            "UnknownObjectException", 
            "RemoteException"
        ], 
        "throws": [
            "ActivationException", 
            "UnknownObjectException", 
            "RemoteException"
        ]
    }, 
    "java.sql.ResultSet.getRowId(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.NetworkInterface.getByName(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SocketException", 
            "NullPointerException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.awt.Choice.getSelectedObjects()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseAdapter.mouseEntered(MouseEvent)": {
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Identity.getScope()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.BitSet.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragGestureRecognizer.getDragSource()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.getCountry()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDateTime.isEqual(ChronoLocalDateTime)": {
        "args": [
            "ChronoLocalDateTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.copyOfRange(T[], int, int)": {
        "args": [
            "T[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.AbstractExecutorService.submit(Runnable, T)": {
        "args": [
            "Runnable", 
            "T"
        ], 
        "@throws": [
            "RejectedExecutionException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.SelectionKey.attachment()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.IllegalFormatWidthException.getWidth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.ceilingKey(K)": {
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.cert.CertificateRevokedException.getAuthorityName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.equalsIgnoreCase(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.compareTo(LocalTime)": {
        "args": [
            "LocalTime"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandle.asCollector(Class, int)": {
        "args": [
            "Class", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "WrongMethodTypeException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.isIdentity()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.isAfter(ChronoZonedDateTime)": {
        "args": [
            "ChronoZonedDateTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Dialog.setUndecorated(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "IllegalComponentStateException", 
            "IllegalComponentStateException", 
            "IllegalComponentStateException", 
            "IllegalComponentStateException"
        ], 
        "throws": []
    }, 
    "java.io.File.getParentFile()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.LongBuffer.get(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.io.PrintWriter.println(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Date.getMinutes()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.CharBuffer.compareTo(CharBuffer)": {
        "args": [
            "CharBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.incrementExact(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.NavigableSet.tailSet(E, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E", 
            "boolean"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.Thread.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.IntBuffer.get(int[], int, int)": {
        "args": [
            "int[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "BufferUnderflowException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.management.MemoryUsage.getCommitted()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.validate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderContext.getRenderingHints()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.size(Path)": {
        "args": [
            "Path"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Component.repaint(long, int, int, int, int)": {
        "args": [
            "long", 
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AlphaComposite.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.FileLock.isShared()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Provider.getProvider()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.whenCompleteAsync(BiConsumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BiConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ref.SoftReference.get()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.DoubleBuffer.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.LongBuffer.allocate(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.ZoneOffset.adjustInto(Temporal)": {
        "args": [
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.toString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.getForkJoinTaskTag()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.setLocale(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [
            "IllformedLocaleException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.getKeepAliveTime(TimeUnit)": {
        "args": [
            "TimeUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.mouseDown(Event, int, int)": {
        "args": [
            "Event", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectStreamClass.getFields()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.setCorePoolSize(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.charset.Charset.aliases()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getShort(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.event.KeyEvent.getKeyLocation()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.setPercent(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Inet6Address.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.frequency(Collection, Object)": {
        "args": [
            "Collection", 
            "Object"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.SplittableRandom.nextInt(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.getInputContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SplittableRandom.ints(long, int, int)": {
        "args": [
            "long", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.owns(ConditionObject)": {
        "args": [
            "ConditionObject"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CountDownLatch.await()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.sql.Connection.createStatement()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.String.lastIndexOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.isFocusCycleRoot()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.FileChannel.open(Path, Set, FileAttribute[])": {
        "args": [
            "Path", 
            "Set", 
            "FileAttribute[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.Identity.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalField.resolve(Map, TemporalAccessor, ResolverStyle)": {
        "args": [
            "Map", 
            "TemporalAccessor", 
            "ResolverStyle"
        ], 
        "@throws": [
            "ArithmeticException", 
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.releaseBeanContextResources()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Transient.value()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.collectArguments(MethodHandle, int, MethodHandle)": {
        "args": [
            "MethodHandle", 
            "int", 
            "MethodHandle"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ComponentColorModel.getUnnormalizedComponents(float[], int, int[], int)": {
        "args": [
            "float[]", 
            "int", 
            "int[]", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.io.DataInputStream.readByte()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.addAllAbsent(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.AbstractMap.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.SimpleDateFormat.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.setDropTarget(DropTarget)": {
        "args": [
            "DropTarget"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendValue(TemporalField, int)": {
        "args": [
            "TemporalField", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.AbstractList.listIterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.OptionalInt.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.firePropertyChange(String, int, int)": {
        "args": [
            "String", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.minusSeconds(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.beans.PropertyDescriptor.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getRaster()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.thenCombineAsync(CompletionStage, BiFunction)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CompletionStage", 
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.InputMethodRequests.getTextLocation(TextHitInfo)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "TextHitInfo"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Method.getDeclaringClass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GridLayout.getColumns()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.of(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetDropEvent.getCurrentDataFlavorsAsList()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.getRed(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.getFlatness()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.min(BigDecimal)": {
        "args": [
            "BigDecimal"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Runtime.getRuntime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.TransferQueue.tryTransfer(E, long, TimeUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.sql.Clob.truncate(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.text.DecimalFormat.setGroupingSize(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FilterInputStream.read()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.ConcurrentHashMap.searchEntries(long, Function)": {
        "args": [
            "long", 
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Package.getAnnotation(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.HashMap.computeIfPresent(K, BiFunction)": {
        "args": [
            "K", 
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.ECPrivateKeySpec.getParams()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.setBasicConstraints(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.io.PrintWriter.println(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.setMinimumSize(Dimension)": {
        "args": [
            "Dimension"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.reverseBytes(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.componentShown(ComponentEvent)": {
        "args": [
            "ComponentEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextMeasurer.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Executable.getModifiers()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Checkbox.getListeners(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.setMonetaryDecimalSeparator(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.max(BigDecimal)": {
        "args": [
            "BigDecimal"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsSchemasInTableDefinitions()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.DatagramSocketImpl.getLocalPort()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.windowClosed(WindowEvent)": {
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.getWidth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getPrimaryKeys(String, String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String", 
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.ByteBuffer.putFloat(float)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "float"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.awt.BasicStroke.getEndCap()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.isDirectory()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.im.spi.InputMethod.hideWindows()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.obtrudeException(Throwable)": {
        "args": [
            "Throwable"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.getNumDataElements()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractCollection.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneOffsetTransition.getDateTimeAfter()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.removeFirstOccurrence(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.StringBuilder.insert(int, CharSequence, int, int)": {
        "args": [
            "int", 
            "CharSequence", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.BorderLayout.getVgap()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.PatternSyntaxException.getDescription()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.UnknownFormatConversionException.getConversion()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.atan(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Point.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.ensureCapacity(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ContainerPeer.beginLayout()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.DialogPeer.setResizable(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BandCombineOp.createCompatibleDestRaster(Raster)": {
        "args": [
            "Raster"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintStream.print(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.List.lastIndexOf(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.event.InputEvent.getModifiersExText(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.TextAreaPeer.replaceRange(String, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Shape.intersects(double, double, double, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuBar.getHelpMenu()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Parameter.isNamePresent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.NetworkChannel.getOption(SocketOption)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "SocketOption"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.channels.spi.AbstractSelector.register(AbstractSelectableChannel, int, Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "AbstractSelectableChannel", 
            "int", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLong.lazySet(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SecureRandom.nextBytes(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.LogStream.setDefaultStream(PrintStream)": {
        "args": [
            "PrintStream"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.PosixFileAttributeView.readAttributes()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.List.requestFocus()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.IdentityScope.getIdentity(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.cast(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.parallelSort(float[])": {
        "args": [
            "float[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.thenApplyAsync(Function)": {
        "args": [
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.getOffset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXBuilderParameters.getMaxPathLength()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.InputContext.getInputMethodControlObject()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Stream.add(T)": {
        "args": [
            "T"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.lang.Byte.toString(byte)": {
        "args": [
            "byte"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsUnionAll()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.TimeUnit.convert(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.PrinterJob.lookupStreamPrintServices(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.LookupTable.getNumComponents()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingDeque.element()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.security.Signature.getInstance(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NoSuchAlgorithmException"
        ], 
        "throws": [
            "NoSuchAlgorithmException"
        ]
    }, 
    "java.awt.FileDialog.getFilenameFilter()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Driver.connect(String, Properties)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Properties"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.beans.ConstructorProperties.value()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.SecureCacheResponse.getPeerPrincipal()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SSLPeerUnverifiedException"
        ], 
        "throws": [
            "SSLPeerUnverifiedException"
        ]
    }, 
    "java.time.ZonedDateTime.query(TemporalQuery)": {
        "args": [
            "TemporalQuery"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetDropEvent.isDataFlavorSupported(DataFlavor)": {
        "args": [
            "DataFlavor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Stream.max(Comparator)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Comparator"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.Date.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.BitSet.flip(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.sql.Connection.isClosed()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.file.attribute.AclEntry.newBuilder()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Enum.name()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.FloatBuffer.get()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "BufferUnderflowException"
        ], 
        "throws": []
    }, 
    "java.beans.Customizer.addPropertyChangeListener(PropertyChangeListener)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeMap.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandleInfo.getDeclaringClass()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.codePointCount(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.beans.SimpleBeanInfo.getMethodDescriptors()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Frame.setCursor(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.minus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.Comparator.naturalOrder()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.paint(Graphics)": {
        "args": [
            "Graphics"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.PriorityQueue.toArray(T[])": {
        "args": [
            "T[]"
        ], 
        "@throws": [
            "ArrayStoreException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingDeque.size()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.TimeUnit.toMillis(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.fill(short[], int, int, short)": {
        "args": [
            "short[]", 
            "int", 
            "int", 
            "short"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.image.DataBuffer.getNumBanks()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.CodeSigner.getTimestamp()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.NumericShaper.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.AttributedCharacterIterator.getAttributes()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.PSSParameterSpec.getTrailerField()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.getVetoableChangeListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BandCombineOp.getPoint2D(Point2D, Point2D)": {
        "args": [
            "Point2D", 
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Dimension2D.getWidth()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setNClob(String, NClob)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "NClob"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.hasQueuedPredecessors()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.contains(Point)": {
        "args": [
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Date.setMinutes(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.DayOfWeek.getValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertStore.getCertStoreParameters()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Base64.getUrlEncoder()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.addBatch(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.Buffer.reset()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InvalidMarkException"
        ], 
        "throws": []
    }, 
    "java.util.Locale.setVariant(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllformedLocaleException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.pollLast()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.Condition.signal()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Choice.add(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.format.DecimalStyle.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LongSummaryStatistics.getSum()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.WindowEvent.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Polygon.contains(Point)": {
        "args": [
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ResourceBundle.getFormats(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.PrintStream.print(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuItem.removeActionListener(ActionListener)": {
        "args": [
            "ActionListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReadWriteLock.readLock()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.firstKey()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setBlob(String, InputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "InputStream"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.ResultSet.getAsciiStream(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.charset.Charset.displayName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.interfaces.RSAPrivateKey.getPrivateExponent()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Menu.addNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertStoreSpi.engineGetCertificates(CertSelector)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CertSelector"
        ], 
        "@throws": [
            "CertStoreException"
        ], 
        "throws": [
            "CertStoreException"
        ]
    }, 
    "java.io.DataInput.readShort()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.HttpCookie.getDomain()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getPeer()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.windowOpened(WindowEvent)": {
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getObject(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.UUID.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingDeque.removeFirstOccurrence(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.UnresolvedPermission.getUnresolvedActions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeMap.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndAccumulate(T, long, LongBinaryOperator)": {
        "args": [
            "T", 
            "long", 
            "LongBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Dimension.getSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.CharBuffer.put(CharBuffer)": {
        "args": [
            "CharBuffer"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "IllegalArgumentException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.MinguoChronology.date(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.io.DataInputStream.readFully(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.logging.Handler.getLevel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertPathValidator.getInstance(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NoSuchAlgorithmException"
        ], 
        "throws": [
            "NoSuchAlgorithmException"
        ]
    }, 
    "java.math.BigDecimal.divide(BigDecimal, RoundingMode)": {
        "args": [
            "BigDecimal", 
            "RoundingMode"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setInt(String, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Iterator.forEachRemaining(Consumer)": {
        "args": [
            "Consumer"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.IntBuffer.get()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "BufferUnderflowException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.getWindingRule()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.max(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.getComponentAt(Point)": {
        "args": [
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isUnicodeIdentifierPart(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Path.isAbsolute()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.LogManager.addPropertyChangeListener(PropertyChangeListener)": {
        "args": [
            "PropertyChangeListener"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.awt.print.PageFormat.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDate.lengthOfMonth()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.SplashScreen.createGraphics()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": [
            "IllegalStateException"
        ]
    }, 
    "java.text.AttributedCharacterIterator.getRunStart(Attribute)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Attribute"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.sort(Object[])": {
        "args": [
            "Object[]"
        ], 
        "@throws": [
            "ClassCastException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.updateCursorImmediately()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.list()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Identity.certificates()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Driver.jdbcCompliant()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.PixelGrabber.setHints(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousFileChannel.lock(A, CompletionHandler)": {
        "args": [
            "A", 
            "CompletionHandler"
        ], 
        "@throws": [
            "OverlappingFileLockException", 
            "NonWritableChannelException"
        ], 
        "throws": []
    }, 
    "java.awt.AlphaComposite.getRule()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.resolveObject(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.beans.EventSetDescriptor.setInDefaultEventSet(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextField.preferredSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Modifier.isFinal(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Area.intersects(Rectangle2D)": {
        "args": [
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterators.trySplit()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorConvertOp.getICC_Profiles()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.fill(long[], int, int, long)": {
        "args": [
            "long[]", 
            "int", 
            "int", 
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.sql.Array.getResultSet(Map)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Map"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Toolkit.createCheckbox(Checkbox)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Checkbox"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.net.HttpCookie.getComment()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getPrimeP()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.GlyphVector.getLayoutFlags()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.hasNextBigDecimal()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.time.Instant.isSupported(TemporalUnit)": {
        "args": [
            "TemporalUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.Reader.read(char[], int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.CookieHandler.put(URI, Map)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "URI", 
            "Map"
        ], 
        "@throws": [
            "IOException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.AffineTransformOp.createCompatibleDestImage(BufferedImage, ColorModel)": {
        "args": [
            "BufferedImage", 
            "ColorModel"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.MulticastSocket.getTimeToLive()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.cert.LDAPCertStoreParameters.getServerName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.AbstractExecutorService.newTaskFor(Runnable, T)": {
        "args": [
            "Runnable", 
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.FeatureDescriptor.getValue(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.NavigableMap.subMap(K, boolean, K, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K", 
            "boolean", 
            "K", 
            "boolean"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.Provider.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Authenticator.getRequestingScheme()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Array.getLength(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": [
            "IllegalArgumentException"
        ]
    }, 
    "java.awt.Scrollbar.getOrientation()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.putIfAbsent(K, V)": {
        "args": [
            "K", 
            "V"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.List.isShowing()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.DelayQueue.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneRules.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.decode(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.time.chrono.ChronoLocalDateTime.isBefore(ChronoLocalDateTime)": {
        "args": [
            "ChronoLocalDateTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Choice.getAccessibleActionCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Event.shiftDown()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormatSymbols.getInstance(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.file.FileStore.getUnallocatedSpace()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.ConcurrentHashMap.reduceEntries(long, Function, BiFunction)": {
        "args": [
            "long", 
            "Function", 
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadFactory.newThread(Runnable)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Runnable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Choice.select(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics2D.addRenderingHints(Map)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Map"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.getHeaderFieldLong(String, long)": {
        "args": [
            "String", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyRep.readResolve()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ObjectStreamException"
        ], 
        "throws": [
            "ObjectStreamException"
        ]
    }, 
    "java.io.DataInput.readDouble()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.AWTEventMulticaster.keyReleased(KeyEvent)": {
        "args": [
            "KeyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.get(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.String.valueOf(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.FontRenderContext.getFractionalMetricsHint()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDate.atTime(LocalTime)": {
        "args": [
            "LocalTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.PrinterJob.setPageable(Pageable)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Pageable"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": [
            "NullPointerException"
        ]
    }, 
    "java.nio.channels.Channels.newReader(ReadableByteChannel, String)": {
        "args": [
            "ReadableByteChannel", 
            "String"
        ], 
        "@throws": [
            "UnsupportedCharsetException"
        ], 
        "throws": []
    }, 
    "java.lang.StrictMath.max(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.remove(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateNClob(int, NClob)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "NClob"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.StringReader.close()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Hashtable.replaceAll(BiFunction)": {
        "args": [
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.getName(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.StringBuilder.insert(int, long)": {
        "args": [
            "int", 
            "long"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.nio.ShortBuffer.wrap(short[])": {
        "args": [
            "short[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.TextStyle.isStandalone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.UnresolvedPermission.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.FileLock.position()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.BeanInfo.getPropertyDescriptors()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayDeque.getFirst()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.sql.Driver.getPropertyInfo(String, Properties)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Properties"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.URL.getDefaultPort()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.copyOfRange(long[], int, int)": {
        "args": [
            "long[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.PipedReader.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.StringBuffer.append(CharSequence, int, int)": {
        "args": [
            "CharSequence", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Toolkit.getFontList()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.trimToSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.FileVisitOption.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getDrawGraphics()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.setVisible(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.acl.Group.removeMember(Principal)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Principal"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.remove(WindowStateListener, WindowStateListener)": {
        "args": [
            "WindowStateListener", 
            "WindowStateListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRLSelector.setIssuers(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Deflater.setInput(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.getObjectParameter(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getTimestamp(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.channels.spi.AsynchronousChannelProvider.openAsynchronousChannelGroup(ExecutorService, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ExecutorService", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.function.UnaryOperator.identity()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayDeque.contains(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.StreamHandler.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.awt.image.VolatileImage.getCapabilities()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.newByteChannel(Path, OpenOption[])": {
        "args": [
            "Path", 
            "OpenOption[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "FileAlreadyExistsException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Vector.elementAt(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.image.Raster.getSamples(int, int, int, int, int, int[])": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.io.PipedInputStream.available()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Component.createVolatileImage(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.reduceKeysToDouble(long, ToDoubleFunction, double, DoubleBinaryOperator)": {
        "args": [
            "long", 
            "ToDoubleFunction", 
            "double", 
            "DoubleBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipInputStream.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Locale.filter(List, Collection, FilteringMode)": {
        "args": [
            "List", 
            "Collection", 
            "FilteringMode"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.file.attribute.AclEntry.permissions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.EventQueue.pop()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EmptyStackException"
        ], 
        "throws": [
            "EmptyStackException"
        ]
    }, 
    "java.lang.StrictMath.nextDown(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahEra.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataInput.readInt()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.LinkedBlockingDeque.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Time.setYear(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.io.PrintStream.flush()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.JarEntry.getAttributes()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.geom.QuadCurve2D.setCurve(Point2D, Point2D, Point2D)": {
        "args": [
            "Point2D", 
            "Point2D", 
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.setWritable(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.lang.Thread.getContextClassLoader()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.List.getSelectedItem()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.hasNextInt(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.Toolkit.addAWTEventListener(AWTEventListener, long)": {
        "args": [
            "AWTEventListener", 
            "long"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.security.CryptoPrimitive.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Throwable.printStackTrace()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.quadTo(float, float, float, float)": {
        "args": [
            "float", 
            "float", 
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantLock.tryLock(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException", 
            "NullPointerException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.UUID.variant()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLInput.readNString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.NetworkInterface.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.Charset.defaultCharset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataOutput.writeUTF(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.event.KeyEvent.getKeyModifiersText(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ClassLoader.getResourceAsStream(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayDeque.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.MulticastChannel.join(InetAddress, NetworkInterface)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "InetAddress", 
            "NetworkInterface"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalStateException", 
            "UnsupportedOperationException", 
            "ClosedChannelException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.ExecutorService.invokeAll(Collection, long, TimeUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Collection", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException", 
            "NullPointerException", 
            "RejectedExecutionException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.stream.Collectors.reducing(T, BinaryOperator)": {
        "args": [
            "T", 
            "BinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.TextAreaPeer.getMinimumSize(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayDeque.removeFirstOccurrence(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.reverse(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.LookupOp.getBounds2D(BufferedImage)": {
        "args": [
            "BufferedImage"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.fill(boolean[], boolean)": {
        "args": [
            "boolean[]", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferUShort.getElem(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.getLastModifiedTime(Path, LinkOption[])": {
        "args": [
            "Path", 
            "LinkOption[]"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.AWTEventMulticaster.add(TextListener, TextListener)": {
        "args": [
            "TextListener", 
            "TextListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.MemoryManagerMXBean.getMemoryPoolNames()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceAdapter.dragDropEnd(DragSourceDropEvent)": {
        "args": [
            "DragSourceDropEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.ChoiceFormat.applyPattern(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.MemoryPoolMXBean.getType()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Authenticator.getRequestingPrompt()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.getAlignmentX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.OptionalInt.orElseThrow(Supplier)": {
        "args": [
            "Supplier"
        ], 
        "@throws": [
            "X", 
            "NullPointerException"
        ], 
        "throws": [
            "Throwable"
        ]
    }, 
    "java.awt.AWTEventMulticaster.add(ActionListener, ActionListener)": {
        "args": [
            "ActionListener", 
            "ActionListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseEvent.getLocationOnScreen()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.getInetAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ContainerOrderFocusTraversalPolicy.setImplicitDownCycleTraversal(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasWaiters(ConditionObject)": {
        "args": [
            "ConditionObject"
        ], 
        "@throws": [
            "IllegalMonitorStateException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.zip.Adler32.reset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.Externalizable.readExternal(ObjectInput)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ObjectInput"
        ], 
        "@throws": [
            "IOException", 
            "ClassNotFoundException"
        ], 
        "throws": [
            "IOException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.awt.geom.RoundRectangle2D.contains(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertPathChecker.isForwardCheckingSupported()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.LongBuffer.get(long[], int, int)": {
        "args": [
            "long[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "BufferUnderflowException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.time.Instant.parse(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [
            "DateTimeParseException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.PathIterator.currentSegment(double[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.LongPredicate.and(LongPredicate)": {
        "args": [
            "LongPredicate"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.spi.TimeZoneNameProvider.getDisplayName(String, boolean, int, Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "boolean", 
            "int", 
            "Locale"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URI.getFragment()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Certificate.decode(InputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "InputStream"
        ], 
        "@throws": [
            "KeyException", 
            "IOException"
        ], 
        "throws": [
            "KeyException", 
            "IOException"
        ]
    }, 
    "java.awt.MouseInfo.getPointerInfo()": {
        "args": [
            ""
        ], 
        "@throws": [
            "HeadlessException", 
            "SecurityException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.io.ObjectInputStream.readUnshared()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ClassNotFoundException", 
            "StreamCorruptedException", 
            "ObjectStreamException", 
            "OptionalDataException", 
            "IOException"
        ], 
        "throws": [
            "IOException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.util.logging.LogManager.checkAccess()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.rmi.server.LogStream.parseLevel(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setBoolean(int, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "boolean"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicLongArray.get(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoChronology.dateYearDay(Era, int, int)": {
        "args": [
            "Era", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.awt.Font.decode(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.OperatingSystemMXBean.getName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.FontMetrics.hasUniformLineMetrics()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipFile.size()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.sql.Statement.executeLargeUpdate(String, String[])": {
        "args": [
            "String", 
            "String[]"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException", 
            "SQLTimeoutException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.Semaphore.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.UUID.compareTo(UUID)": {
        "args": [
            "UUID"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getTransparency()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.spi.AbstractSelector.begin()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.floor(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.from(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetListener.dragEnter(DropTargetDragEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DropTargetDragEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.AbstractChronology.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.HashSet.contains(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.InflaterOutputStream.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Component.processMouseMotionEvent(MouseEvent)": {
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.lastKey()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.util.jar.Attributes.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.isEqual(ChronoZonedDateTime)": {
        "args": [
            "ChronoZonedDateTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.DoubleBuffer.allocate(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.GridBagLayout.addLayoutComponent(String, Component)": {
        "args": [
            "String", 
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.newOutputStream(Path, OpenOption[])": {
        "args": [
            "Path", 
            "OpenOption[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.charset.UnmappableCharacterException.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.toArray(T[])": {
        "args": [
            "T[]"
        ], 
        "@throws": [
            "ArrayStoreException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.plus(long, TemporalUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.toEpochSecond()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CardLayout.previous(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormat.getDateTimeInstance(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTarget.setComponent(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Bidi.isRightToLeft()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.registry.LocateRegistry.getRegistry(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "RemoteException"
        ], 
        "throws": [
            "RemoteException"
        ]
    }, 
    "java.util.function.IntUnaryOperator.compose(IntUnaryOperator)": {
        "args": [
            "IntUnaryOperator"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.font.GlyphVector.getGlyphCharIndices(int, int, int[])": {
        "args": [
            "int", 
            "int", 
            "int[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PolicyNode.getDepth()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.createTempDirectory(String, FileAttribute[])": {
        "args": [
            "String", 
            "FileAttribute[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.PropertyResourceBundle.handleKeySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeSet.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.Book.getNumberOfPages()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.get(String, Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Object"
        ], 
        "@throws": [
            "IOException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.WritableRenderedImage.hasTileWriters()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintWriter.clearError()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImageOp.getMinX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.color.ColorSpace.getNumComponents()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRLEntry.getSerialNumber()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.trim()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.HttpCookie.setPortlist(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.prestartAllCoreThreads()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.setPaintMode()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.MouseDragGestureRecognizer.mouseMoved(MouseEvent)": {
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.SystemFlavorMap.isJavaMIMEType(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Polygon.contains(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.ItemEvent.getItem()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BandedSampleModel.setSamples(int, int, int, int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.setWeekDefinition(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.PageAttributes.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.initializeBeanContextResources()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedQueue.spliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsNonNullableColumns()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.management.ManagementFactory.getCompilationMXBean()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.getMinimumIntegerDigits()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.spi.CalendarDataProvider.getMinimalDaysInFirstWeek(Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.interfaces.RSAPrivateCrtKey.getPublicExponent()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Identity.removeCertificate(Certificate)": {
        "args": [
            "Certificate"
        ], 
        "@throws": [
            "KeyManagementException", 
            "SecurityException"
        ], 
        "throws": [
            "KeyManagementException"
        ]
    }, 
    "java.security.CodeSource.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.dividedBy(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.MinguoDate.toEpochDay()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.setLocale(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.AbstractList.lastIndexOf(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.AlgorithmParameterGeneratorSpi.engineInit(int, SecureRandom)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "SecureRandom"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPaneAdjustable.getMinimum()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.isSupported(TemporalField)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.BreakIterator.getCharacterInstance()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.NumericShaper.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterator.tryAdvance(DoubleConsumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DoubleConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Checksum.update(byte[], int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Deque.element()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.util.stream.Collector.combiner()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.instantiateChild(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException", 
            "ClassNotFoundException"
        ], 
        "throws": [
            "IOException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.nio.file.attribute.FileTime.to(TimeUnit)": {
        "args": [
            "TimeUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.getRotateInstance(double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.setDigit(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.RectangularShape.getCenterX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.replace(int, int, String)": {
        "args": [
            "int", 
            "int", 
            "String"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.AbstractSequentialList.set(int, E)": {
        "args": [
            "int", 
            "E"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.io.DataInput.readUnsignedByte()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.BasicPermission.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.LockSupport.getBlocker(Thread)": {
        "args": [
            "Thread"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.minimumSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.VolatileImage.getWidth()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.GlyphVector.getGlyphOutline(int, float, float)": {
        "args": [
            "int", 
            "float", 
            "float"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.Calendar.setMinimalDaysInFirstWeek(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.getDayOfWeek()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Inet6Address.isIPv4CompatibleAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.after(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Period.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.setPixels(int, int, int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceContext.dragExit(DragSourceEvent)": {
        "args": [
            "DragSourceEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Comparator.comparing(Function, Comparator)": {
        "args": [
            "Function", 
            "Comparator"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.spec.ECFieldFp.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.MemoryImageSource.isConsumer(ImageConsumer)": {
        "args": [
            "ImageConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FontMetrics.getLineMetrics(String, int, int, Graphics)": {
        "args": [
            "String", 
            "int", 
            "int", 
            "Graphics"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.getActiveWindow()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ClassLoadingMXBean.getLoadedClassCount()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseMotionAdapter.mouseMoved(MouseEvent)": {
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.OpenType.getVersion()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.close()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.HttpRetryException.responseCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadMXBean.resetPeakThreadCount()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.net.ServerSocket.setReuseAddress(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.util.LinkedList.pollFirst()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndDecrement(T)": {
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.createPackedRaster(int, int, int, int[], Point)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int[]", 
            "Point"
        ], 
        "@throws": [
            "RasterFormatException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetContext.rejectDrag()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.EllipticCurve.getField()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.Clipboard.addFlavorListener(FlavorListener)": {
        "args": [
            "FlavorListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.plusYears(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.zip.GZIPOutputStream.write(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.locks.StampedLock.getReadLockCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.removeIf(Predicate)": {
        "args": [
            "Predicate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Array.setDouble(Object, int, double)": {
        "args": [
            "Object", 
            "int", 
            "double"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.updateAndGet(T, IntUnaryOperator)": {
        "args": [
            "T", 
            "IntUnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentColorModel.getBlue(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "ArrayIndexOutOfBoundsException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.lang.Class.getMethod(String, Class[])": {
        "args": [
            "String", 
            "Class[]"
        ], 
        "@throws": [
            "NoSuchMethodException", 
            "NullPointerException", 
            "SecurityException"
        ], 
        "throws": [
            "NoSuchMethodException", 
            "SecurityException"
        ]
    }, 
    "java.util.logging.LogRecord.getParameters()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setCharacterStream(int, Reader)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Reader"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.PushbackInputStream.markSupported()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getInt(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.regex.Matcher.pattern()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PushbackReader.unread(char[])": {
        "args": [
            "char[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.management.RuntimeMXBean.getManagementSpecVersion()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractCollection.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DataTruncation.getIndex()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Modifier.isStrict(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.setScale(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.Graphics.translate(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.get(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "CancellationException", 
            "ExecutionException", 
            "InterruptedException", 
            "TimeoutException"
        ], 
        "throws": [
            "InterruptedException", 
            "ExecutionException", 
            "TimeoutException"
        ]
    }, 
    "java.util.Optional.filter(Predicate)": {
        "args": [
            "Predicate"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Character.reverseBytes(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.equals(long[], long[])": {
        "args": [
            "long[]", 
            "long[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.AccessibleObject.isAnnotationPresent(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetTime.of(int, int, int, int, ZoneOffset)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "ZoneOffset"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.image.MultiPixelPackedSampleModel.getPixelBitStride()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.getTypeMap()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Character.lowSurrogate(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.checkAccess()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.net.InetSocketAddress.getPort()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.add(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.getGreens(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Choice.processEvent(AWTEvent)": {
        "args": [
            "AWTEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Path.endsWith(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "InvalidPathException"
        ], 
        "throws": []
    }, 
    "java.lang.Object.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingDeque.addLast(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "IllegalStateException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.file.Watchable.register(WatchService, Kind[], Modifier[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "WatchService", 
            "Kind[]", 
            "Modifier[]"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IllegalArgumentException", 
            "ClosedWatchServiceException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.KeyboardFocusManager.removeKeyEventDispatcher(KeyEventDispatcher)": {
        "args": [
            "KeyEventDispatcher"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ResourceBundle.handleGetObject(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.text.MessageFormat.formatToCharacterIterator(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.math.BigDecimal.multiply(BigDecimal)": {
        "args": [
            "BigDecimal"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.PrinterJob.getPageFormat(PrintRequestAttributeSet)": {
        "args": [
            "PrintRequestAttributeSet"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.plusSeconds(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.afterExecute(Runnable, Throwable)": {
        "args": [
            "Runnable", 
            "Throwable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.applet.AppletContext.getImage(URL)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "URL"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getDatabaseMinorVersion()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.logging.LogRecord.getSourceClassName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.isAfter(YearMonth)": {
        "args": [
            "YearMonth"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.removeNodeChangeListener(NodeChangeListener)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "NodeChangeListener"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.sql.Statement.isCloseOnCompletion()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Cursor.getDefaultCursor()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.setPatternSeparator(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.LineNumberInputStream.available()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.LocalDateTime.from(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CyclicBarrier.isBroken()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.Function.andThen(Function)": {
        "args": [
            "Function"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.StrictMath.scalb(float, int)": {
        "args": [
            "float", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509Certificate.getNotBefore()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.getLowestSetBit()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.ChronoUnit.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Deflater.needsInput()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SplittableRandom.nextDouble(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.DefaultKeyboardFocusManager.dispatchKeyEvent(KeyEvent)": {
        "args": [
            "KeyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.DeflaterOutputStream.deflate()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicLong.incrementAndGet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.createStruct(String, Object[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Object[]"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.logging.Handler.setErrorManager(ErrorManager)": {
        "args": [
            "ErrorManager"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.sql.Statement.getMaxRows()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.invoke.MutableCallSite.setTarget(MethodHandle)": {
        "args": [
            "MethodHandle"
        ], 
        "@throws": [
            "NullPointerException", 
            "WrongMethodTypeException"
        ], 
        "throws": []
    }, 
    "java.sql.JDBCType.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.setLayout(LayoutManager)": {
        "args": [
            "LayoutManager"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.MessageFormat.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.setSubjectAlternativeNames(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.AbstractMap.containsKey(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.SQLData.getSQLTypeName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.acl.Permission.toString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.BitSet.clear(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.tryUnfork()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.codePointAt(char[], int)": {
        "args": [
            "char[]", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Checkbox.setCurrentAccessibleValue(Number)": {
        "args": [
            "Number"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.Charset.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.setCursor(Cursor)": {
        "args": [
            "Cursor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.preferredSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.getPathIterator(AffineTransform)": {
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.put(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "IndexOutOfBoundsException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.security.AlgorithmParameterGeneratorSpi.engineGenerateParameters()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.DelayQueue.add(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.zone.ZoneRules.isValidOffset(LocalDateTime, ZoneOffset)": {
        "args": [
            "LocalDateTime", 
            "ZoneOffset"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.PropertyResourceBundle.getKeys()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509Certificate.getIssuerDN()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.PopupMenu.show(Component, int, int)": {
        "args": [
            "Component", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "IllegalArgumentException", 
            "RuntimeException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.FileChannel.position(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "ClosedChannelException", 
            "IllegalArgumentException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.PageAttributes.setOrientationRequested(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getTablePrivileges(String, String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String", 
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Component.getComponentOrientation()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTarget.addNotify(ComponentPeer)": {
        "args": [
            "ComponentPeer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.beep()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.toURL()": {
        "args": [
            ""
        ], 
        "@throws": [
            "MalformedURLException"
        ], 
        "throws": [
            "MalformedURLException"
        ]
    }, 
    "java.lang.Float.hashCode(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Array.getInt(Object, int)": {
        "args": [
            "Object", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ]
    }, 
    "java.util.Map.getKey()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.lang.ProcessBuilder.redirectError(File)": {
        "args": [
            "File"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.WeekFields.weekOfWeekBasedYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.InputContext.selectInputMethod(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Byte.intValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.hashCode(char[])": {
        "args": [
            "char[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.processEvent(AWTEvent)": {
        "args": [
            "AWTEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyChangeEvent.getOldValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferDouble.getElem(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.toLocalTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.transferFocus()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Polygon.getBoundingBox()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.add(WindowFocusListener, WindowFocusListener)": {
        "args": [
            "WindowFocusListener", 
            "WindowFocusListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.offsetByCodePoints(CharSequence, int, int)": {
        "args": [
            "CharSequence", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.String.matches(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "PatternSyntaxException"
        ], 
        "throws": []
    }, 
    "java.awt.Choice.remove(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DropTarget.getDefaultActions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Choice.getItem(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.BitSet.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getInterfaces()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.ShapeGraphicAttribute.getOutline(AffineTransform)": {
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.remove()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.Spliterators.spliterator(long[], int)": {
        "args": [
            "long[]", 
            "int"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.MinguoChronology.getCalendarType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.IndexedPropertyDescriptor.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.RecursiveAction.getRawResult()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.RecursiveTask.compute()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.location()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.GlyphMetrics.getAdvanceY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.createBandedRaster(int, int, int, int, int[], int[], Point)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]", 
            "int[]", 
            "Point"
        ], 
        "@throws": [
            "RasterFormatException", 
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.rmi.server.ObjID.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.getTreeLock()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ParameterMetaData.isNullable(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Locale.getUnicodeLocaleAttributes()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FileDescriptor.valid()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ListPeer.getSelectedIndexes()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Package.getSpecificationVendor()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LongSummaryStatistics.getMin()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.spi.DateFormatProvider.getTimeInstance(int, Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Locale"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.DoubleBuffer.slice()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.InputMethodEvent.getText()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.System.getProperty(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.KeyStore.getProtectionParameter()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDateTime.with(TemporalAdjuster)": {
        "args": [
            "TemporalAdjuster"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.security.PermissionCollection.add(Permission)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Permission"
        ], 
        "@throws": [
            "SecurityException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.tailMap(K, boolean)": {
        "args": [
            "K", 
            "boolean"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.stream.LongStream.iterator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractMap.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.parseInt(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.sql.DatabaseMetaData.getTables(String, String, String, String[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String", 
            "String", 
            "String[]"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.file.attribute.UserDefinedFileAttributeView.write(String, ByteBuffer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "ByteBuffer"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.geom.Arc2D.setArc(Arc2D)": {
        "args": [
            "Arc2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormat.getTimeInstance(int, Locale)": {
        "args": [
            "int", 
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Shape.contains(Rectangle2D)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.CharBuffer.put(char)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "char"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.Callable.call()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "Exception"
        ], 
        "throws": [
            "Exception"
        ]
    }, 
    "java.net.ContentHandler.getContent(URLConnection, Class[])": {
        "args": [
            "URLConnection", 
            "Class[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Locale.setUnicodeLocaleKeyword(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "IllformedLocaleException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.intersects(Rectangle2D)": {
        "args": [
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Optional.orElseGet(Supplier)": {
        "args": [
            "Supplier"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.StringBuffer.offsetByCodePoints(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipEntry.setExtra(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.executeUpdate()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLTimeoutException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.Provider.getInfo()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.equals(float[], float[])": {
        "args": [
            "float[]", 
            "float[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.WindowEvent.getOldState()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLOutput.writeCharacterStream(Reader)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Reader"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.CompletableFuture.applyToEither(CompletionStage, Function)": {
        "args": [
            "CompletionStage", 
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Signature.sign()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SignatureException"
        ], 
        "throws": [
            "SignatureException"
        ]
    }, 
    "java.io.ObjectOutputStream.drain()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.DataBufferInt.getData()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.getBounds()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getAsciiStream(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.MessageDigest.getInstance(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "NoSuchProviderException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "NoSuchAlgorithmException", 
            "NoSuchProviderException"
        ]
    }, 
    "java.sql.SQLInput.readDate()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.logging.Logger.logp(Level, String, String, String, Object[])": {
        "args": [
            "Level", 
            "String", 
            "String", 
            "String", 
            "Object[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ClassLoader.registerAsParallelCapable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.setIconImage(Image)": {
        "args": [
            "Image"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getInt(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Checkbox.getAccessibleAction()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getProperty(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.jar.JarInputStream.createZipEntry(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Rectangle2D.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.StampedLock.tryReadLock()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.InetSocketAddress.createUnresolved(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.TreeSet.headSet(E, boolean)": {
        "args": [
            "E", 
            "boolean"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Rectangle.resize(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArraySet.addAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.CharBuffer.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.getTotalSpace()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.RoundRectangle2D.getWidth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Base64.wrap(InputStream)": {
        "args": [
            "InputStream"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Blob.setBytes(long, byte[], int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.math.BigInteger.multiply(BigInteger)": {
        "args": [
            "BigInteger"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferFloat.setElemFloat(int, int, float)": {
        "args": [
            "int", 
            "int", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.ActionEvent.getModifiers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.isTerminated()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.CollationElementIterator.setText(CharacterIterator)": {
        "args": [
            "CharacterIterator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.DeflaterInputStream.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.Future.isDone()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.putShort(int, short)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "short"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.lang.String.regionMatches(int, String, int, int)": {
        "args": [
            "int", 
            "String", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ThreadGroup.suspend()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.security.Provider.forEach(BiConsumer)": {
        "args": [
            "BiConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.handle(BiFunction)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.minusYears(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.removeTileObserver(TileObserver)": {
        "args": [
            "TileObserver"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.getToolkit()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CheckboxGroup.setSelectedCheckbox(Checkbox)": {
        "args": [
            "Checkbox"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.DoubleToLongFunction.applyAsLong(double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.CookieStore.removeAll()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadLocalRandom.nextDouble()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.useDelimiter(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.createPackedRaster(DataBuffer, int, int, int, int[], Point)": {
        "args": [
            "DataBuffer", 
            "int", 
            "int", 
            "int", 
            "int[]", 
            "Point"
        ], 
        "@throws": [
            "RasterFormatException", 
            "IllegalArgumentException", 
            "RasterFormatException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinWorkerThread.onStart()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GridLayout.removeLayoutComponent(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.LongToDoubleFunction.applyAsDouble(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.indexOfSubList(List, List)": {
        "args": [
            "List", 
            "List"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.getCursor()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.isDone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.applet.AppletStub.getParameter(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPane.getAccessibleContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.getOffset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ArrayBlockingQueue.remainingCapacity()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.spi.FileSystemProvider.installedProviders()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ServiceConfigurationError"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.Delayed.getDelay(TimeUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "TimeUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.getResourceAsStream(String, BeanContextChild)": {
        "args": [
            "String", 
            "BeanContextChild"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.Buffer.isDirect()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Field.getGenericType()": {
        "args": [
            ""
        ], 
        "@throws": [
            "GenericSignatureFormatError", 
            "TypeNotPresentException", 
            "MalformedParameterizedTypeException"
        ], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.add(KeyListener, KeyListener)": {
        "args": [
            "KeyListener", 
            "KeyListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Color.getColorSpace()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ListIterator.previousIndex()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.storesMixedCaseQuotedIdentifiers()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Arrays.equals(Object[], Object[])": {
        "args": [
            "Object[]", 
            "Object[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.compareUnsigned(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Queue.poll()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.writeFloat(float)": {
        "args": [
            "float"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Font.createGlyphVector(FontRenderContext, CharacterIterator)": {
        "args": [
            "FontRenderContext", 
            "CharacterIterator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsLimitedOuterJoins()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.RandomAccessFile.writeDouble(double)": {
        "args": [
            "double"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.StringBuffer.substring(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.logging.Handler.isLoggable(LogRecord)": {
        "args": [
            "LogRecord"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.getSystemClipboard()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.time.chrono.ChronoZonedDateTime.with(TemporalField, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "TemporalField", 
            "long"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.Color.getRGB()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.getFocusOwner()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.whenComplete(BiConsumer)": {
        "args": [
            "BiConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.TextAreaPeer.insert(String, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Formatter.flush()": {
        "args": [
            ""
        ], 
        "@throws": [
            "FormatterClosedException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.requestFocus()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Button.addActionListener(ActionListener)": {
        "args": [
            "ActionListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.atan(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AlgorithmParameters.init(byte[], String)": {
        "args": [
            "byte[]", 
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.cert.PKIXRevocationChecker.getOcspResponses()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.hashCode(double[])": {
        "args": [
            "double[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.BasicStroke.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RemoteCall.done()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Graphics.fillArc(int, int, int, int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.Matcher.find(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.net.InetAddress.getLocalHost()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnknownHostException"
        ], 
        "throws": [
            "UnknownHostException"
        ]
    }, 
    "java.util.concurrent.ThreadLocalRandom.nextGaussian()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.toArray(T[])": {
        "args": [
            "T[]"
        ], 
        "@throws": [
            "ArrayStoreException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.Array.free()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.ComponentColorModel.getDataElement(float[], int)": {
        "args": [
            "float[]", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.rmi.server.RMISocketFactory.createSocket(String, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.DatabaseMetaData.allTablesAreSelectable()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.JobAttributes.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetEvent.getDropTargetContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.GregorianCalendar.roll(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingQueue.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.add(short)": {
        "args": [
            "short"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.replaceAll(BiFunction)": {
        "args": [
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.isAfter(Year)": {
        "args": [
            "Year"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.thenCombineAsync(CompletionStage, BiFunction, Executor)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CompletionStage", 
            "BiFunction", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.IllegalFormatConversionException.getArgumentClass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.indexOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.MouseDragGestureRecognizer.mouseExited(MouseEvent)": {
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Scrollbar.setVisibleAmount(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.firstElement()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.postEvent(Event)": {
        "args": [
            "Event"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Period.minus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.sql.RowId.getBytes()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.plus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.DoubleSummaryStatistics.getAverage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.processItemEvent(ItemEvent)": {
        "args": [
            "ItemEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.SocketImpl.getLocalPort()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRL.getSigAlgParams()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.hasNext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongFieldUpdater.set(T, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.now()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.XMLEncoder.writeExpression(Expression)": {
        "args": [
            "Expression"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.sequential()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRL.verify(PublicKey, Provider)": {
        "args": [
            "PublicKey", 
            "Provider"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "InvalidKeyException", 
            "SignatureException", 
            "CRLException"
        ], 
        "throws": [
            "CRLException", 
            "NoSuchAlgorithmException", 
            "InvalidKeyException", 
            "SignatureException"
        ]
    }, 
    "java.awt.Component.setBounds(Rectangle)": {
        "args": [
            "Rectangle"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Desktop.mail(URI)": {
        "args": [
            "URI"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Rectangle.setBounds(Rectangle)": {
        "args": [
            "Rectangle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.removeSources()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterators.spliterator(Object[], int)": {
        "args": [
            "Object[]", 
            "int"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.sort(Comparator)": {
        "args": [
            "Comparator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.sort(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseDate.from(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.Graphics2D.getDeviceConfiguration()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.KeyEvent.setKeyCode(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.ServerSocket.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.CallableStatement.getNCharacterStream(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.InetSocketAddress.getHostString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.Certificate.getPublicKey()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.update(Graphics)": {
        "args": [
            "Graphics"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.atOffset(ZoneOffset)": {
        "args": [
            "ZoneOffset"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.TrayIcon.addMouseListener(MouseListener)": {
        "args": [
            "MouseListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsDevice.getFullScreenWindow()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextComponent.getInputMethodRequests()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXParameters.setPolicyQualifiersRejected(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.parse(CharSequence, DateTimeFormatter)": {
        "args": [
            "CharSequence", 
            "DateTimeFormatter"
        ], 
        "@throws": [
            "DateTimeParseException"
        ], 
        "throws": []
    }, 
    "java.lang.ProcessBuilder.redirectInput(Redirect)": {
        "args": [
            "Redirect"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.StampedLock.unlockWrite(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalMonitorStateException"
        ], 
        "throws": []
    }, 
    "java.io.OutputStream.write(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.channels.AsynchronousSocketChannel.read(ByteBuffer, long, TimeUnit, A, CompletionHandler)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer", 
            "long", 
            "TimeUnit", 
            "A", 
            "CompletionHandler"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ReadPendingException", 
            "NotYetConnectedException", 
            "ShutdownChannelGroupException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.dispose()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.LogManager.getLogManager()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.setVisible(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Hashtable.compute(K, BiFunction)": {
        "args": [
            "K", 
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.HttpCookie.setPath(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SortedSet.subSet(E, E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E", 
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.FlatteningPathIterator.getWindingRule()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SplittableRandom.nextInt(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingQueue.poll(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.time.chrono.ThaiBuddhistChronology.dateYearDay(Era, int, int)": {
        "args": [
            "Era", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.sql.CallableStatement.registerOutParameter(String, SQLType, String)": {
        "args": [
            "String", 
            "SQLType", 
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Locale.build()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.plusSeconds(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.net.MulticastSocket.getInterface()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.awt.event.KeyEvent.isActionKey()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.AnnotatedElement.isAnnotationPresent(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.StringBuilder.indexOf(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.until(Temporal, TemporalUnit)": {
        "args": [
            "Temporal", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.Thread.isAlive()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneRulesProvider.provideZoneIds()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ZoneRulesException"
        ], 
        "throws": []
    }, 
    "java.awt.Button.getAccessibleAction()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahChronology.dateNow(Clock)": {
        "args": [
            "Clock"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getParent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Statement.getArguments()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.VetoableChangeSupport.removeVetoableChangeListener(String, VetoableChangeListener)": {
        "args": [
            "String", 
            "VetoableChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.SignStyle.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.NumberFormat.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Area.createTransformedArea(AffineTransform)": {
        "args": [
            "AffineTransform"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.Executors.newCachedThreadPool()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyChangeSupport.firePropertyChange(String, boolean, boolean)": {
        "args": [
            "String", 
            "boolean", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTKeyStroke.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.transform(Point2D[], int, Point2D[], int, int)": {
        "args": [
            "Point2D[]", 
            "int", 
            "Point2D[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Robot.mouseRelease(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSetMetaData.isNullable(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.DatagramSocket.setSendBufferSize(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "SocketException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.time.format.DecimalStyle.withPositiveSign(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.getCaretInfo(TextHitInfo)": {
        "args": [
            "TextHitInfo"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.now()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.parallelSort(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.BorderLayout.getHgap()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Frame.remove(MenuComponent)": {
        "args": [
            "MenuComponent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.spliterator(double[], int, int)": {
        "args": [
            "double[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Button.getAccessibleRole()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.minusNanos(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.LinkedList.offerFirst(E)": {
        "args": [
            "E"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.color.ICC_Profile.getMajorVersion()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RGBImageFilter.filterRGB(int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.append(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.DoubleBuffer.get(double[])": {
        "args": [
            "double[]"
        ], 
        "@throws": [
            "BufferUnderflowException"
        ], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.withChronology(Chronology)": {
        "args": [
            "Chronology"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuItem.getAccessibleAction()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.isReparentSupported()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.getRequestProperty(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.lang.management.RuntimeMXBean.getInputArguments()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.lang.Process.isAlive()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Label.getAccessibleRole()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.getDoInput()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.acl.AclEntry.clone()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URL.getRef()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsGroupBy()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.regex.Matcher.regionStart()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.containsAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Method.isVarArgs()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.MatchResult.groupCount()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadMXBean.setThreadContentionMonitoringEnabled(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.rmi.server.RMIClassLoader.loadClass(String, String, ClassLoader)": {
        "args": [
            "String", 
            "String", 
            "ClassLoader"
        ], 
        "@throws": [
            "MalformedURLException", 
            "ClassNotFoundException"
        ], 
        "throws": [
            "MalformedURLException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.security.cert.X509CertSelector.getSubject()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ServiceLoader.reload()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractMap.setValue(V)": {
        "args": [
            "V"
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.text.ChoiceFormat.format(double, StringBuffer, FieldPosition)": {
        "args": [
            "double", 
            "StringBuffer", 
            "FieldPosition"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutput.close()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.text.DecimalFormatSymbols.getInfinity()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLType.getVendorTypeNumber()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertPathBuilderSpi.engineGetRevocationChecker()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.scale(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.MemoryMXBean.isVerbose()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuShortcut.equals(MenuShortcut)": {
        "args": [
            "MenuShortcut"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PolicyQualifierInfo.getEncoded()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Scrollbar.setLineIncrement(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.plus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.Window.getWindows()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ScheduledThreadPoolExecutor.scheduleAtFixedRate(Runnable, long, long, TimeUnit)": {
        "args": [
            "Runnable", 
            "long", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "RejectedExecutionException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.function.Consumer.andThen(Consumer)": {
        "args": [
            "Consumer"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.PolicySpi.engineGetPermissions(ProtectionDomain)": {
        "args": [
            "ProtectionDomain"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Visibility.dontUseGui()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PipedOutputStream.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.FlowLayout.setAlignOnBaseline(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLInput.readObject(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.CallableStatement.registerOutParameter(int, SQLType, int)": {
        "args": [
            "int", 
            "SQLType", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.channels.AsynchronousSocketChannel.write(ByteBuffer[], int, int, long, TimeUnit, A, CompletionHandler)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer[]", 
            "int", 
            "int", 
            "long", 
            "TimeUnit", 
            "A", 
            "CompletionHandler"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "WritePendingException", 
            "NotYetConnectedException", 
            "ShutdownChannelGroupException"
        ], 
        "throws": []
    }, 
    "java.awt.Checkbox.getAccessibleStateSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.of(int, Month, int)": {
        "args": [
            "int", 
            "Month", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.logging.Logger.getFilter()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicStampedReference.compareAndSet(V, V, int, int)": {
        "args": [
            "V", 
            "V", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.sort(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Double.parseDouble(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.awt.Graphics.copyArea(int, int, int, int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.spi.LocaleServiceProvider.getAvailableLocales()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.contains(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.System.runFinalization()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.contains(Rectangle2D)": {
        "args": [
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.IdentityHashMap.put(K, V)": {
        "args": [
            "K", 
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.serviceRevoked(BeanContextServiceRevokedEvent)": {
        "args": [
            "BeanContextServiceRevokedEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerArray.getAndAdd(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.NumericShaper.shape(char[], int, int, Range)": {
        "args": [
            "char[]", 
            "int", 
            "int", 
            "Range"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.net.URLClassLoader.getPermissions(CodeSource)": {
        "args": [
            "CodeSource"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.LongAccumulator.longValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.rejectedExecution(Runnable, ThreadPoolExecutor)": {
        "args": [
            "Runnable", 
            "ThreadPoolExecutor"
        ], 
        "@throws": [
            "RejectedExecutionException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.WindowPeer.updateWindow()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseChronology.range(ChronoField)": {
        "args": [
            "ChronoField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.ofNanos(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuShortcut.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.MenuPeer.addItem(MenuItem)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "MenuItem"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CharsetEncoder.averageBytesPerChar()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuItem.deleteShortcut()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setBinaryStream(int, InputStream, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "InputStream", 
            "long"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Base64.decode(byte[], byte[])": {
        "args": [
            "byte[]", 
            "byte[]"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.CharBuffer.put(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.awt.Graphics.drawImage(Image, int, int, int, int, int, int, int, int, ImageObserver)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Image", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "ImageObserver"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.PageFormat.getImageableWidth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CharsetDecoder.implReplaceWith(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Base64.getMimeDecoder()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.plusDays(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.deepHashCode(Object[])": {
        "args": [
            "Object[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.PlatformLoggingMXBean.getLoggerLevel(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.List.set(int, E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "E"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContext.addBeanContextMembershipListener(BeanContextMembershipListener)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BeanContextMembershipListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collectors.reducing(U, Function, BinaryOperator)": {
        "args": [
            "U", 
            "Function", 
            "BinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.toLocalDate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.MessageDigest.getDigestLength()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.BiPredicate.test(T, U)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "U"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseEvent.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ArrayBlockingQueue.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.spi.AbstractSelectableChannel.isRegistered()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getExclusiveQueuedThreads()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.firePropertyChange(String, short, short)": {
        "args": [
            "String", 
            "short", 
            "short"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.query(TemporalQuery)": {
        "args": [
            "TemporalQuery"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.font.MultipleMaster.getDesignAxisDefaults()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.HashMap.keySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.LongStream.limit(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.print.PageFormat.getOrientation()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.getSamples(int, int, int, int, int, float[])": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "float[]"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Checkbox.setLabel(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentNavigableMap.tailMap(K, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K", 
            "boolean"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Toolkit.loadSystemColors(int[])": {
        "args": [
            "int[]"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.nio.ByteBuffer.getFloat(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.font.NumericShaper.getContextualShaper(Set)": {
        "args": [
            "Set"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.text.CharacterIterator.clone()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseWheelEvent.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyEventDispatcher.dispatchKeyEvent(KeyEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "KeyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuShortcut.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Level.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Object.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneRules.getValidOffsets(LocalDateTime)": {
        "args": [
            "LocalDateTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.spi.FileSystemProvider.getPath(URI)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "URI"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "FileSystemNotFoundException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.text.AttributedCharacterIterator.getRunStart(Set)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Set"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Queue.offer(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.cert.PKIXCertPathValidatorResult.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.hide()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.getWidth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.getDataType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.toArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.DoublePredicate.negate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterator.tryAdvance(T_CONS)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T_CONS"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.moveToInsertRow()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.StringBuffer.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SplittableRandom.nextDouble(double)": {
        "args": [
            "double"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Objects.hashCode(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FilterInputStream.markSupported()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.removeInputMethodListener(InputMethodListener)": {
        "args": [
            "InputMethodListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Menu.remove(MenuComponent)": {
        "args": [
            "MenuComponent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Inet4Address.isMulticastAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Stream.collect(Collector)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Collector"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getIdentifierQuoteString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.spec.ECFieldF2m.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.isShowing()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Bidi.isMixed()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.MemoryUsage.getInit()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.parallelPrefix(long[], LongBinaryOperator)": {
        "args": [
            "long[]", 
            "LongBinaryOperator"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.Clock.getZone()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.AnnotatedElement.getAnnotations()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.synchronizedNavigableSet(NavigableSet)": {
        "args": [
            "NavigableSet"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Timestamp.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.of(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Scrollbar.addNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.ServerSocket.getReuseAddress()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.lang.reflect.Constructor.getAnnotatedReturnType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getAccessibleIndexInParent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.setCurve(float, float, float, float, float, float)": {
        "args": [
            "float", 
            "float", 
            "float", 
            "float", 
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.NumberFormat.parseObject(String, ParsePosition)": {
        "args": [
            "String", 
            "ParsePosition"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.HijrahChronology.localDateTime(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousFileChannel.open(Path, Set, ExecutorService, FileAttribute[])": {
        "args": [
            "Path", 
            "Set", 
            "ExecutorService", 
            "FileAttribute[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.GraphicsConfiguration.createCompatibleVolatileImage(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkConnect(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.getFlatnessSq()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantLock.lockInterruptibly()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.lang.Math.sinh(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneOffsetTransitionRule.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.setNetworkTimeout(Executor, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Executor", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SecurityException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.KeyboardFocusManager.addKeyEventPostProcessor(KeyEventPostProcessor)": {
        "args": [
            "KeyEventPostProcessor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.createLink(Path, Path)": {
        "args": [
            "Path", 
            "Path"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "FileAlreadyExistsException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.Phaser.forceTermination()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Semaphore.isFair()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.applyPattern(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.layout()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Path.endsWith(Path)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Path"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.addAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.List.iterator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.NavigableMap.ceilingEntry(K)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.ArrayDeque.removeLastOccurrence(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.RectangularShape.setFrame(Point2D, Dimension2D)": {
        "args": [
            "Point2D", 
            "Dimension2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.getKey(String, char[])": {
        "args": [
            "String", 
            "char[]"
        ], 
        "@throws": [
            "KeyStoreException", 
            "NoSuchAlgorithmException", 
            "UnrecoverableKeyException"
        ], 
        "throws": [
            "KeyStoreException", 
            "NoSuchAlgorithmException", 
            "UnrecoverableKeyException"
        ]
    }, 
    "java.lang.reflect.AccessibleObject.getAnnotationsByType(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Scanner.nextShort(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "InputMismatchException", 
            "NoSuchElementException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.lang.Byte.toUnsignedLong(byte)": {
        "args": [
            "byte"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.iterate(double, DoubleUnaryOperator)": {
        "args": [
            "double", 
            "DoubleUnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArraySet.forEach(Consumer)": {
        "args": [
            "Consumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.Channels.newWriter(WritableByteChannel, String)": {
        "args": [
            "WritableByteChannel", 
            "String"
        ], 
        "@throws": [
            "UnsupportedCharsetException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.setLine(Line2D)": {
        "args": [
            "Line2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collectors.groupingByConcurrent(Function)": {
        "args": [
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseChronology.eras()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collectors.summingLong(ToLongFunction)": {
        "args": [
            "ToLongFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPane.getVAdjustable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MediaTracker.waitForAll(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.Deque.descendingIterator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.spi.FileSystemProvider.newOutputStream(Path, OpenOption[])": {
        "args": [
            "Path", 
            "OpenOption[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.getWaitQueueLength(Condition)": {
        "args": [
            "Condition"
        ], 
        "@throws": [
            "IllegalMonitorStateException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Map.replace(K, V, V)": {
        "args": [
            "K", 
            "V", 
            "V"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.asLongBuffer()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadInfo.getThreadName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.MembershipKey.channel()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.PriorityBlockingQueue.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertPath.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.registerOutParameter(int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.chrono.ChronoLocalDateTime.query(TemporalQuery)": {
        "args": [
            "TemporalQuery"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.Scanner.hasNext(Pattern)": {
        "args": [
            "Pattern"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.getBeanContextPeer()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.DosFileAttributeView.setSystem(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.PreparedStatement.setTimestamp(int, Timestamp, Calendar)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Timestamp", 
            "Calendar"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.beans.Encoder.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Bidi.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getHeight(ImageObserver)": {
        "args": [
            "ImageObserver"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.invokeAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.cert.CertPath.readResolve()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ObjectStreamException"
        ], 
        "throws": [
            "ObjectStreamException"
        ]
    }, 
    "java.awt.FocusTraversalPolicy.getDefaultComponent(Container)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Container"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.charset.Charset.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataOutput.writeInt(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.chrono.ChronoPeriod.isNegative()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateCharacterStream(int, Reader, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Reader", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.ClientInfoStatus.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.max(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "ClassCastException", 
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.RectangularShape.setFrameFromCenter(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Constructor.getDeclaringClass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.getCtrlP2()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.of(LocalDateTime, ZoneOffset)": {
        "args": [
            "LocalDateTime", 
            "ZoneOffset"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.SystemFlavorMap.addFlavorForUnencodedNative(String, DataFlavor)": {
        "args": [
            "String", 
            "DataFlavor"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.Month.maxLength()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.TypeVariable.getBounds()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "TypeNotPresentException", 
            "MalformedParameterizedTypeException"
        ], 
        "throws": []
    }, 
    "java.sql.Statement.getMoreResults()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.BufferedImage.getColorModel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.DirectoryIteratorException.getCause()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutput.write(byte[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.management.ThreadInfo.from(CompositeData)": {
        "args": [
            "CompositeData"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.Duration.getSeconds()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousSocketChannel.open(AsynchronousChannelGroup)": {
        "args": [
            "AsynchronousChannelGroup"
        ], 
        "@throws": [
            "ShutdownChannelGroupException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.SplittableRandom.nextInt()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.withZone(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StringReader.skip(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.RasterOp.createCompatibleDestRaster(Raster)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Raster"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Signature.getParameters()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getNCharacterStream(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.PathIterator.isDone()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.print(Graphics)": {
        "args": [
            "Graphics"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.NumberFormat.getRoundingMode()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquireSharedNanos(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.offerFirst(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.ZoneOffset.getRules()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.MessageFormat.format(Object[], StringBuffer, FieldPosition)": {
        "args": [
            "Object[]", 
            "StringBuffer", 
            "FieldPosition"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Iterator.hasNext()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.stream(int[])": {
        "args": [
            "int[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.now(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.thenApplyAsync(Function, Executor)": {
        "args": [
            "Function", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.rowDeleted()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Checkbox.processItemEvent(ItemEvent)": {
        "args": [
            "ItemEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.sort(Object[], int, int)": {
        "args": [
            "Object[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.awt.event.ContainerAdapter.componentRemoved(ContainerEvent)": {
        "args": [
            "ContainerEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.HashMap.forEach(BiConsumer)": {
        "args": [
            "BiConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.insert(int, Object)": {
        "args": [
            "int", 
            "Object"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getClob(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.Period.from(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.im.InputMethodRequests.getCommittedTextLength()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferShort.getElem(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Event.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.of(LocalDate, LocalTime, ZoneId)": {
        "args": [
            "LocalDate", 
            "LocalTime", 
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.negateExact(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.SeekableByteChannel.read(ByteBuffer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.file.attribute.DosFileAttributes.isSystem()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.getMonth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.createVolatileImage(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.GregorianCalendar.getMaximum(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingQueue.offer(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.sql.Connection.createStatement(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.CharBuffer.get(char[])": {
        "args": [
            "char[]"
        ], 
        "@throws": [
            "BufferUnderflowException"
        ], 
        "throws": []
    }, 
    "java.awt.print.Pageable.getNumberOfPages()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setAsciiStream(String, InputStream, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "InputStream", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.KeyFactorySpi.engineGeneratePublic(KeySpec)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "KeySpec"
        ], 
        "@throws": [
            "InvalidKeySpecException"
        ], 
        "throws": [
            "InvalidKeySpecException"
        ]
    }, 
    "java.awt.font.MultipleMaster.deriveMMFont(float[], float, float, float, float)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "float[]", 
            "float", 
            "float", 
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextComponent.selectAll()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.VolatileImage.createGraphics()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.getDefaultFocusTraversalPolicy()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerArray.lazySet(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.signum(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.getExponent(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.putInt(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.time.ZoneOffset.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.PriorityBlockingQueue.comparator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.now()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.Buffer.limit(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.Float.floatToIntBits(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintStream.print(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.RSAPrivateCrtKeySpec.getPrimeExponentQ()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.push(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.MenuComponent.clearAccessibleSelection()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.max(float, float)": {
        "args": [
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsEnvironment.getDefaultScreenDevice()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.security.cert.X509CertSelector.setExtendedKeyUsage(Set)": {
        "args": [
            "Set"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.ResultSet.updateNClob(String, NClob)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "NClob"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.ComponentSampleModel.getOffset(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.with(TemporalAdjuster)": {
        "args": [
            "TemporalAdjuster"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.YearMonth.getMonth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintStream.write(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GridBagLayout.ArrangeGrid(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.list(PrintWriter, int)": {
        "args": [
            "PrintWriter", 
            "int"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.withDayOfMonth(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.writeLong(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.stream.DoubleStream.of(double[])": {
        "args": [
            "double[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TransformAttribute.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.setPoolable(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.ByteArrayOutputStream.toByteArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SelectionKey.readyOps()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "CancelledKeyException"
        ], 
        "throws": []
    }, 
    "java.time.Duration.ofHours(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.pollFirst()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(Class, Class, String)": {
        "args": [
            "Class", 
            "Class", 
            "String"
        ], 
        "@throws": [
            "ClassCastException", 
            "IllegalArgumentException", 
            "RuntimeException"
        ], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setBinaryStream(int, InputStream, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "InputStream", 
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.AWTKeyStroke.getAWTKeyStroke(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.withNano(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.compareTo(ChronoZonedDateTime)": {
        "args": [
            "ChronoZonedDateTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.guessContentTypeFromName(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.WeakHashMap.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.windowStateChanged(WindowEvent)": {
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.mkdir()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.math.BigInteger.byteValueExact()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.setDefaultFocusTraversalPolicy(FocusTraversalPolicy)": {
        "args": [
            "FocusTraversalPolicy"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.text.MessageFormat.parseObject(String, ParsePosition)": {
        "args": [
            "String", 
            "ParsePosition"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.cert.PKIXParameters.setAnyPolicyInhibited(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.runAfterEither(CompletionStage, Runnable)": {
        "args": [
            "CompletionStage", 
            "Runnable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeParseException.getErrorIndex()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.LongAccumulator.reset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.sort(float[])": {
        "args": [
            "float[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getVisibleIndex()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistChronology.dateNow()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.WindowFocusListener.windowGainedFocus(WindowEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.FloatBuffer.get(float[], int, int)": {
        "args": [
            "float[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "BufferUnderflowException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.logging.Logger.logp(Level, String, String, String, Object)": {
        "args": [
            "Level", 
            "String", 
            "String", 
            "String", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.WindowPeer.updateFocusableWindowState()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.LogManager.addLogger(Logger)": {
        "args": [
            "Logger"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Calendar.isSet(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.fireServiceAdded(BeanContextServiceAvailableEvent)": {
        "args": [
            "BeanContextServiceAvailableEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongFieldUpdater.get(T)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.enableEvents(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.FloatBuffer.put(float[])": {
        "args": [
            "float[]"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkAwtEventQueueAccess()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.logging.Handler.getErrorManager()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.text.CollationElementIterator.secondaryOrder(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CountDownLatch.await(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.nio.file.Files.readAllLines(Path)": {
        "args": [
            "Path"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Arrays.equals(double[], double[])": {
        "args": [
            "double[]", 
            "double[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.CharArrayWriter.toCharArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ClassLoader.setPackageAssertionStatus(String, boolean)": {
        "args": [
            "String", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.acl.AclEntry.permissions()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PipedInputStream.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.ColorModel.getDataElement(int[], int)": {
        "args": [
            "int[]", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setShort(String, short)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "short"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.color.ColorSpace.isCS_sRGB()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTKeyStroke.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentColorModel.getBlue(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CountedCompleter.compareAndSetPendingCount(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.RSAPrivateKeySpec.getModulus()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLStreamHandlerFactory.createURLStreamHandler(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintWriter.println(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Deque.offerFirst(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.TreeMap.comparator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getFetchSize()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.font.TextLayout.getBlackBoxBounds(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextArea.getMinimumSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.BreakIterator.current()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.getRGB(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.insert(int, double)": {
        "args": [
            "int", 
            "double"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDate.getYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLXML.getCharacterStream()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.format.DateTimeFormatter.ofLocalizedDate(FormatStyle)": {
        "args": [
            "FormatStyle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.StrictMath.toIntExact(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.DesktopPeer.mail(URI)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "URI"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.EnumSet.of(E, E, E, E)": {
        "args": [
            "E", 
            "E", 
            "E", 
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Constructor.getParameterTypes()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.AttributedCharacterIterator.getRunLimit(Set)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Set"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Robot.getPixelColor(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Properties.getProperty(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRLSelector.setMinCRLNumber(BigInteger)": {
        "args": [
            "BigInteger"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.MonthDay.format(DateTimeFormatter)": {
        "args": [
            "DateTimeFormatter"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.io.BufferedInputStream.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.PackedColorModel.isCompatibleSampleModel(SampleModel)": {
        "args": [
            "SampleModel"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.time.chrono.HijrahDate.of(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.nio.IntBuffer.put(int[], int, int)": {
        "args": [
            "int[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "IndexOutOfBoundsException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.Selector.provider()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.FlatteningPathIterator.isDone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics2D.drawRenderedImage(RenderedImage, AffineTransform)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "RenderedImage", 
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.LambdaMetafactory.altMetafactory(Lookup, String, MethodType, Object[])": {
        "args": [
            "Lookup", 
            "String", 
            "MethodType", 
            "Object[]"
        ], 
        "@throws": [
            "LambdaConversionException"
        ], 
        "throws": [
            "LambdaConversionException"
        ]
    }, 
    "java.awt.KeyboardFocusManager.getGlobalFocusOwner()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.awt.geom.CubicCurve2D.getFlatness()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FilterWriter.write(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.ResultSetMetaData.isCurrency(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.CountedCompleter.addToPendingCount(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getTime(String, Calendar)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Calendar"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.Semaphore.release()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.thenAcceptAsync(Consumer, Executor)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Consumer", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.toString(long[])": {
        "args": [
            "long[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.LogManager.removePropertyChangeListener(PropertyChangeListener)": {
        "args": [
            "PropertyChangeListener"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.util.concurrent.ForkJoinTask.isCancelled()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.plusMinutes(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.io.BufferedOutputStream.write(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.PriorityBlockingQueue.peek()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.BinaryOperator.minBy(Comparator)": {
        "args": [
            "Comparator"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.logging.Logger.info(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayList.toArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.binarySearch(char[], int, int, char)": {
        "args": [
            "char[]", 
            "int", 
            "int", 
            "char"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Shape.contains(double, double, double, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.KeyAdapter.keyPressed(KeyEvent)": {
        "args": [
            "KeyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeSet.addAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getMinTileX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationGroup.getSystem()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ActivationException", 
            "UnsupportedOperationException"
        ], 
        "throws": [
            "ActivationException"
        ]
    }, 
    "java.math.BigInteger.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Properties.save(OutputStream, String)": {
        "args": [
            "OutputStream", 
            "String"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionService.submit(Callable)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Callable"
        ], 
        "@throws": [
            "RejectedExecutionException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Window.isFocusableWindow()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.getSpi(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoPeriod.between(ChronoLocalDate, ChronoLocalDate)": {
        "args": [
            "ChronoLocalDate", 
            "ChronoLocalDate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeMap.putAll(Map)": {
        "args": [
            "Map"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.List.equals(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.getFont()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PushbackReader.unread(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.beans.beancontext.BeanContextServices.getCurrentServiceSelectors(Class)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.submit(Callable)": {
        "args": [
            "Callable"
        ], 
        "@throws": [
            "NullPointerException", 
            "RejectedExecutionException"
        ], 
        "throws": []
    }, 
    "java.awt.font.MultipleMaster.getDesignAxisRanges()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.IntUnaryOperator.identity()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsSubqueriesInExists()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.logging.Level.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StackTraceElement.getMethodName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.contains(PathIterator, Point2D)": {
        "args": [
            "PathIterator", 
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.equals(char[], char[])": {
        "args": [
            "char[]", 
            "char[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.X509EncodedKeySpec.getEncoded()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.WindowAdapter.windowStateChanged(WindowEvent)": {
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.withSecond(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.ResourceBundle.getBundle(String, Locale, ClassLoader)": {
        "args": [
            "String", 
            "Locale", 
            "ClassLoader"
        ], 
        "@throws": [
            "NullPointerException", 
            "MissingResourceException"
        ], 
        "throws": []
    }, 
    "java.net.URLConnection.getDate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.rotate(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkPackageAccess(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.thenAcceptBothAsync(CompletionStage, BiConsumer, Executor)": {
        "args": [
            "CompletionStage", 
            "BiConsumer", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Rectangle.getSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataInput.readBoolean()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.acl.Acl.entries()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.thenApplyAsync(Function, Executor)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Function", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.mouseWheelMoved(MouseWheelEvent)": {
        "args": [
            "MouseWheelEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.LongStream.accept(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.GraphicsEnvironment.getScreenDevices()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.awt.image.AffineTransformOp.filter(BufferedImage, BufferedImage)": {
        "args": [
            "BufferedImage", 
            "BufferedImage"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ImagingOpException"
        ], 
        "throws": []
    }, 
    "java.security.SecureClassLoader.defineClass(String, byte[], int, int, CodeSource)": {
        "args": [
            "String", 
            "byte[]", 
            "int", 
            "int", 
            "CodeSource"
        ], 
        "@throws": [
            "ClassFormatError", 
            "IndexOutOfBoundsException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.Hashtable.replace(K, V)": {
        "args": [
            "K", 
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateByte(int, byte)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "byte"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.TransferQueue.tryTransfer(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.SplittableRandom.ints(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.text.NumberFormat.parse(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "ParseException"
        ], 
        "throws": [
            "ParseException"
        ]
    }, 
    "java.security.MessageDigest.update(byte)": {
        "args": [
            "byte"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.bind(Object, String, MethodType)": {
        "args": [
            "Object", 
            "String", 
            "MethodType"
        ], 
        "@throws": [
            "NoSuchMethodException", 
            "IllegalAccessException", 
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": [
            "NoSuchMethodException", 
            "IllegalAccessException"
        ]
    }, 
    "java.nio.channels.SelectableChannel.configureBlocking(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [
            "ClosedChannelException", 
            "IllegalBlockingModeException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.temporal.TemporalUnit.addTo(R, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "R", 
            "long"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.add(HierarchyBoundsListener, HierarchyBoundsListener)": {
        "args": [
            "HierarchyBoundsListener", 
            "HierarchyBoundsListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.InetAddress.getByAddress(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "UnknownHostException"
        ], 
        "throws": [
            "UnknownHostException"
        ]
    }, 
    "java.io.ObjectInput.available()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.zip.InflaterInputStream.available()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.RenderingHints.entrySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.annotation.Annotation.annotationType()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.asList(T[])": {
        "args": [
            "T[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.sin(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.registerOutParameter(int, int, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.chrono.ThaiBuddhistChronology.date(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AlgorithmParametersSpi.engineGetEncoded(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.rmi.registry.RegistryHandler.registryStub(String, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "RemoteException", 
            "UnknownHostException"
        ], 
        "throws": [
            "RemoteException", 
            "UnknownHostException"
        ]
    }, 
    "java.nio.channels.spi.SelectorProvider.openSocketChannel()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.DirectColorModel.getGreenMask()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ShortLookupTable.lookupPixel(int[], int[])": {
        "args": [
            "int[]", 
            "int[]"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setNCharacterStream(String, Reader, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Reader", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.file.InvalidPathException.getInput()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormat.setLenient(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.MulticastSocket.getLoopbackMode()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.weakCompareAndSet(T, V, V)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "V", 
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isJavaIdentifierStart(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DirectColorModel.getBlueMask()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.registry.LocateRegistry.createRegistry(int, RMIClientSocketFactory, RMIServerSocketFactory)": {
        "args": [
            "int", 
            "RMIClientSocketFactory", 
            "RMIServerSocketFactory"
        ], 
        "@throws": [
            "RemoteException"
        ], 
        "throws": [
            "RemoteException"
        ]
    }, 
    "java.security.spec.EllipticCurve.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.hasService(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.Lock.newCondition()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDateTime.truncatedTo(TemporalUnit)": {
        "args": [
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.util.AbstractMap.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "CloneNotSupportedException"
        ]
    }, 
    "java.awt.ContainerOrderFocusTraversalPolicy.getComponentAfter(Container, Component)": {
        "args": [
            "Container", 
            "Component"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.getAccessibleChild(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.range(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.io.DataInput.readChar()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Comparator.compare(T, T)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "T"
        ], 
        "@throws": [
            "NullPointerException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.util.Timer.schedule(TimerTask, long)": {
        "args": [
            "TimerTask", 
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.BufferCapabilities.getFlipContents()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.acl.Group.isMember(Principal)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Principal"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahChronology.dateYearDay(Era, int, int)": {
        "args": [
            "Era", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.time.YearMonth.isBefore(YearMonth)": {
        "args": [
            "YearMonth"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.size()": {
        "args": [
            ""
        ], 
        "@throws": [
            "KeyStoreException"
        ], 
        "throws": [
            "KeyStoreException"
        ]
    }, 
    "java.nio.LongBuffer.slice()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.thenRunAsync(Runnable)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Runnable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Frame.isUndecorated()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getString(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.Line2D.relativeCCW(double, double, double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.DeflaterOutputStream.flush()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Class.isPrimitive()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkTopLevelWindow(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.getBlue(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.NavigableSet.iterator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayList.removeIf(Predicate)": {
        "args": [
            "Predicate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Certificate.getFormat()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.NavigableSet.floor(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.getSubjectPublicKey()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.listIterator(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.nio.charset.CharsetEncoder.onUnmappableCharacter(CodingErrorAction)": {
        "args": [
            "CodingErrorAction"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.Integer.numberOfLeadingZeros(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.AbstractChronology.compareTo(Chronology)": {
        "args": [
            "Chronology"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetDropEvent.getDropAction()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImageOp.filter(BufferedImage, BufferedImage)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BufferedImage", 
            "BufferedImage"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.getBounds2D()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.GraphicAttribute.getAdvance()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.offerFirst(E, long, TimeUnit)": {
        "args": [
            "E", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "NullPointerException", 
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.time.ZoneOffset.from(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.text.NumberFormat.getMaximumIntegerDigits()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.spi.CurrencyNameProvider.getDisplayName(String, Locale)": {
        "args": [
            "String", 
            "Locale"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.containsValue(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.File.getParent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.append(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.JobAttributes.setDefaultSelection(DefaultSelectionType)": {
        "args": [
            "DefaultSelectionType"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Inflater.needsInput()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.plus()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.setFetchSize(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.temporal.TemporalUnit.toString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.subtractExact(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.TimeUnit.toDays(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.RuntimeMXBean.getSpecVendor()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.time.zone.ZoneOffsetTransitionRule.createDateTime(LocalDateTime, ZoneOffset, ZoneOffset)": {
        "args": [
            "LocalDateTime", 
            "ZoneOffset", 
            "ZoneOffset"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.lengthOfYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.getFirst()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.DoubleAccumulator.get()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.createFileDialog(FileDialog)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "FileDialog"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.time.Duration.plus(Duration)": {
        "args": [
            "Duration"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadLocalRandom.nextInt(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.GraphicsEnvironment.getCenterPoint()": {
        "args": [
            ""
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.awt.image.WritableRenderedImage.getWritableTileIndices()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SortedMap.keySet()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetContext.rejectDrop()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.removePropertyChangeListener(String, PropertyChangeListener)": {
        "args": [
            "String", 
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RemoteServer.getClientHost()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ServerNotActiveException"
        ], 
        "throws": [
            "ServerNotActiveException"
        ]
    }, 
    "java.util.Queue.element()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.awt.print.PrinterGraphics.getPrinterJob()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.lineTo(float, float)": {
        "args": [
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.EventQueue.peekEvent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.processComponentEvent(ComponentEvent)": {
        "args": [
            "ComponentEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Robot.setAutoDelay(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.execute(Runnable)": {
        "args": [
            "Runnable"
        ], 
        "@throws": [
            "RejectedExecutionException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImage.getHeight()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.parseUnsignedLong(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.time.Clock.fixed(Instant, ZoneId)": {
        "args": [
            "Instant", 
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.Writer.write(char[])": {
        "args": [
            "char[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.text.DecimalFormatSymbols.getPatternSeparator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Period.between(LocalDate, LocalDate)": {
        "args": [
            "LocalDate", 
            "LocalDate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.isHeldExclusively()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.requestFocusInWindow()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneRulesProvider.registerProvider(ZoneRulesProvider)": {
        "args": [
            "ZoneRulesProvider"
        ], 
        "@throws": [
            "ZoneRulesException"
        ], 
        "throws": []
    }, 
    "java.lang.management.MemoryPoolMXBean.setCollectionUsageThreshold(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.getSubjectPublicKeyAlgID()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Inflater.getAdler()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLInput.readCharacterStream()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Class.getTypeName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.ParsePosition.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.isAnnotationPresent(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.methodType(Class, Class, Class[])": {
        "args": [
            "Class", 
            "Class", 
            "Class[]"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.SynchronousQueue.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Period.parse(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [
            "DateTimeParseException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.FutureTask.cancel(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Arc2D.setAngleExtent(double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.Chronology.dateEpochDay(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.Scanner.close()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ShortBuffer.get(short[])": {
        "args": [
            "short[]"
        ], 
        "@throws": [
            "BufferUnderflowException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.getLong(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.Year.isSupported(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.isParseBigDecimal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Provider.keySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URI.getRawAuthority()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSource.getListeners(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.awt.FileDialog.addNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.spi.NumberFormatProvider.getIntegerInstance(Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.BasicStroke.createStrokedShape(Shape)": {
        "args": [
            "Shape"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.List.hashCode()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetTime.withSecond(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.toArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintStream.print(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.setAllowUserInteraction(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetTime.isBefore(OffsetTime)": {
        "args": [
            "OffsetTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.concat(IntStream, IntStream)": {
        "args": [
            "IntStream", 
            "IntStream"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.FeatureDescriptor.attributeNames()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertPathValidatorSpi.engineGetRevocationChecker()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.Font.canDisplay(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Checkbox.getAccessibleContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.setFont(Font)": {
        "args": [
            "Font"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.minusSeconds(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.getSampleFloat(int, int, int, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongArray.getAndUpdate(int, LongUnaryOperator)": {
        "args": [
            "int", 
            "LongUnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.RoundRectangle2D.setRoundRect(float, float, float, float, float, float)": {
        "args": [
            "float", 
            "float", 
            "float", 
            "float", 
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistDate.with(TemporalField, long)": {
        "args": [
            "TemporalField", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.KeyboardFocusManagerPeer.setCurrentFocusedWindow(Window)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Window"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.min(BigInteger)": {
        "args": [
            "BigInteger"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.ItemListener.itemStateChanged(ItemEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ItemEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Stream.allMatch(Predicate)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Predicate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509Certificate.getSubjectDN()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.getChildSerializable(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLClassLoader.definePackage(String, Manifest, URL)": {
        "args": [
            "String", 
            "Manifest", 
            "URL"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": [
            "IllegalArgumentException"
        ]
    }, 
    "java.awt.font.TextLayout.getNextLeftHit(int, CaretPolicy)": {
        "args": [
            "int", 
            "CaretPolicy"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.addAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerArray.get(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.getByteParameter(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Toolkit.sync()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.setReadable(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.Font.getAvailableAttributes()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.lowerKey(K)": {
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Window.isLocationByPlatform()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.getFetchSize()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.Raster.getMinY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Rectangle.getWidth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ContainerPeer.endValidate()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FlowLayout.getHgap()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.InputStream.markSupported()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.getStrongCaret(TextHitInfo, TextHitInfo, TextLayout)": {
        "args": [
            "TextHitInfo", 
            "TextHitInfo", 
            "TextLayout"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZoneId.of(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "DateTimeException", 
            "ZoneRulesException"
        ], 
        "throws": []
    }, 
    "java.security.DigestInputStream.getMessageDigest()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ArrayBlockingQueue.drainTo(Collection, int)": {
        "args": [
            "Collection", 
            "int"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousChannelGroup.shutdown()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.InputMethodEvent.getWhen()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.emptyNavigableMap()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Executors.unconfigurableScheduledExecutorService(ScheduledExecutorService)": {
        "args": [
            "ScheduledExecutorService"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.charset.CharsetDecoder.implOnMalformedInput(CodingErrorAction)": {
        "args": [
            "CodingErrorAction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeSet.spliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.find(Path, int, BiPredicate, FileVisitOption[])": {
        "args": [
            "Path", 
            "int", 
            "BiPredicate", 
            "FileVisitOption[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "SecurityException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicIntegerArray.length()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.registry.Registry.bind(String, Remote)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Remote"
        ], 
        "@throws": [
            "AlreadyBoundException", 
            "RemoteException", 
            "AccessException", 
            "NullPointerException"
        ], 
        "throws": [
            "RemoteException", 
            "AlreadyBoundException", 
            "AccessException"
        ]
    }, 
    "java.util.AbstractMap.get(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.Phaser.awaitAdvanceInterruptibly(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.concurrent.LinkedBlockingDeque.offerFirst(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.DataInputStream.readInt()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Component.locate(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedQueue.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.Charset.decode(ByteBuffer)": {
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoDate.now(Clock)": {
        "args": [
            "Clock"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.Semaphore.reducePermits(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Toolkit.getScreenResolution()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.sql.PreparedStatement.setBytes(int, byte[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "byte[]"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.LookupOp.createCompatibleDestRaster(Raster)": {
        "args": [
            "Raster"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CRLSelector.clone()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoDate.getChronology()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Month.getValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.GlyphVector.getOutline()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImageOp.createDefaultRendering()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.NumericShaper.shape(char[], int, int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Deque.getLast()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceContext.updateCurrentCursor(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CoderResult.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ContextualRenderedImageFactory.isDynamic()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Rectangle.getY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.awaitUninterruptibly()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.RuleBasedCollator.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.codePointBefore(char[], int)": {
        "args": [
            "char[]", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.time.LocalTime.isSupported(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.WatchEvent.count()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics2D.translate(double, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509Certificate.getKeyUsage()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Expression.getValue()": {
        "args": [
            ""
        ], 
        "@throws": [
            "Exception"
        ], 
        "throws": [
            "Exception"
        ]
    }, 
    "java.sql.SQLInput.readBinaryStream()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Font.getStringBounds(String, int, int, FontRenderContext)": {
        "args": [
            "String", 
            "int", 
            "int", 
            "FontRenderContext"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getFirstQueuedThread()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CountedCompleter.compute()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setUnicodeStream(int, InputStream, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "InputStream", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.text.DecimalFormat.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.BufferPoolMXBean.getCount()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.getBestCursorSize(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Rectangle2D.intersectsLine(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseMotionListener.mouseMoved(MouseEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.TimeUnit.toMinutes(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.SocketPermission.getActions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BandedSampleModel.createDataBuffer()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.function.LongToIntFunction.applyAsInt(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.NavigableSet.tailSet(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.SynchronousQueue.containsAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.InputStreamReader.ready()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.DatagramSocketImpl.peek(InetAddress)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "InetAddress"
        ], 
        "@throws": [
            "IOException", 
            "PortUnreachableException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicIntegerArray.getAndDecrement(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.LongConsumer.accept(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.info(Supplier)": {
        "args": [
            "Supplier"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.sort(double[], int, int)": {
        "args": [
            "double[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.CheckboxMenuItem.getCurrentAccessibleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Scrollbar.setUnitIncrement(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.UndeclaredThrowableException.getCause()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.readAttributes(Path, String, LinkOption[])": {
        "args": [
            "Path", 
            "String", 
            "LinkOption[]"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IllegalArgumentException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Canvas.addNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.getNumGlyphs()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.MulticastSocket.getTTL()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.DatabaseMetaData.getURL()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.DataInputStream.readBoolean()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.reflect.Executable.getTypeParameters()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "GenericSignatureFormatError"
        ], 
        "throws": []
    }, 
    "java.io.DataInputStream.read(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Window.setAlwaysOnTop(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.util.spi.LocaleNameProvider.getDisplayScript(String, Locale)": {
        "args": [
            "String", 
            "Locale"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.Signature.getInstance(String, Provider)": {
        "args": [
            "String", 
            "Provider"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "NoSuchAlgorithmException"
        ]
    }, 
    "java.util.concurrent.CompletableFuture.whenCompleteAsync(BiConsumer)": {
        "args": [
            "BiConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.until(Temporal, TemporalUnit)": {
        "args": [
            "Temporal", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.Executors.newScheduledThreadPool(int, ThreadFactory)": {
        "args": [
            "int", 
            "ThreadFactory"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantLock.tryLock()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.FileLock.close()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Base64.encodeToString(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Short.floatValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ListPeer.setMultipleMode(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TrayIcon.addActionListener(ActionListener)": {
        "args": [
            "ActionListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.Condition.awaitNanos(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean, boolean)": {
        "args": [
            "boolean", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipEntry.setLastAccessTime(FileTime)": {
        "args": [
            "FileTime"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.getChildBeanContextChild(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.net.InetSocketAddress.isUnresolved()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TexturePaint.getImage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Security.getAlgorithms(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.FlavorMap.getFlavorsForNatives(String[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.ToLongBiFunction.applyAsLong(T, U)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "U"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.MouseDragGestureRecognizer.mousePressed(MouseEvent)": {
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipFile.finalize()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.List.minimumSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.parse(CharSequence, DateTimeFormatter)": {
        "args": [
            "CharSequence", 
            "DateTimeFormatter"
        ], 
        "@throws": [
            "DateTimeParseException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.SelectionKey.cancel()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.log(Level, Throwable, Supplier)": {
        "args": [
            "Level", 
            "Throwable", 
            "Supplier"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.getPathIterator(AffineTransform, double)": {
        "args": [
            "AffineTransform", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ByteArrayOutputStream.reset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyEventPostProcessor.postProcessKeyEvent(KeyEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "KeyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.nextAfter(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ref.ReferenceQueue.remove()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.time.Period.minusDays(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.StrictMath.getExponent(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.LongStream.range(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Policy.getPolicy()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.Toolkit.createWindow(Window)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Window"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.security.cert.PKIXRevocationChecker.setOcspResponder(URI)": {
        "args": [
            "URI"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.GregorianCalendar.isLeapYear(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.EventHandler.getEventPropertyName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.build()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.DigestInputStream.read()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Graphics2D.drawString(String, float, float)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "float", 
            "float"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.quietlyJoin()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Byte.longValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Signature.update(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "SignatureException"
        ], 
        "throws": [
            "SignatureException"
        ]
    }, 
    "java.util.logging.Logger.entering(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.addImpl(Component, Object, int)": {
        "args": [
            "Component", 
            "Object", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalArgumentException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.format.DecimalStyle.of(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Proxy.isProxyClass(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.Provider.elements()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Provider.get(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.contains(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Inet4Address.isSiteLocalAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetAdapter.dropActionChanged(DropTargetDragEvent)": {
        "args": [
            "DropTargetDragEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.executeQuery(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLTimeoutException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.ResultSet.clearWarnings()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.SortedMap.tailMap(K)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.newCondition()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.changeParameterType(int, Class)": {
        "args": [
            "int", 
            "Class"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.removePropertyChangeListener(String, PropertyChangeListener)": {
        "args": [
            "String", 
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.BufferCapabilities.isMultiBufferAvailable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingDeque.remove(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.net.InetAddress.getHostName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuilder.insert(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.text.CharacterIterator.last()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.RenderingHints.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentColorModel.getComponents(Object, int[], int)": {
        "args": [
            "Object", 
            "int[]", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "ClassCastException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.LocalTime.withMinute(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicReference.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.checkedQueue(Queue, Class)": {
        "args": [
            "Queue", 
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.getLayout()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.descendingIterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.interfaces.DSAPrivateKey.getX()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Checkbox.getAccessibleActionDescription(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Float.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RemoteCall.getResultStream(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [
            "IOException", 
            "StreamCorruptedException"
        ], 
        "throws": [
            "IOException", 
            "StreamCorruptedException"
        ]
    }, 
    "java.util.Locale.filter(List, Collection)": {
        "args": [
            "List", 
            "Collection"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.Security.removeProvider(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.zip.Adler32.getValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.getVisibleAdvance()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.color.ICC_Profile.getInstance(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Inflater.getTotalIn()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.intersects(Rectangle2D)": {
        "args": [
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.DesignMode.isDesignTime()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.equals(DataFlavor)": {
        "args": [
            "DataFlavor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneOffsetTransitionRule.isMidnightEndOfDay()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.HashSet.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.toUpperCase(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.PosixFileAttributes.owner()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getWidth(ImageObserver)": {
        "args": [
            "ImageObserver"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.incrementAndGet(T)": {
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.get()": {
        "args": [
            ""
        ], 
        "@throws": [
            "CancellationException", 
            "ExecutionException", 
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException", 
            "ExecutionException"
        ]
    }, 
    "java.sql.DatabaseMetaData.getMaxCharLiteralLength()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.text.CollationKey.toByteArray()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StreamTokenizer.commentChar(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.LambdaMetafactory.metafactory(Lookup, String, MethodType, MethodType, MethodHandle, MethodType)": {
        "args": [
            "Lookup", 
            "String", 
            "MethodType", 
            "MethodType", 
            "MethodHandle", 
            "MethodType"
        ], 
        "@throws": [
            "LambdaConversionException"
        ], 
        "throws": [
            "LambdaConversionException"
        ]
    }, 
    "java.sql.SQLOutput.writeObject(Object, SQLType)": {
        "args": [
            "Object", 
            "SQLType"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Runtime.load(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException", 
            "UnsatisfiedLinkError", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.DataBuffer.setElemFloat(int, float)": {
        "args": [
            "int", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.parse(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [
            "DateTimeParseException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.PreferencesFactory.userRoot()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.SplashScreen.getSize()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": [
            "IllegalStateException"
        ]
    }, 
    "java.lang.Math.negateExact(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.management.ManagementFactory.getRuntimeMXBean()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayList.add(int, E)": {
        "args": [
            "int", 
            "E"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.AbstractList.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceContext.getTransferable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousFileChannel.lock(long, long, boolean, A, CompletionHandler)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "long", 
            "boolean", 
            "A", 
            "CompletionHandler"
        ], 
        "@throws": [
            "OverlappingFileLockException", 
            "IllegalArgumentException", 
            "NonReadableChannelException", 
            "NonWritableChannelException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.purge()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.stop()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.MinguoDate.now()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.CRC32.getValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Objects.equals(Object, Object)": {
        "args": [
            "Object", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.newInstance(String, Provider, File, ProtectionParameter)": {
        "args": [
            "String", 
            "Provider", 
            "File", 
            "ProtectionParameter"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Button.doAccessibleAction(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.searchKeys(long, Function)": {
        "args": [
            "long", 
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuShortcut.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.getAsyncMode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.setMinimumFractionDigits(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.RectangularShape.getMaxX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.WritableRaster.setSample(int, int, int, float)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "float"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.getSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.createTransformedShape(Shape)": {
        "args": [
            "Shape"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.StampedLock.writeLock()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getNumericFunctions()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.event.InputEvent.isMetaDown()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuShortcut.usesShiftModifier()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.IntPredicate.test(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.isAfter(ChronoLocalDate)": {
        "args": [
            "ChronoLocalDate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragGestureEvent.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.withZoneSameLocal(ZoneId)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLStreamHandler.openConnection(URL, Proxy)": {
        "args": [
            "URL", 
            "Proxy"
        ], 
        "@throws": [
            "IOException", 
            "IllegalArgumentException", 
            "UnsupportedOperationException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.FilePermission.implies(Permission)": {
        "args": [
            "Permission"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.compareTo(Long)": {
        "args": [
            "Long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.OptionalLong.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.takeFirst()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.io.OutputStreamWriter.write(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Insets.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.setFilter(Filter)": {
        "args": [
            "Filter"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.nio.file.attribute.AclEntryFlag.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Runtime.gc()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipEntry.setTime(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ScheduledThreadPoolExecutor.decorateTask(Callable, RunnableScheduledFuture)": {
        "args": [
            "Callable", 
            "RunnableScheduledFuture"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.JarURLConnection.getEntryName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.isCompletedExceptionally()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Package.isAnnotationPresent(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.net.JarURLConnection.getJarEntry()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.event.HierarchyEvent.getComponent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.getPrivateKey()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Comparator.thenComparingLong(ToLongFunction)": {
        "args": [
            "ToLongFunction"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Character.codePointAt(CharSequence, int)": {
        "args": [
            "CharSequence", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.math.BigDecimal.movePointRight(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.color.ICC_ProfileGray.getTRC()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ProfileDataException"
        ], 
        "throws": []
    }, 
    "java.time.temporal.ChronoUnit.isSupportedBy(Temporal)": {
        "args": [
            "Temporal"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXParameters.getDate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.instrument.Instrumentation.appendToBootstrapClassLoaderSearch(JarFile)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "JarFile"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.Signature.initSign(PrivateKey)": {
        "args": [
            "PrivateKey"
        ], 
        "@throws": [
            "InvalidKeyException"
        ], 
        "throws": [
            "InvalidKeyException"
        ]
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.hasQueuedThread(Thread)": {
        "args": [
            "Thread"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.BasicPermission.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.Buffer.array()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ReadOnlyBufferException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.rmi.server.LogStream.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.setMinimumIntegerDigits(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.incrementExact(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.getListeners(EventListener, Class)": {
        "args": [
            "EventListener", 
            "Class"
        ], 
        "@throws": [
            "NullPointerException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.contains(Rectangle2D)": {
        "args": [
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.withMonth(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.IdentityHashMap.get(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.IdentityScope.setSystemScope(IdentityScope)": {
        "args": [
            "IdentityScope"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.isAfterLast()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.file.WatchEvent.name()": {
        "Abstract": [
            "Y", 
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LongSummaryStatistics.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXRevocationChecker.getOcspExtensions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.PriorityQueue.comparator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isUpperCase(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Beans.instantiate(ClassLoader, String)": {
        "args": [
            "ClassLoader", 
            "String"
        ], 
        "@throws": [
            "ClassNotFoundException", 
            "IOException"
        ], 
        "throws": [
            "IOException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.security.KeyPairGenerator.initialize(int, SecureRandom)": {
        "args": [
            "int", 
            "SecureRandom"
        ], 
        "@throws": [
            "InvalidParameterException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Field.getBoolean(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "IllegalAccessException", 
            "IllegalArgumentException", 
            "NullPointerException", 
            "ExceptionInInitializerError"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "IllegalAccessException"
        ]
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.releaseShared(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.FileChannel.force(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.writeLock()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZoneOffset.ofHoursMinutes(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Menu.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.acl.AclEntry.toString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextComponent.select(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.InflaterInputStream.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.DatabaseMetaData.supportsTransactionIsolationLevel(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.im.spi.InputMethod.endComposition()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.getScaleX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArraySet.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertificateFactorySpi.engineGenerateCertificate(InputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "InputStream"
        ], 
        "@throws": [
            "CertificateException"
        ], 
        "throws": [
            "CertificateException"
        ]
    }, 
    "java.awt.image.FilteredImageSource.isConsumer(ImageConsumer)": {
        "args": [
            "ImageConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocketImpl.connect(InetAddress, int)": {
        "args": [
            "InetAddress", 
            "int"
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.nio.file.Files.getFileAttributeView(Path, Class, LinkOption[])": {
        "args": [
            "Path", 
            "Class", 
            "LinkOption[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.until(Temporal, TemporalUnit)": {
        "args": [
            "Temporal", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.image.DataBufferShort.getElem(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TrayIcon.getImage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.sort(long[], int, int)": {
        "args": [
            "long[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.Pipe.open()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.TextComponent.getAccessibleContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getMinimumSize(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Throwable.printStackTrace(PrintWriter)": {
        "args": [
            "PrintWriter"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GridBagLayout.setConstraints(Component, GridBagConstraints)": {
        "args": [
            "Component", 
            "GridBagConstraints"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingQueue.take()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.Scanner.hasNextDouble()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.Channels.newInputStream(ReadableByteChannel)": {
        "args": [
            "ReadableByteChannel"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Frame.setShape(Shape)": {
        "args": [
            "Shape"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.LockSupport.park(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.setUncaughtExceptionHandler(UncaughtExceptionHandler)": {
        "args": [
            "UncaughtExceptionHandler"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.text.AttributedString.getIterator(Attribute[])": {
        "args": [
            "Attribute[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URI.getSchemeSpecificPart()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.severe(Supplier)": {
        "args": [
            "Supplier"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.StampedLock.tryOptimisticRead()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.NumberFormat.setParseIntegerOnly(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AccessController.doPrivileged(PrivilegedAction)": {
        "args": [
            "PrivilegedAction"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.font.NumericShaper.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.Matcher.useAnchoringBounds(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.createStatement(int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.font.TextLayout.hitTestChar(float, float, Rectangle2D)": {
        "args": [
            "float", 
            "float", 
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getMaxSchemaNameLength()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Class.isMemberClass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Stream.reduce(BinaryOperator)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BinaryOperator"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.im.spi.InputMethod.setCompositionEnabled(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.stream.IntStream.flatMap(IntFunction)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "IntFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuItem.addActionListener(ActionListener)": {
        "args": [
            "ActionListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.EventQueue.isDispatchThread()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.setIssuer(X500Principal)": {
        "args": [
            "X500Principal"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentSampleModel.setPixel(int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyEditor.getCustomEditor()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.isAutoRequestFocus()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.EnumMap.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Dimension.setSize(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLStreamHandler.sameFile(URL, URL)": {
        "args": [
            "URL", 
            "URL"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayDeque.getLast()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.util.ListIterator.previous()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.sql.Clob.getAsciiStream()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Arrays.binarySearch(byte[], int, int, byte)": {
        "args": [
            "byte[]", 
            "int", 
            "int", 
            "byte"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.nio.file.spi.FileSystemProvider.newFileSystem(URI, Map)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "URI", 
            "Map"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IOException", 
            "SecurityException", 
            "FileSystemAlreadyExistsException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.temporal.TemporalUnit.isDurationEstimated()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.adjustInto(Temporal)": {
        "args": [
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseDate.of(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.function.ToLongFunction.applyAsLong(T)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BandedSampleModel.getPixels(int, int, int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getDate(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.stream.LongStream.sequential()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.getDisplayNames(int, int, Locale)": {
        "args": [
            "int", 
            "int", 
            "Locale"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.zip.ZipInputStream.createZipEntry(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.codePointCount(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXParameters.setRevocationEnabled(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.MemoryMXBean.setVerbose(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.GraphicsConfiguration.getBufferCapabilities()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getNString(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.PageAttributes.setPrinterResolutionToDefault()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RemoteRef.invoke(RemoteCall)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "RemoteCall"
        ], 
        "@throws": [
            "Exception"
        ], 
        "throws": [
            "Exception"
        ]
    }, 
    "java.awt.Component.getDropTarget()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.CharArrayWriter.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.executeLargeUpdate()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLTimeoutException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.BasicPermission.newPermissionCollection()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.MemoryUsage.getUsed()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextField.setColumns(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.GridBagLayout.getMinSize(Container, GridBagLayoutInfo)": {
        "args": [
            "Container", 
            "GridBagLayoutInfo"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PushbackInputStream.skip(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Collections.singletonMap(K, V)": {
        "args": [
            "K", 
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Robot.keyRelease(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.IntBuffer.put(IntBuffer)": {
        "args": [
            "IntBuffer"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "IllegalArgumentException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateObject(String, Object, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Object", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.Socket.getSoLinger()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.beans.XMLEncoder.writeStatement(Statement)": {
        "args": [
            "Statement"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509Extension.hasUnsupportedCriticalExtension()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.invalidate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.getGreen(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRL.getVersion()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.dgc.VMID.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.hasNextBoolean()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.applet.AppletContext.getApplet(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isSpaceChar(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.get(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.getType()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.stream.DoubleStream.filter(DoublePredicate)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DoublePredicate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Boolean.valueOf(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.Paper.getWidth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.caretPositionChanged(InputMethodEvent)": {
        "args": [
            "InputMethodEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.registry.LocateRegistry.createRegistry(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "RemoteException"
        ], 
        "throws": [
            "RemoteException"
        ]
    }, 
    "java.nio.ShortBuffer.allocate(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getExtraNameCharacters()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Component.disableEvents(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayList.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.put(String, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "boolean"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.getLeading()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PushbackInputStream.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.RandomAccessFile.readFloat()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.dnd.DragGestureRecognizer.registerListeners()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.writeInt(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.ResultSet.getShort(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.Duration.getUnits()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.interfaces.RSAPublicKey.getPublicExponent()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ItemSelectable.getSelectedObjects()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalQueries.zone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.byteValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.ValueRange.isValidValue(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.compute(K, BiFunction)": {
        "args": [
            "K", 
            "BiFunction"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Character.isIdentifierIgnorable(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Provider.merge(Object, Object, BiFunction)": {
        "args": [
            "Object", 
            "Object", 
            "BiFunction"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.security.cert.PKIXCertPathValidatorResult.getTrustAnchor()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayList.addAll(int, Collection)": {
        "args": [
            "int", 
            "Collection"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Integer.signum(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.MultiPixelPackedSampleModel.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Parameter.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.DosFileAttributeView.setHidden(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.instrument.Instrumentation.isModifiableClass(Class)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.getY1()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantLock.hasQueuedThread(Thread)": {
        "args": [
            "Thread"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Thread.join(long, int)": {
        "args": [
            "long", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.Window.processWindowStateEvent(WindowEvent)": {
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.getPathIterator(AffineTransform, double)": {
        "args": [
            "AffineTransform", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.OptionalDouble.orElseGet(DoubleSupplier)": {
        "args": [
            "DoubleSupplier"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.event.ActionEvent.getWhen()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsConfiguration.getDefaultTransform()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.getUncaughtExceptionHandler()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getSharedQueuedThreads()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.ScatteringByteChannel.read(ByteBuffer[], int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "NonReadableChannelException", 
            "ClosedChannelException", 
            "AsynchronousCloseException", 
            "ClosedByInterruptException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Thread.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.SwitchPoint.guardWithTest(MethodHandle, MethodHandle)": {
        "args": [
            "MethodHandle", 
            "MethodHandle"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.setLocale(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [
            "PropertyVetoException"
        ], 
        "throws": [
            "PropertyVetoException"
        ]
    }, 
    "java.awt.Button.processActionEvent(ActionEvent)": {
        "args": [
            "ActionEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.drawString(String, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.RectangularShape.getBounds()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.setDoInput(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.net.InetAddress.getAllByName(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "UnknownHostException", 
            "SecurityException"
        ], 
        "throws": [
            "UnknownHostException"
        ]
    }, 
    "java.util.prefs.Preferences.getLong(String, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "long"
        ], 
        "@throws": [
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Modifier.isStatic(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterators.spliterator(double[], int)": {
        "args": [
            "double[]", 
            "int"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.net.URLConnection.setRequestProperty(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ArrayBlockingQueue.put(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "InterruptedException", 
            "NullPointerException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.image.SampleModel.setSample(int, int, int, double, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "double", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.System.getProperties()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.lang.ref.Reference.isEnqueued()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.getBounds()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getFunctions(String, String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String", 
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.TextArea.preferredSize(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getBigDecimal(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.math.BigDecimal.toPlainString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.createTextField(TextField)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "TextField"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.util.concurrent.CountedCompleter.nextComplete()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getWaitingThreads()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalMonitorStateException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.getAlphaRaster(WritableRaster)": {
        "args": [
            "WritableRaster"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ImageFilter.setPixels(int, int, int, int, ColorModel, byte[], int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "ColorModel", 
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.CharacterIterator.setIndex(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferFloat.getElemFloat(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ExecutorService.submit(Runnable, T)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Runnable", 
            "T"
        ], 
        "@throws": [
            "RejectedExecutionException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.text.NumberFormat.format(double, StringBuffer, FieldPosition)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double", 
            "StringBuffer", 
            "FieldPosition"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.stream.Collectors.averagingDouble(ToDoubleFunction)": {
        "args": [
            "ToDoubleFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Frame.getTitle()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.DosFileAttributes.isReadOnly()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.ECPoint.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.initialize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Dialog.setModalityType(ModalityType)": {
        "args": [
            "ModalityType"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.beans.EventHandler.create(Class, Object, String)": {
        "args": [
            "Class", 
            "Object", 
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "NullPointerException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Image.getHeight(ImageObserver)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ImageObserver"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.DoubleBuffer.arrayOffset()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ReadOnlyBufferException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.Toolkit.getFontMetrics(Font)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Font"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GridLayout.minimumLayoutSize(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CRL.toString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.CallSite.setTarget(MethodHandle)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "MethodHandle"
        ], 
        "@throws": [
            "NullPointerException", 
            "WrongMethodTypeException"
        ], 
        "throws": []
    }, 
    "java.io.Reader.read(char[])": {
        "args": [
            "char[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.IdentityHashMap.forEach(BiConsumer)": {
        "args": [
            "BiConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTKeyStroke.getAWTKeyStrokeForEvent(KeyEvent)": {
        "args": [
            "KeyEvent"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.PixelGrabber.grabPixels()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.lang.Math.floorDiv(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.Base64.encode(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.plus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.BitSet.length()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.cosh(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.IllegalFormatPrecisionException.getPrecision()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setDate(String, Date)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Date"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.HttpURLConnection.getFollowRedirects()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getWritableTileIndices()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.IntSummaryStatistics.getMin()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getLong(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.Reader.mark(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.DatagramSocket.getReceiveBufferSize()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.util.prefs.Preferences.clear()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "BackingStoreException", 
            "IllegalStateException"
        ], 
        "throws": [
            "BackingStoreException"
        ]
    }, 
    "java.security.spec.RSAPrivateCrtKeySpec.getCrtCoefficient()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuilder.insert(int, String)": {
        "args": [
            "int", 
            "String"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.MembershipKey.group()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.atZoneSimilarLocal(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.nextLong(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "InputMismatchException", 
            "NoSuchElementException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ChronoPeriod.getChronology()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertPath.getEncodings()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.thenRunAsync(Runnable, Executor)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Runnable", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.PageAttributes.setMedia(MediaType)": {
        "args": [
            "MediaType"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.getNaN()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.LongStream.max()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.repaint()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.OutputStream.write(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Robot.keyPress(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.destroyBuffers()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextChild.setBeanContext(BeanContext)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BeanContext"
        ], 
        "@throws": [
            "PropertyVetoException"
        ], 
        "throws": [
            "PropertyVetoException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.compareAndSet(T, V, V)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "V", 
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.GarbageCollectorMXBean.getCollectionTime()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicReferenceArray.updateAndGet(int, UnaryOperator)": {
        "args": [
            "int", 
            "UnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.abs(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.applet.Applet.getParameter(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.nextFloat()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InputMismatchException", 
            "NoSuchElementException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.time.Period.plusDays(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateClob(int, Reader)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Reader"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicLongArray.addAndGet(int, long)": {
        "args": [
            "int", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Date.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractMap.getValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ClassLoader.setClassAssertionStatus(String, boolean)": {
        "args": [
            "String", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.ServerSocket.setSoTimeout(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicReferenceArray.lazySet(int, E)": {
        "args": [
            "int", 
            "E"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.getProtectionParameter(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "KeyStoreException", 
            "IllegalStateException"
        ], 
        "throws": [
            "KeyStoreException"
        ]
    }, 
    "java.time.YearMonth.now(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.nextFocus()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.toUpperCase(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.equals(boolean[], boolean[])": {
        "args": [
            "boolean[]", 
            "boolean[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Observer.update(Observable, Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Observable", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.PrinterJob.pageDialog(PrintRequestAttributeSet)": {
        "args": [
            "PrintRequestAttributeSet"
        ], 
        "@throws": [
            "HeadlessException", 
            "NullPointerException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.lang.management.MemoryPoolMXBean.isValid()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoPeriod.normalized()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.zip.Deflater.setInput(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.setReadOnly()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.getMouseWheelListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRLSelector.getIssuerNames()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.LongStream.rangeClosed(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FlowLayout.getVgap()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoChronology.prolepticYear(Era, int)": {
        "args": [
            "Era", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.Clipboard.removeFlavorListener(FlavorListener)": {
        "args": [
            "FlavorListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ContainerOrderFocusTraversalPolicy.getDefaultComponent(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Image.getSource()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TimeZone.setDefault(TimeZone)": {
        "args": [
            "TimeZone"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.ScatteringByteChannel.read(ByteBuffer[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer[]"
        ], 
        "@throws": [
            "NonReadableChannelException", 
            "ClosedChannelException", 
            "AsynchronousCloseException", 
            "ClosedByInterruptException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.stream.Collectors.joining(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Statement.getTarget()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.PriorityBlockingQueue.toArray(T[])": {
        "args": [
            "T[]"
        ], 
        "@throws": [
            "ArrayStoreException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.runAfterBoth(CompletionStage, Runnable)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CompletionStage", 
            "Runnable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CheckboxMenuItem.addItemListener(ItemListener)": {
        "args": [
            "ItemListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.spi.FileSystemProvider.readAttributes(Path, Class, LinkOption[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Path", 
            "Class", 
            "LinkOption[]"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.LocalDateTime.parse(CharSequence, DateTimeFormatter)": {
        "args": [
            "CharSequence", 
            "DateTimeFormatter"
        ], 
        "@throws": [
            "DateTimeParseException"
        ], 
        "throws": []
    }, 
    "java.io.ByteArrayInputStream.close()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Arrays.toString(char[])": {
        "args": [
            "char[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.getAttributes()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.getLockingKeyState(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "HeadlessException"
        ], 
        "throws": [
            "UnsupportedOperationException"
        ]
    }, 
    "java.awt.MenuComponent.getSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Menu.getAccessibleRole()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.writeChar(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.rmi.server.LogStream.getDefaultStream()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.appendParameterTypes(Class[])": {
        "args": [
            "Class[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.GridBagLayout.getLayoutAlignmentX(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.query(TemporalQuery)": {
        "args": [
            "TemporalQuery"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.CheckboxMenuItem.processItemEvent(ItemEvent)": {
        "args": [
            "ItemEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Executors.newFixedThreadPool(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.rmi.server.LogStream.setOutputStream(OutputStream)": {
        "args": [
            "OutputStream"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertificateFactory.getInstance(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "CertificateException"
        ], 
        "throws": [
            "CertificateException"
        ]
    }, 
    "java.awt.MenuComponent.getFont()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingQueue.remainingCapacity()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.spi.AbstractSelectableChannel.implCloseChannel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.HashMap.replaceAll(BiFunction)": {
        "args": [
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistChronology.getId()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.fillRect(int, int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.Charset.availableCharsets()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.DSAGenParameterSpec.getSubprimeQLength()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseAdapter.mouseMoved(MouseEvent)": {
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.rotateLeft(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.Chronology.ofLocale(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.security.cert.X509CRLEntry.hasExtensions()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.DosFileAttributeView.name()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquireSharedInterruptibly(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.beans.PropertyEditorSupport.getTags()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Ellipse2D.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ProcessBuilder.command(String[])": {
        "args": [
            "String[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.get(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ParameterMetaData.getPrecision(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.LinkedBlockingDeque.pollLast(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.nio.file.Files.getFileStore(Path)": {
        "args": [
            "Path"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.CallableStatement.getRowId(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicReference.weakCompareAndSet(V, V)": {
        "args": [
            "V", 
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ChoicePeer.removeAll()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.resize(Dimension)": {
        "args": [
            "Dimension"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertPathChecker.init(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [
            "CertPathValidatorException"
        ], 
        "throws": [
            "CertPathValidatorException"
        ]
    }, 
    "java.awt.geom.Path2D.curveTo(double, double, double, double, double, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Process.destroyForcibly()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.plusSeconds(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.subSequence(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Choice.getSelectedItem()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isJavaLetter(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.get(String, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "boolean"
        ], 
        "@throws": [
            "IOException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.OffsetDateTime.timeLineOrder()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyChangeListenerProxy.getPropertyName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ScheduledThreadPoolExecutor.getExecuteExistingDelayedTasksAfterShutdownPolicy()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedTransferQueue.tryTransfer(E, long, TimeUnit)": {
        "args": [
            "E", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.peer.TextComponentPeer.getText()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Desktop.mail()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Map.get(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Package.isCompatibleWith(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.awt.image.RenderedImage.getTileHeight()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.getUsableSpace()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.Window.setBackground(Color)": {
        "args": [
            "Color"
        ], 
        "@throws": [
            "IllegalComponentStateException", 
            "IllegalComponentStateException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.function.IntPredicate.or(IntPredicate)": {
        "args": [
            "IntPredicate"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Button.setCurrentAccessibleValue(Number)": {
        "args": [
            "Number"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.minusWeeks(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.security.KeyStoreSpi.engineSetKeyEntry(String, byte[], Certificate[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "byte[]", 
            "Certificate[]"
        ], 
        "@throws": [
            "KeyStoreException"
        ], 
        "throws": [
            "KeyStoreException"
        ]
    }, 
    "java.lang.StringBuilder.insert(int, char)": {
        "args": [
            "int", 
            "char"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.JobAttributes.setFromPage(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.net.SocketPermission.newPermissionCollection()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeSet.higher(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.solveCubic(double[])": {
        "args": [
            "double[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.JobAttributes.getSides()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ResourceBundle.getBundle(String, Locale)": {
        "args": [
            "String", 
            "Locale"
        ], 
        "@throws": [
            "NullPointerException", 
            "MissingResourceException"
        ], 
        "throws": []
    }, 
    "java.awt.image.MultiPixelPackedSampleModel.setDataElements(int, int, Object, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "Object", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.BufferedReader.mark(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.dnd.DragSource.removeDragSourceListener(DragSourceListener)": {
        "args": [
            "DragSourceListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.getDeterminant()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextChildSupport.setBeanContext(BeanContext)": {
        "args": [
            "BeanContext"
        ], 
        "@throws": [
            "PropertyVetoException"
        ], 
        "throws": [
            "PropertyVetoException"
        ]
    }, 
    "java.text.NumberFormat.getMaximumFractionDigits()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Runtime.exec(String, String[], File)": {
        "args": [
            "String", 
            "String[]", 
            "File"
        ], 
        "@throws": [
            "SecurityException", 
            "IOException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.text.DateFormatSymbols.setMonths(String[])": {
        "args": [
            "String[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.removeElementAt(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.event.InvocationEvent.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.put(String, byte)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "byte"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongArray.incrementAndGet(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPane.setWheelScrollingEnabled(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.BasicFileAttributes.size()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.write(Path, Iterable, OpenOption[])": {
        "args": [
            "Path", 
            "Iterable", 
            "OpenOption[]"
        ], 
        "@throws": [
            "IOException", 
            "UnsupportedOperationException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Component.addPropertyChangeListener(PropertyChangeListener)": {
        "args": [
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.getStringBounds(CharacterIterator, int, int, FontRenderContext)": {
        "args": [
            "CharacterIterator", 
            "int", 
            "int", 
            "FontRenderContext"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.function.DoublePredicate.or(DoublePredicate)": {
        "args": [
            "DoublePredicate"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.file.attribute.PosixFilePermission.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.System.setSecurityManager(SecurityManager)": {
        "args": [
            "SecurityManager"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.Scrollbar.addAdjustmentListener(AdjustmentListener)": {
        "args": [
            "AdjustmentListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.WritableRenderedImage.setData(Raster)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Raster"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.query(TemporalQuery)": {
        "args": [
            "TemporalQuery"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.TextField.getEchoChar()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.DeflaterOutputStream.finish()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.EnumSet.of(E, E, E, E, E)": {
        "args": [
            "E", 
            "E", 
            "E", 
            "E", 
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.function.BiConsumer.andThen(BiConsumer)": {
        "args": [
            "BiConsumer"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.TextComponent.setBackground(Color)": {
        "args": [
            "Color"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.peekLast()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseEvent.getY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocket.receive(DatagramPacket)": {
        "args": [
            "DatagramPacket"
        ], 
        "@throws": [
            "IOException", 
            "SocketTimeoutException", 
            "PortUnreachableException", 
            "IllegalBlockingModeException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.CharBuffer.get(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "BufferUnderflowException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationSystem.setActivationGroupDesc(ActivationGroupID, ActivationGroupDesc)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ActivationGroupID", 
            "ActivationGroupDesc"
        ], 
        "@throws": [
            "UnknownGroupException", 
            "ActivationException", 
            "RemoteException"
        ], 
        "throws": [
            "ActivationException", 
            "UnknownGroupException", 
            "RemoteException"
        ]
    }, 
    "java.lang.management.RuntimeMXBean.getClassPath()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.lang.management.ThreadMXBean.setThreadCpuTimeEnabled(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.setLocale(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImageOp.getPoint2D(Point2D, Point2D)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Point2D", 
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.HashSet.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.firePropertyChange(String, Object, Object)": {
        "args": [
            "String", 
            "Object", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.SocketHandler.publish(LogRecord)": {
        "args": [
            "LogRecord"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.getChildVisibility(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.FloatBuffer.put(float[], int, int)": {
        "args": [
            "float[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "IndexOutOfBoundsException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.awt.image.RenderedImage.copyData(WritableRaster)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "WritableRaster"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.MouseDragGestureRecognizer.registerListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.spi.SelectorProvider.openDatagramChannel()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.OffsetDateTime.with(TemporalField, long)": {
        "args": [
            "TemporalField", 
            "long"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.MenuItem.getAccessibleActionDescription(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuilder.insert(int, boolean)": {
        "args": [
            "int", 
            "boolean"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.awaitTermination(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.security.cert.Extension.encode(OutputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "OutputStream"
        ], 
        "@throws": [
            "IOException", 
            "NullPointerException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.text.NumberFormat.parse(String, ParsePosition)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "ParsePosition"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.IdentityHashMap.keySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Rectangle.createIntersection(Rectangle2D)": {
        "args": [
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextChildSupport.serviceRevoked(BeanContextServiceRevokedEvent)": {
        "args": [
            "BeanContextServiceRevokedEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.byteValueExact()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.net.SocketImpl.accept(SocketImpl)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "SocketImpl"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.BufferedReader.skip(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.cert.X509CRLSelector.setMaxCRLNumber(BigInteger)": {
        "args": [
            "BigInteger"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Authenticator.requestPasswordAuthentication(InetAddress, int, String, String, String)": {
        "args": [
            "InetAddress", 
            "int", 
            "String", 
            "String", 
            "String"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.Container.getComponentCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.isSupported(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Ellipse2D.setFrame(float, float, float, float)": {
        "args": [
            "float", 
            "float", 
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.spi.AbstractSelectableChannel.provider()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StreamTokenizer.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.distinct()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsANSI92FullSQL()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.prefs.AbstractPreferences.exportSubtree(OutputStream)": {
        "args": [
            "OutputStream"
        ], 
        "@throws": [
            "IOException", 
            "BackingStoreException"
        ], 
        "throws": [
            "IOException", 
            "BackingStoreException"
        ]
    }, 
    "java.awt.List.clearAccessibleSelection()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocketImpl.peekData(DatagramPacket)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DatagramPacket"
        ], 
        "@throws": [
            "IOException", 
            "PortUnreachableException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Font.deriveFont(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.ValueRange.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayList.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneRules.of(ZoneOffset, ZoneOffset, List, List, List)": {
        "args": [
            "ZoneOffset", 
            "ZoneOffset", 
            "List", 
            "List", 
            "List"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.EnumConstantNotPresentException.enumType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.toTitleCase(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Field.getAnnotationsByType(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Package.getDeclaredAnnotation(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.file.attribute.FileTime.fromMillis(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ThreadGroup.parentOf(ThreadGroup)": {
        "args": [
            "ThreadGroup"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateTimestamp(int, Timestamp)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Timestamp"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Toolkit.getSystemEventQueueImpl()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.layout()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.List.size()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicReferenceArray.set(int, E)": {
        "args": [
            "int", 
            "E"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SortedMap.subMap(K, K)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K", 
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.BasicStroke.getMiterLimit()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RenderedImage.getNumYTiles()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.removePreferenceChangeListener(PreferenceChangeListener)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "PreferenceChangeListener"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.PopupMenuPeer.show(Event)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Event"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.intValueExact()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.MenuComponent.requestFocus()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.JobAttributes.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.InetAddress.getByName(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "UnknownHostException", 
            "SecurityException"
        ], 
        "throws": [
            "UnknownHostException"
        ]
    }, 
    "java.util.Date.getSeconds()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.setSavepoint()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.AbstractList.get(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.io.FilterOutputStream.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.cert.X509CertSelector.addSubjectAlternativeName(int, String)": {
        "args": [
            "int", 
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.peer.SystemTrayPeer.getTrayIconSize()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.createCompatibleSampleModel(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SelectionKey.isValid()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.BatchUpdateException.getLargeUpdateCounts()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DirectColorModel.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPaneAdjustable.getAdjustmentListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.RuntimeMXBean.getLibraryPath()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.net.ServerSocket.getSoTimeout()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Image.getWidth(ImageObserver)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ImageObserver"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.delete(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.io.CharArrayWriter.write(String, int, int)": {
        "args": [
            "String", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedQueue.poll()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteOrder.nativeOrder()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.InputEvent.getWhen()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.BreakIterator.previous()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.spi.AbstractSelectableChannel.implCloseSelectableChannel()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.DataBuffer.setElemDouble(int, double)": {
        "args": [
            "int", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.ServerSocket.setSocketFactory(SocketImplFactory)": {
        "args": [
            "SocketImplFactory"
        ], 
        "@throws": [
            "IOException", 
            "SocketException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.ServerSocket.getChannel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getAccessibleDescription()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStoreSpi.engineSetKeyEntry(String, Key, char[], Certificate[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Key", 
            "char[]", 
            "Certificate[]"
        ], 
        "@throws": [
            "KeyStoreException"
        ], 
        "throws": [
            "KeyStoreException"
        ]
    }, 
    "java.nio.LongBuffer.asReadOnlyBuffer()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahDate.minus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.MenuBar.getMenu(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.DSAPublicKeySpec.getY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.isAfter(LocalTime)": {
        "args": [
            "LocalTime"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.AccessController.getContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SimpleTimeZone.setEndRule(int, int, int, int, boolean)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "boolean"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.cert.PKIXParameters.isAnyPolicyInhibited()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsConfiguration.getDevice()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CheckboxMenuItem.getAccessibleAction()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSetMetaData.isCaseSensitive(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.ScrollPane.addImpl(Component, Object, int)": {
        "args": [
            "Component", 
            "Object", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.min(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.hasNextFloat()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.Container.findComponentAt(Point)": {
        "args": [
            "Point"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.invokeAll(ForkJoinTask[])": {
        "args": [
            "ForkJoinTask[]"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.im.InputContext.setCompositionEnabled(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.ofLocalizedDateTime(FormatStyle)": {
        "args": [
            "FormatStyle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Hashtable.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.dataDefinitionCausesTransactionCommit()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.cert.X509CertSelector.getPrivateKeyValid()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.PaintContext.getRaster(int, int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Security.getProvider(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsDevice.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ByteArrayInputStream.mark(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Robot.isAutoWaitForIdle()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLOutput.writeTime(Time)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Time"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.peer.ContainerPeer.endLayout()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.GraphicAttribute.getDescent()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StreamTokenizer.ordinaryChars(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadMXBean.isObjectMonitorUsageSupported()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.get(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "BufferUnderflowException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.beans.PropertyDescriptor.getReadMethod()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.isCompatibleRaster(Raster)": {
        "args": [
            "Raster"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.PKCS12Attribute.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.IsoChronology.range(ChronoField)": {
        "args": [
            "ChronoField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.forEach(long, BiFunction, Consumer)": {
        "args": [
            "long", 
            "BiFunction", 
            "Consumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.ptSegDist(Point2D)": {
        "args": [
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.PatternSyntaxException.getPattern()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.BreakIterator.getSentenceInstance()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImageOp.createRendering(RenderContext)": {
        "args": [
            "RenderContext"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StreamTokenizer.slashSlashComments(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Deque.size()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PushbackReader.read()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.DataOutput.writeDouble(double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.event.AWTEventListenerProxy.eventDispatched(AWTEvent)": {
        "args": [
            "AWTEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SelectableChannel.register(Selector, int, Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Selector", 
            "int", 
            "Object"
        ], 
        "@throws": [
            "ClosedChannelException", 
            "ClosedSelectorException", 
            "IllegalBlockingModeException", 
            "IllegalSelectorException", 
            "CancelledKeyException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "ClosedChannelException"
        ]
    }, 
    "java.sql.SQLInput.readString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.IdentityHashMap.containsKey(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.setData(Raster)": {
        "args": [
            "Raster"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.minusMinutes(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ConvolveOp.getEdgeCondition()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ScheduledThreadPoolExecutor.shutdownNow()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.lang.Class.getField(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NoSuchFieldException", 
            "NullPointerException", 
            "SecurityException"
        ], 
        "throws": [
            "NoSuchFieldException", 
            "SecurityException"
        ]
    }, 
    "java.math.BigInteger.isProbablePrime(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Path.subpath(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.regex.Matcher.replaceAll(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationDesc.getLocation()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setLong(String, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.SQLClientInfoException.getFailedProperties()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.reduceKeysToLong(long, ToLongFunction, long, LongBinaryOperator)": {
        "args": [
            "long", 
            "ToLongFunction", 
            "long", 
            "LongBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.ChronoUnit.isDurationEstimated()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ThreadGroup.allowThreadSuspension(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.add(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.findSetter(Class, String, Class)": {
        "args": [
            "Class", 
            "String", 
            "Class"
        ], 
        "@throws": [
            "NoSuchFieldException", 
            "IllegalAccessException", 
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": [
            "NoSuchFieldException", 
            "IllegalAccessException"
        ]
    }, 
    "java.awt.BorderLayout.addLayoutComponent(Component, Object)": {
        "args": [
            "Component", 
            "Object"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.io.FilterReader.read()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.file.Files.isRegularFile(Path, LinkOption[])": {
        "args": [
            "Path", 
            "LinkOption[]"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.getSharedQueuedThreads()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.LookupOp.getRenderingHints()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoDate.plus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.Collections.sort(List, Comparator)": {
        "args": [
            "List", 
            "Comparator"
        ], 
        "@throws": [
            "ClassCastException", 
            "UnsupportedOperationException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Arc2D.contains(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.MarshalledObject.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.isCursorSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SeekableByteChannel.truncate(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "NonWritableChannelException", 
            "ClosedChannelException", 
            "IllegalArgumentException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.ComponentColorModel.getAlpha(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "ArrayIndexOutOfBoundsException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.event.FocusListener.focusLost(FocusEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "FocusEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ShortBuffer.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Array.getFloat(Object, int)": {
        "args": [
            "Object", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ]
    }, 
    "java.math.BigDecimal.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.remainderUnsigned(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Collator.getStrength()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.MessageDigest.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Frame.getMaximizedBounds()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.annotation.ElementType.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.StampedLock.tryConvertToReadLock(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Dictionary.size()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertPathValidatorException.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetContext.isDataFlavorSupported(DataFlavor)": {
        "args": [
            "DataFlavor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormat.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.isFocusTraversable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ref.PhantomReference.get()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Base64.getMimeEncoder(int, byte[])": {
        "args": [
            "int", 
            "byte[]"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.copyOf(double[], int)": {
        "args": [
            "double[]", 
            "int"
        ], 
        "@throws": [
            "NegativeArraySizeException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.AbstractList.set(int, E)": {
        "args": [
            "int", 
            "E"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateBlob(String, InputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "InputStream"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.cert.PKIXParameters.isExplicitPolicyRequired()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.applet.Applet.getAppletInfo()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.save(ObjectOutputStream, String, EventListener)": {
        "args": [
            "ObjectOutputStream", 
            "String", 
            "EventListener"
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.PreparedStatement.setNCharacterStream(int, Reader)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Reader"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.Socket.shutdownInput()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.KeyStore.aliases()": {
        "args": [
            ""
        ], 
        "@throws": [
            "KeyStoreException"
        ], 
        "throws": [
            "KeyStoreException"
        ]
    }, 
    "java.util.concurrent.ConcurrentHashMap.newKeySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.InetSocketAddress.getHostName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.PageFormat.getWidth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.ShapeGraphicAttribute.getAscent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DataTruncation.getRead()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ImageConsumer.setHints(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.plus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingDeque.poll()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.contains(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceDragEvent.getGestureModifiersEx()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.PKCS12Attribute.getValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.isMimeTypeEqual(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.file.spi.FileSystemProvider.createDirectory(Path, FileAttribute[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Path", 
            "FileAttribute[]"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "FileAlreadyExistsException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.ThreadGroup.enumerate(ThreadGroup[], boolean)": {
        "args": [
            "ThreadGroup[]", 
            "boolean"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.security.spec.DSAPrivateKeySpec.getG()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImageProducer.removeConsumer(ImageConsumer)": {
        "args": [
            "ImageConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateString(String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.reflect.Method.getGenericExceptionTypes()": {
        "args": [
            ""
        ], 
        "@throws": [
            "GenericSignatureFormatError", 
            "TypeNotPresentException", 
            "MalformedParameterizedTypeException"
        ], 
        "throws": []
    }, 
    "java.awt.GridLayout.layoutContainer(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.sort(short[])": {
        "args": [
            "short[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateRowId(String, RowId)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "RowId"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Window.getAccessibleRole()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.addComponentListener(ComponentListener)": {
        "args": [
            "ComponentListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseDate.with(TemporalField, long)": {
        "args": [
            "TemporalField", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSource.addDragSourceMotionListener(DragSourceMotionListener)": {
        "args": [
            "DragSourceMotionListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.setTime(Date)": {
        "args": [
            "Date"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.LongStream.count()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.atan2(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.BufferedInputStream.skip(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.PageAttributes.getPrintQuality()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Properties.store(OutputStream, String)": {
        "args": [
            "OutputStream", 
            "String"
        ], 
        "@throws": [
            "IOException", 
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.cert.CertPathBuilderResult.getCertPath()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.ChoiceFormat.nextDouble(double, boolean)": {
        "args": [
            "double", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Queue.add(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "IllegalStateException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.math.BigInteger.gcd(BigInteger)": {
        "args": [
            "BigInteger"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.CompletionHandler.completed(V, A)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "V", 
            "A"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.negate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.MemoryImageSource.newPixels()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZoneOffset.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setCharacterStream(int, Reader, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Reader", 
            "long"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.chrono.JapaneseEra.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.doLayout()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GridBagLayout.adjustForGravity(GridBagConstraints, Rectangle)": {
        "args": [
            "GridBagConstraints", 
            "Rectangle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Field.getModifiers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.isActive()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Authenticator.getRequestorType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.lower(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.getTimestamp(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.setState(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.lastIndexOf(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Path.equals(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.isWriteLockedByCurrentThread()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.setMultipleSelections(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.EventHandler.getAction()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadInfo.getLockOwnerName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.Manifest.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.removeNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Timestamp.before(Timestamp)": {
        "args": [
            "Timestamp"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.acceptEitherAsync(CompletionStage, Consumer, Executor)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CompletionStage", 
            "Consumer", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Random.doubles(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.writeBoolean(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasContended()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.hashCode(Object[])": {
        "args": [
            "Object[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationGroupID.getSystem()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.annotation.Annotation.toString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.findConstructor(Class, MethodType)": {
        "args": [
            "Class", 
            "MethodType"
        ], 
        "@throws": [
            "NoSuchMethodException", 
            "IllegalAccessException", 
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": [
            "NoSuchMethodException", 
            "IllegalAccessException"
        ]
    }, 
    "java.util.Objects.requireNonNull(T, String)": {
        "args": [
            "T", 
            "String"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.TextArea.getPreferredSize(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.getFocusCycleRootAncestor()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectStreamField.isPrimitive()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.writeChars(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.prefs.Preferences.childrenNames()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "BackingStoreException", 
            "IllegalStateException"
        ], 
        "throws": [
            "BackingStoreException"
        ]
    }, 
    "java.awt.List.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.OptionalInt.empty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.MemoryPoolMXBean.getCollectionUsageThresholdCount()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.net.URLConnection.getHeaderField(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.FileSystem.isReadOnly()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getFloat(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.ForkJoinTask.isDone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getBaselineResizeBehavior()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandle.asFixedArity()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setTimestamp(String, Timestamp)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Timestamp"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.PrintStream.append(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.getAndUpdate(T, UnaryOperator)": {
        "args": [
            "T", 
            "UnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.StampedLock.asReadLock()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.Paper.getImageableY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.skip(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.Comparator.thenComparing(Function)": {
        "args": [
            "Function"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.FilterInputStream.read(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.LocalDateTime.with(TemporalField, long)": {
        "args": [
            "TemporalField", 
            "long"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.applet.AppletContext.getAudioClip(URL)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "URL"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataOutputStream.writeChar(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.stream.DoubleStream.limit(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Polygon.inside(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AccessController.doPrivilegedWithCombiner(PrivilegedAction, AccessControlContext, Permission[])": {
        "args": [
            "PrivilegedAction", 
            "AccessControlContext", 
            "Permission[]"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.List.contains(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.getP2()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.replaceAll(UnaryOperator)": {
        "args": [
            "UnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.MarshalledObject.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.AttributedCharacterIterator.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.plusHours(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.CheckedInputStream.skip(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.geom.QuadCurve2D.solveQuadratic(double[], double[])": {
        "args": [
            "double[]", 
            "double[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneRules.getTransitions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.minusMonths(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.GregorianCalendar.getMinimum(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Choice.doAccessibleAction(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.add(BigDecimal)": {
        "args": [
            "BigDecimal"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Rectangle2D.getHeight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.pow(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.ParameterizedType.getOwnerType()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "TypeNotPresentException", 
            "MalformedParameterizedTypeException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.createInverse()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoninvertibleTransformException"
        ], 
        "throws": [
            "NoninvertibleTransformException"
        ]
    }, 
    "java.sql.Date.setHours(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ImageFilter.getFilterInstance(ImageConsumer)": {
        "args": [
            "ImageConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.PermissionCollection.implies(Permission)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Permission"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getGraphics()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.adjustInto(Temporal)": {
        "args": [
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArraySet.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.UnicastRemoteObject.exportObject(Remote, int)": {
        "args": [
            "Remote", 
            "int"
        ], 
        "@throws": [
            "RemoteException"
        ], 
        "throws": [
            "RemoteException"
        ]
    }, 
    "java.time.chrono.MinguoChronology.localDateTime(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Provider.computeIfPresent(Object, BiFunction)": {
        "args": [
            "Object", 
            "BiFunction"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.sql.SQLOutput.writeString(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.text.CollationElementIterator.getOffset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setNClob(String, Reader)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Reader"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Point.setLocation(Point)": {
        "args": [
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.BitSet.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.removeActionListener(ActionListener)": {
        "args": [
            "ActionListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SelectableChannel.keyFor(Selector)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Selector"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Hashtable.put(K, V)": {
        "args": [
            "K", 
            "V"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.contentsLost()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.CropImageFilter.setPixels(int, int, int, int, ColorModel, int[], int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "ColorModel", 
            "int[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SimpleTimeZone.getOffset(int, int, int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.math.BigDecimal.pow(int, MathContext)": {
        "args": [
            "int", 
            "MathContext"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.getLong(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.security.KeyPairGenerator.getProvider()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertPathValidatorException.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.isSupported(TemporalUnit)": {
        "args": [
            "TemporalUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getRef(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.temporal.ChronoField.isSupportedBy(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ScheduledExecutorService.schedule(Runnable, long, TimeUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Runnable", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "RejectedExecutionException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Character.codePointBefore(CharSequence, int)": {
        "args": [
            "CharSequence", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.time.MonthDay.with(Month)": {
        "args": [
            "Month"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.removeFocusListener(FocusListener)": {
        "Hidden": [
            "Y"
        ], 
        "args": [
            "FocusListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayList.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetDragEvent.rejectDrag()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.DoubleBuffer.hasArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.join()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistChronology.resolveDate(Map, ResolverStyle)": {
        "args": [
            "Map", 
            "ResolverStyle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.remove()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.lang.StringBuilder.insert(int, char[])": {
        "args": [
            "int", 
            "char[]"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.StrictMath.floorDiv(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.StrictMath.tan(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateClob(String, Reader, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Reader", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.cert.X509CRLEntry.getRevocationReason()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getCapabilities()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Provider.entrySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsSchemasInProcedureCalls()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.Arc2D.getY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStoreSpi.engineSetCertificateEntry(String, Certificate)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Certificate"
        ], 
        "@throws": [
            "KeyStoreException"
        ], 
        "throws": [
            "KeyStoreException"
        ]
    }, 
    "java.util.TreeMap.navigableKeySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyPairGenerator.getInstance(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NoSuchAlgorithmException"
        ], 
        "throws": [
            "NoSuchAlgorithmException"
        ]
    }, 
    "java.nio.charset.CharsetEncoder.charset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Period.isZero()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImageOp.getParameterBlock()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.with(TemporalAdjuster)": {
        "args": [
            "TemporalAdjuster"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.management.CompilationMXBean.getName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.PaintEvent.setUpdateRect(Rectangle)": {
        "args": [
            "Rectangle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.ObjID.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SimpleTimeZone.inDaylightTime(Date)": {
        "args": [
            "Date"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getPrimeExponentP()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseListener.mousePressed(MouseEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ExecutorCompletionService.submit(Runnable, V)": {
        "args": [
            "Runnable", 
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousSocketChannel.bind(SocketAddress)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "SocketAddress"
        ], 
        "@throws": [
            "ConnectionPendingException", 
            "AlreadyBoundException", 
            "UnsupportedAddressTypeException", 
            "ClosedChannelException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.UUID.node()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.event.InputEvent.isConsumed()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AccessController.doPrivileged(PrivilegedExceptionAction)": {
        "args": [
            "PrivilegedExceptionAction"
        ], 
        "@throws": [
            "PrivilegedActionException", 
            "NullPointerException"
        ], 
        "throws": [
            "PrivilegedActionException"
        ]
    }, 
    "java.time.MonthDay.isAfter(MonthDay)": {
        "args": [
            "MonthDay"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URI.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FontMetrics.getStringBounds(String, int, int, Graphics)": {
        "args": [
            "String", 
            "int", 
            "int", 
            "Graphics"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTarget.dropActionChanged(DropTargetDragEvent)": {
        "args": [
            "DropTargetDragEvent"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.List.replaceAll(UnaryOperator)": {
        "args": [
            "UnaryOperator"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getInt(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Collections.emptyIterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.ServerSocket.getReceiveBufferSize()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.util.jar.Attributes.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.applet.Applet.init()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.spi.InputMethod.isCompositionEnabled()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.nio.CharBuffer.put(char[])": {
        "args": [
            "char[]"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.sql.Connection.setAutoCommit(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.IndexColorModel.getRGB(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentMap.replace(K, V, V)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K", 
            "V", 
            "V"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Toolkit.createImage(URL)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "URL"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.net.InterfaceAddress.getAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Appendable.append(char)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "char"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.geom.CubicCurve2D.getP1()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.Extension.getValue()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.range(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Float.longValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.focusNextComponent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneRules.getDaylightSavings(Instant)": {
        "args": [
            "Instant"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.WeekFields.weekOfMonth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.nextInt()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InputMismatchException", 
            "NoSuchElementException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.addKeyEventDispatcher(KeyEventDispatcher)": {
        "args": [
            "KeyEventDispatcher"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Date.getTimezoneOffset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormat.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getSimpleName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.EllipticCurve.getB()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.binarySearch(double[], int, int, double)": {
        "args": [
            "double[]", 
            "int", 
            "int", 
            "double"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.List.indexOf(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setNull(int, int, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Collections.checkedCollection(Collection, Class)": {
        "args": [
            "Collection", 
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FocusTraversalPolicy.getLastComponent(Container)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Container"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.image.Raster.createBandedRaster(DataBuffer, int, int, int, int[], int[], Point)": {
        "args": [
            "DataBuffer", 
            "int", 
            "int", 
            "int", 
            "int[]", 
            "int[]", 
            "Point"
        ], 
        "@throws": [
            "RasterFormatException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.ClassValue.computeValue(Class)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.divideAndRemainder(BigDecimal, MathContext)": {
        "args": [
            "BigDecimal", 
            "MathContext"
        ], 
        "@throws": [
            "ArithmeticException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseChronology.prolepticYear(Era, int)": {
        "args": [
            "Era", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Encoder.getPersistenceDelegate(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDate.getEra()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.NumericShaper.isContextual()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.EnumMap.keySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Bidi.getLevelAt(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AlgorithmParametersSpi.engineToString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.retainAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.Raster.createWritableRaster(SampleModel, Point)": {
        "args": [
            "SampleModel", 
            "Point"
        ], 
        "@throws": [
            "RasterFormatException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ComponentSampleModel.setSample(int, int, int, double, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "double", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.setSize(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.getBytes(Charset)": {
        "args": [
            "Charset"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLong.getAndUpdate(LongUnaryOperator)": {
        "args": [
            "LongUnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StringWriter.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.HttpURLConnection.setFollowRedirects(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.LongAccumulator.getThenReset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ThreadGroup.stop()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.stream.Collectors.reducing(BinaryOperator)": {
        "args": [
            "BinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendInstant(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.setGlobalFocusedWindow(Window)": {
        "args": [
            "Window"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.awt.geom.Line2D.getX2()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ListIterator.hasPrevious()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.getEpochSecond()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.query(TemporalQuery)": {
        "args": [
            "TemporalQuery"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.zone.ZoneOffsetTransitionRule.getOffsetAfter()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeMap.ceilingEntry(K)": {
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.SignedObject.getSignature()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.FontRenderContext.getTransform()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.setScript(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllformedLocaleException"
        ], 
        "throws": []
    }, 
    "java.awt.image.Raster.createInterleavedRaster(int, int, int, int, int, int[], Point)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]", 
            "Point"
        ], 
        "@throws": [
            "RasterFormatException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.PriorityBlockingQueue.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AlgorithmParameters.getInstance(String, Provider)": {
        "args": [
            "String", 
            "Provider"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "NoSuchAlgorithmException"
        ]
    }, 
    "java.security.acl.Acl.getPermissions(Principal)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Principal"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.getFocusTraversalPolicy()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Encoder.writeStatement(Statement)": {
        "args": [
            "Statement"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Inet6Address.getAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLOutput.writeNClob(NClob)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "NClob"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.function.DoubleUnaryOperator.compose(DoubleUnaryOperator)": {
        "args": [
            "DoubleUnaryOperator"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Executable.getGenericExceptionTypes()": {
        "args": [
            ""
        ], 
        "@throws": [
            "GenericSignatureFormatError", 
            "TypeNotPresentException", 
            "MalformedParameterizedTypeException"
        ], 
        "throws": []
    }, 
    "java.awt.image.FilteredImageSource.requestTopDownLeftRightResend(ImageConsumer)": {
        "args": [
            "ImageConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.PrimitiveIterator.forEachRemaining(LongConsumer)": {
        "args": [
            "LongConsumer"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.SynchronousQueue.toArray(T[])": {
        "args": [
            "T[]"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.ObjectOutput.flush()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Long.decode(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.nio.file.WatchKey.pollEvents()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ResourceBundle.newBundle(String, Locale, String, ClassLoader, boolean)": {
        "args": [
            "String", 
            "Locale", 
            "String", 
            "ClassLoader", 
            "boolean"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "ClassCastException", 
            "IllegalAccessException", 
            "InstantiationException", 
            "ExceptionInInitializerError", 
            "SecurityException", 
            "IOException"
        ], 
        "throws": [
            "IllegalAccessException", 
            "InstantiationException", 
            "IOException"
        ]
    }, 
    "java.lang.reflect.Method.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ref.Reference.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.poll()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRLSelector.getIssuers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZoneOffset.query(TemporalQuery)": {
        "args": [
            "TemporalQuery"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.text.CollationElementIterator.next()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.setLocation(Point)": {
        "args": [
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SelectionKey.attach(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.peer.DragSourceContextPeer.setCursor(Cursor)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Cursor"
        ], 
        "@throws": [], 
        "throws": [
            "InvalidDnDOperationException"
        ]
    }, 
    "java.awt.event.WindowStateListener.windowStateChanged(WindowEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.expm1(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.match()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkConnect(String, int, Object)": {
        "args": [
            "String", 
            "int", 
            "Object"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.submit(Runnable)": {
        "args": [
            "Runnable"
        ], 
        "@throws": [
            "NullPointerException", 
            "RejectedExecutionException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.MinguoChronology.date(Era, int, int, int)": {
        "args": [
            "Era", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.security.Signature.update(byte)": {
        "args": [
            "byte"
        ], 
        "@throws": [
            "SignatureException"
        ], 
        "throws": [
            "SignatureException"
        ]
    }, 
    "java.util.zip.Inflater.setDictionary(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneRules.previousTransition(Instant)": {
        "args": [
            "Instant"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ClassLoader.setSigners(Class, Object[])": {
        "args": [
            "Class", 
            "Object[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.subdivide(CubicCurve2D, CubicCurve2D, CubicCurve2D)": {
        "args": [
            "CubicCurve2D", 
            "CubicCurve2D", 
            "CubicCurve2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics2D.scale(double, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.XMLDecoder.readObject()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ExecutorCompletionService.poll()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.plusNanos(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.SelectionKey.selector()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.getQuadrantRotateInstance(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.NetworkInterface.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXParameters.addCertStore(CertStore)": {
        "args": [
            "CertStore"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentSampleModel.getOffset(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RMISocketFactory.setFailureHandler(RMIFailureHandler)": {
        "args": [
            "RMIFailureHandler"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.beans.PropertyDescriptor.getWriteMethod()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.WatchKey.cancel()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RMIClassLoader.loadProxyClass(String, String[], ClassLoader)": {
        "args": [
            "String", 
            "String[]", 
            "ClassLoader"
        ], 
        "@throws": [
            "MalformedURLException", 
            "ClassNotFoundException"
        ], 
        "throws": [
            "ClassNotFoundException", 
            "MalformedURLException"
        ]
    }, 
    "java.nio.FloatBuffer.duplicate()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.parse(CharSequence, ParsePosition)": {
        "args": [
            "CharSequence", 
            "ParsePosition"
        ], 
        "@throws": [
            "DateTimeParseException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.logging.Logger.log(Level, String, Object)": {
        "args": [
            "Level", 
            "String", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.relativeCCW(Point2D)": {
        "args": [
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocket.getSendBufferSize()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.sql.ResultSet.updateCharacterStream(int, Reader, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Reader", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.spec.EncodedKeySpec.getEncoded()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.MessageDigest.digest()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.MemoryManagerMXBean.isValid()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getTypeParameters()": {
        "args": [
            ""
        ], 
        "@throws": [
            "GenericSignatureFormatError"
        ], 
        "throws": []
    }, 
    "java.security.Permission.implies(Permission)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Permission"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.getSamples(int, int, int, int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.time.Clock.systemDefaultZone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.createBlob()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.TypeNotPresentException.typeName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedTransferQueue.offer(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.SocketChannel.connect(SocketAddress)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "SocketAddress"
        ], 
        "@throws": [
            "AlreadyConnectedException", 
            "ConnectionPendingException", 
            "ClosedChannelException", 
            "AsynchronousCloseException", 
            "ClosedByInterruptException", 
            "UnresolvedAddressException", 
            "UnsupportedAddressTypeException", 
            "SecurityException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.color.ICC_ProfileRGB.getMediaWhitePoint()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.count()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.EventSetDescriptor.setUnicast(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.longValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.addNodeChangeListener(NodeChangeListener)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "NodeChangeListener"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.relativeCCW(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.FileTime.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.round(MathContext)": {
        "args": [
            "MathContext"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.getRef(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.file.spi.FileSystemProvider.deleteIfExists(Path)": {
        "args": [
            "Path"
        ], 
        "@throws": [
            "DirectoryNotEmptyException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.RandomAccessFile.readFully(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.cert.X509CRL.getTBSCertList()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "CRLException"
        ], 
        "throws": [
            "CRLException"
        ]
    }, 
    "java.awt.Container.printComponents(Graphics)": {
        "args": [
            "Graphics"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.LongBuffer.put(long[], int, int)": {
        "args": [
            "long[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "IndexOutOfBoundsException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.getHumanPresentableName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.exactInvoker(MethodType)": {
        "args": [
            "MethodType"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.parent()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CountedCompleter.setRawResult(T)": {
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Introspector.flushFromCaches(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.Month.from(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CountDownLatch.countDown()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.addNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Checkbox.itemStateChanged(ItemEvent)": {
        "args": [
            "ItemEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPane.printComponents(Graphics)": {
        "args": [
            "Graphics"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.isLast()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.chrono.HijrahChronology.getCalendarType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.transform(double[], int, float[], int, int)": {
        "args": [
            "double[]", 
            "int", 
            "float[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterators.spliterator(int[], int, int, int)": {
        "args": [
            "int[]", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.toArray()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ClassLoader.getSystemResources(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.NetworkInterface.getByIndex(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "SocketException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.time.Month.getLong(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.Window.setLocationRelativeTo(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SignatureSpi.engineVerify(byte[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "SignatureException"
        ], 
        "throws": [
            "SignatureException"
        ]
    }, 
    "java.lang.management.MemoryManagerMXBean.getName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getWidth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.NumberFormat.format(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.io.File.exists()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.last()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.HttpURLConnection.getRequestMethod()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.deriveFont(int, float)": {
        "args": [
            "int", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.hypot(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.MatchResult.start()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.WindowPeer.setModalBlocked(Dialog, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Dialog", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ImageFilter.setPixels(int, int, int, int, ColorModel, int[], int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "ColorModel", 
            "int[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferInt.getElem(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.AreaAveragingScaleFilter.setPixels(int, int, int, int, ColorModel, int[], int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "ColorModel", 
            "int[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.RoundRectangle2D.getBounds2D()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.fillOval(int, int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.LayoutManager.addLayoutComponent(String, Component)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.userNodeForPackage(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.getDataElements(int, int, Object, DataBuffer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "Object", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.net.HttpCookie.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTarget.createDropTargetContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.readFully(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.print.PageFormat.setPaper(Paper)": {
        "args": [
            "Paper"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.cert.X509Certificate.getTBSCertificate()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "CertificateEncodingException"
        ], 
        "throws": [
            "CertificateEncodingException"
        ]
    }, 
    "java.util.Arrays.hashCode(long[])": {
        "args": [
            "long[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StringBufferInputStream.read(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.reduceKeys(long, BiFunction)": {
        "args": [
            "long", 
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuilder.insert(int, Object)": {
        "args": [
            "int", 
            "Object"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.MenuComponentPeer.setFont(Font)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Font"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.JDBCType.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.getYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.asin(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Hashtable.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Area.contains(Point2D)": {
        "args": [
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintStream.println()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.InetSocketAddress.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendLiteral(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getTimestamp(String, Calendar)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Calendar"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.CompletableFuture.handleAsync(BiFunction, Executor)": {
        "args": [
            "BiFunction", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDateTime.compareTo(ChronoLocalDateTime)": {
        "args": [
            "ChronoLocalDateTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Random.doubles()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Path.getFileSystem()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.getExtendedKeyUsage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.registerOutParameter(int, SQLType, String)": {
        "args": [
            "int", 
            "SQLType", 
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.ComponentColorModel.getDataElements(float[], int, Object)": {
        "args": [
            "float[]", 
            "int", 
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setFloat(int, float)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "float"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.Rectangle2D.union(Rectangle2D, Rectangle2D, Rectangle2D)": {
        "args": [
            "Rectangle2D", 
            "Rectangle2D", 
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.set(short, int)": {
        "args": [
            "short", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics2D.clip(Shape)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Shape"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.FormatFlagsConversionMismatchException.getConversion()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocketImpl.close()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.SocketOption.name()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.EnumSet.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImage.createDefaultRendering()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FilterOutputStream.write(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Graphics.drawImage(Image, int, int, ImageObserver)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Image", 
            "int", 
            "int", 
            "ImageObserver"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.JobAttributes.getMultipleDocumentHandling()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.deepEquals(Object[], Object[])": {
        "args": [
            "Object[]", 
            "Object[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataInput.readByte()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.font.TextMeasurer.deleteChar(AttributedCharacterIterator, int)": {
        "args": [
            "AttributedCharacterIterator", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetTime.minus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.firstEntry()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Time.valueOf(LocalTime)": {
        "args": [
            "LocalTime"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.Signature.getParameter(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "InvalidParameterException"
        ], 
        "throws": [
            "InvalidParameterException"
        ]
    }, 
    "java.time.Month.query(TemporalQuery)": {
        "args": [
            "TemporalQuery"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArraySet.add(E)": {
        "args": [
            "E"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.execute(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLTimeoutException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.DatagramPacket.getLength()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getDate(String, Calendar)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Calendar"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.ResultSet.getObject(int, Map)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Map"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.ShortBuffer.put(short[], int, int)": {
        "args": [
            "short[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "IndexOutOfBoundsException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.lang.StrictMath.log(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoDate.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.FileLock.release()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Byte.byteValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.setNegativePrefix(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Deque.remove(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.cert.PKIXParameters.getInitialPolicies()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.GlyphVector.getGlyphCharIndex(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getSelectedItems()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.transform(Point2D, Point2D)": {
        "args": [
            "Point2D", 
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.RuntimeMXBean.getVmName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Method.getTypeParameters()": {
        "args": [
            ""
        ], 
        "@throws": [
            "GenericSignatureFormatError"
        ], 
        "throws": []
    }, 
    "java.awt.image.BandCombineOp.getBounds2D(Raster)": {
        "args": [
            "Raster"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Objects.requireNonNull(T, Supplier)": {
        "args": [
            "T", 
            "Supplier"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.isPreferredSizeSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.add(int, E)": {
        "args": [
            "int", 
            "E"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getSQLXML(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.HttpCookie.getVersion()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.UID.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.StandardOpenOption.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.LongStream.distinct()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPane.getScrollbarDisplayPolicy()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.get(String, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "IOException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.JarURLConnection.getManifest()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Toolkit.getDesktopProperty(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicInteger.longValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ExecutorCompletionService.submit(Callable)": {
        "args": [
            "Callable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.postEvent(Event)": {
        "args": [
            "Event"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Boolean.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextComponent.getTextListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Throwable.addSuppressed(Throwable)": {
        "args": [
            "Throwable"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Menu.add(MenuItem)": {
        "args": [
            "MenuItem"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.getCaretShape(TextHitInfo, Rectangle2D)": {
        "args": [
            "TextHitInfo", 
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.append(char[])": {
        "args": [
            "char[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Rectangle.inside(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.getTcpNoDelay()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.awt.MediaTracker.getErrorsAny()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getSources()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseDate.toEpochDay()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RMIClassLoaderSpi.loadProxyClass(String, String[], ClassLoader)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String[]", 
            "ClassLoader"
        ], 
        "@throws": [
            "MalformedURLException", 
            "ClassNotFoundException"
        ], 
        "throws": [
            "MalformedURLException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.awt.datatransfer.Clipboard.setContents(Transferable, ClipboardOwner)": {
        "args": [
            "Transferable", 
            "ClipboardOwner"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.zip.Inflater.inflate(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DataFormatException"
        ], 
        "throws": [
            "DataFormatException"
        ]
    }, 
    "java.time.ZonedDateTime.getMinute()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.PlatformLoggingMXBean.getLoggerNames()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.floorMod(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.io.BufferedInputStream.reset()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.PropertyPermission.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Polygon.getBounds2D()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.AbstractChronology.resolveDate(Map, ResolverStyle)": {
        "args": [
            "Map", 
            "ResolverStyle"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetTime.format(DateTimeFormatter)": {
        "args": [
            "DateTimeFormatter"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.function.IntFunction.apply(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AlphaComposite.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.commonPool()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.ParsePosition.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.floorKey(K)": {
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Class.isLocalClass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Deque.push(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "IllegalStateException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.net.SocketImpl.bind(InetAddress, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "InetAddress", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.Flushable.flush()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.CallableStatement.setBigDecimal(String, BigDecimal)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "BigDecimal"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.Semaphore.getQueuedThreads()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Array.setFloat(Object, int, float)": {
        "args": [
            "Object", 
            "int", 
            "float"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ]
    }, 
    "java.io.ObjectOutputStream.writeByte(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.CompletableFuture.thenAccept(Consumer)": {
        "args": [
            "Consumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Executors.callable(PrivilegedAction)": {
        "args": [
            "PrivilegedAction"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Window.removeWindowListener(WindowListener)": {
        "args": [
            "WindowListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.reduce(int, IntBinaryOperator)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "IntBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.MembershipKey.networkInterface()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.peer.DragSourceContextPeer.startDrag(DragSourceContext, Cursor, Image, Point)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DragSourceContext", 
            "Cursor", 
            "Image", 
            "Point"
        ], 
        "@throws": [], 
        "throws": [
            "InvalidDnDOperationException"
        ]
    }, 
    "java.security.MessageDigest.getInstance(String, Provider)": {
        "args": [
            "String", 
            "Provider"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "NoSuchAlgorithmException"
        ]
    }, 
    "java.util.Optional.of(T)": {
        "args": [
            "T"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Integer.toString(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.spi.FileSystemProvider.newByteChannel(Path, Set, FileAttribute[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Path", 
            "Set", 
            "FileAttribute[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "FileAlreadyExistsException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.stream.DoubleStream.spliterator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.instrument.Instrumentation.removeTransformer(ClassFileTransformer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ClassFileTransformer"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.file.attribute.UserPrincipalNotFoundException.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.UUID.nameUUIDFromBytes(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.AbstractExecutorService.invokeAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.image.DirectColorModel.getGreen(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getTypeInfo()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Toolkit.createPanel(Panel)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Panel"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXCertPathChecker.init(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [
            "CertPathValidatorException"
        ], 
        "throws": [
            "CertPathValidatorException"
        ]
    }, 
    "java.util.concurrent.ConcurrentHashMap.forEach(long, BiConsumer)": {
        "args": [
            "long", 
            "BiConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.StringCharacterIterator.next()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintWriter.println(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ExecutorCompletionService.poll(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.io.Console.readLine()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOError"
        ], 
        "throws": []
    }, 
    "java.awt.image.BufferedImageOp.getRenderingHints()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.updateGraphicsData(GraphicsConfiguration)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "GraphicsConfiguration"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getMaxRowSize()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.cert.PKIXBuilderParameters.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.IdentityHashMap.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isSpace(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.Writer.append(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Byte.parseByte(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.security.Security.insertProviderAt(Provider, int)": {
        "args": [
            "Provider", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.PrimitiveIterator.nextLong()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.util.DoubleSummaryStatistics.getSum()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.JarInputStream.getManifest()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipEntry.setSize(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.net.URI.parseServerAuthority()": {
        "args": [
            ""
        ], 
        "@throws": [
            "URISyntaxException"
        ], 
        "throws": [
            "URISyntaxException"
        ]
    }, 
    "java.util.regex.Matcher.regionEnd()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Menu.removeNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Checkbox.getCheckboxGroup()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FileInputStream.available()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicInteger.accumulateAndGet(int, IntBinaryOperator)": {
        "args": [
            "int", 
            "IntBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.toString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.spliterator(int[])": {
        "args": [
            "int[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.ComponentListener.componentResized(ComponentEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ComponentEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Expression.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.Pageable.getPageFormat(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": [
            "IndexOutOfBoundsException"
        ]
    }, 
    "java.sql.ResultSet.getWarnings()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.SplittableRandom.nextLong(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.AbstractSet.removeAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.Array.getArray()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.GregorianCalendar.setTimeZone(TimeZone)": {
        "args": [
            "TimeZone"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Period.getUnits()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractMap.containsValue(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.DataBufferByte.getData(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferDouble.setElemDouble(int, double)": {
        "args": [
            "int", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Comparator.thenComparing(Comparator)": {
        "args": [
            "Comparator"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.put(K, V)": {
        "args": [
            "K", 
            "V"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateAsciiStream(String, InputStream, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "InputStream", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.SplittableRandom.longs(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.add(InputMethodListener, InputMethodListener)": {
        "args": [
            "InputMethodListener", 
            "InputMethodListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.Extension.isCritical()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.PixelGrabber.setPixels(int, int, int, int, ColorModel, int[], int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "ColorModel", 
            "int[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.PosixFileAttributeView.setGroup(GroupPrincipal)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "GroupPrincipal"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Container.getContainerListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URL.toURI()": {
        "args": [
            ""
        ], 
        "@throws": [
            "URISyntaxException"
        ], 
        "throws": [
            "URISyntaxException"
        ]
    }, 
    "java.rmi.activation.Activatable.register(ActivationDesc)": {
        "args": [
            "ActivationDesc"
        ], 
        "@throws": [
            "UnknownGroupException", 
            "ActivationException", 
            "RemoteException", 
            "UnsupportedOperationException"
        ], 
        "throws": [
            "UnknownGroupException", 
            "ActivationException", 
            "RemoteException"
        ]
    }, 
    "java.util.Locale.getDisplayScript(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.logging.LogManager.readConfiguration()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException", 
            "IOException"
        ], 
        "throws": [
            "IOException", 
            "SecurityException"
        ]
    }, 
    "java.util.concurrent.RunnableFuture.run()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.isUserNode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.RSAPrivateCrtKeySpec.getPublicExponent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.get(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.setAll(T[], IntFunction)": {
        "args": [
            "T[]", 
            "IntFunction"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.FileDialog.setFile(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadLocalRandom.longs(long, long, long)": {
        "args": [
            "long", 
            "long", 
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.StampedLock.tryUnlockWrite()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.fill(byte[], byte)": {
        "args": [
            "byte[]", 
            "byte"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.lengthOfMonth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.GlyphMetrics.isComponent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.LongAdder.decrement()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsTransactions()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.NavigableMap.floorKey(K)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Queue.remove()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Ellipse2D.getY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.LogManager.getLogger(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.FileStore.isReadOnly()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Rectangle.contains(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.MemoryHandler.push()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeSet.add(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.List.setBounds(Rectangle)": {
        "args": [
            "Rectangle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.List.addAll(int, Collection)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.Random.nextInt()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.last()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.awt.print.PageFormat.getImageableY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicMarkableReference.getReference()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Scrollbar.getAdjustmentListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.CollationElementIterator.tertiaryOrder(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.subdivide(QuadCurve2D, QuadCurve2D, QuadCurve2D)": {
        "args": [
            "QuadCurve2D", 
            "QuadCurve2D", 
            "QuadCurve2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.LongStream.map(LongUnaryOperator)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "LongUnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.asLongStream()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CardLayout.removeLayoutComponent(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.LongAccumulator.accumulate(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.write(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Set.contains(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.CharArrayWriter.write(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Comparator.reverseOrder()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.BreakIterator.next()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.writeObject(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "InvalidClassException", 
            "NotSerializableException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.ObjectOutputStream.writeStreamHeader()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Collection.size()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ImageProducer.requestTopDownLeftRightResend(ImageConsumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ImageConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.minus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ReplicateScaleFilter.setProperties(Hashtable)": {
        "args": [
            "Hashtable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.Activatable.getID()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextChild.addPropertyChangeListener(String, PropertyChangeListener)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.defaulted(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.ArrayBlockingQueue.toArray(T[])": {
        "args": [
            "T[]"
        ], 
        "@throws": [
            "ArrayStoreException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetContext.removeNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.isBefore(ChronoLocalDate)": {
        "args": [
            "ChronoLocalDate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.Charset.compareTo(Charset)": {
        "args": [
            "Charset"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextComponent.processTextEvent(TextEvent)": {
        "args": [
            "TextEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.PermissionCollection.setReadOnly()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkPermission(Permission)": {
        "args": [
            "Permission"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.NavigableSet.pollFirst()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.createDialog(Dialog)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Dialog"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.time.chrono.ThaiBuddhistDate.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.setPerformancePreferences(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.minusMonths(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.nio.charset.CharsetDecoder.reset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Timer.cancel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.chrono.Chronology.dateYearDay(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.lang.Class.getConstructor(Class[])": {
        "args": [
            "Class[]"
        ], 
        "@throws": [
            "NoSuchMethodException", 
            "SecurityException"
        ], 
        "throws": [
            "NoSuchMethodException", 
            "SecurityException"
        ]
    }, 
    "java.io.PrintStream.print(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FontMetrics.getStringBounds(String, Graphics)": {
        "args": [
            "String", 
            "Graphics"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.setCurve(double[], int)": {
        "args": [
            "double[]", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterators.iterator(OfInt)": {
        "args": [
            "OfInt"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.font.GlyphVector.setGlyphPosition(int, Point2D)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Point2D"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setDouble(String, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "double"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Process.getOutputStream()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.range(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.sql.Statement.getResultSetConcurrency()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.chrono.ChronoLocalDate.with(TemporalAdjuster)": {
        "args": [
            "TemporalAdjuster"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.GraphicsEnvironment.getAvailableFontFamilyNames()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayDeque.addLast(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.acl.AclEntry.getPrincipal()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.ECPoint.getAffineX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.SynchronousQueue.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.parallelSort(T[], Comparator)": {
        "args": [
            "T[]", 
            "Comparator"
        ], 
        "@throws": [
            "ClassCastException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Button.getListeners(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.util.Deque.poll()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.add(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.file.spi.FileSystemProvider.getScheme()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.LongPredicate.negate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractSet.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.RowId.equals(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.WindowListener.windowDeiconified(WindowEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.explicitCastArguments(MethodHandle, MethodType)": {
        "args": [
            "MethodHandle", 
            "MethodType"
        ], 
        "@throws": [
            "NullPointerException", 
            "WrongMethodTypeException"
        ], 
        "throws": []
    }, 
    "java.awt.BasicStroke.getDashPhase()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Scrollbar.getVisible()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509Extension.getExtensionValue(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ClassLoader.loadClass(String, boolean)": {
        "args": [
            "String", 
            "boolean"
        ], 
        "@throws": [
            "ClassNotFoundException"
        ], 
        "throws": [
            "ClassNotFoundException"
        ]
    }, 
    "java.rmi.server.RemoteCall.releaseInputStream()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.chrono.Era.getDisplayName(TextStyle, Locale)": {
        "args": [
            "TextStyle", 
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.LDAPCertStoreParameters.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.setSamples(int, int, int, int, int, double[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "double[]", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.removeVetoableChangeListener(String, VetoableChangeListener)": {
        "args": [
            "String", 
            "VetoableChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.setInstant(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.security.KeyPairGenerator.initialize(AlgorithmParameterSpec)": {
        "args": [
            "AlgorithmParameterSpec"
        ], 
        "@throws": [
            "InvalidAlgorithmParameterException"
        ], 
        "throws": [
            "InvalidAlgorithmParameterException"
        ]
    }, 
    "java.awt.event.FocusEvent.isTemporary()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsDataDefinitionAndDataManipulationTransactions()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.font.TransformAttribute.getTransform()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Properties.storeToXML(OutputStream, String, String)": {
        "args": [
            "OutputStream", 
            "String", 
            "String"
        ], 
        "@throws": [
            "IOException", 
            "UnsupportedEncodingException", 
            "NullPointerException", 
            "ClassCastException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.ResultSet.updateNull(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Robot.mouseMove(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Inflater.reset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collection.containsAll(Collection)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Collection"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.resolveClass(ObjectStreamClass)": {
        "args": [
            "ObjectStreamClass"
        ], 
        "@throws": [
            "IOException", 
            "ClassNotFoundException"
        ], 
        "throws": [
            "IOException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.awt.geom.Line2D.getPathIterator(AffineTransform, double)": {
        "args": [
            "AffineTransform", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadMXBean.isThreadCpuTimeEnabled()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.EventQueue.invokeLater(Runnable)": {
        "args": [
            "Runnable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Provider.getType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.getSoTimeout()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.net.SocketPermission.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ContainerPeer.getInsets()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXParameters.setTargetCertConstraints(CertSelector)": {
        "args": [
            "CertSelector"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.WritableRaster.setSamples(int, int, int, int, int, int[])": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.sql.Statement.executeLargeUpdate(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLTimeoutException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.DataBufferShort.getBankData()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.color.ColorSpace.fromCIEXYZ(float[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "float[]"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Font.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.RectangularShape.getPathIterator(AffineTransform, double)": {
        "args": [
            "AffineTransform", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Random.nextGaussian()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collectors.groupingBy(Function, Collector)": {
        "args": [
            "Function", 
            "Collector"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Area.transform(AffineTransform)": {
        "args": [
            "AffineTransform"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.zone.ZoneRules.isFixedOffset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.DoubleAdder.add(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.List.remove(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.nio.DoubleBuffer.wrap(double[], int, int)": {
        "args": [
            "double[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.timeLineOrder()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.interfaces.ECKey.getParams()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.newDirectoryStream(Path, Filter)": {
        "args": [
            "Path", 
            "Filter"
        ], 
        "@throws": [
            "NotDirectoryException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.FloatBuffer.get(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.regex.Matcher.end()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Blob.free()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.peer.ComponentPeer.getPreferredSize()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.componentResized(ComponentEvent)": {
        "args": [
            "ComponentEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahChronology.zonedDateTime(Instant, ZoneId)": {
        "args": [
            "Instant", 
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.get(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.font.TextHitInfo.equals(TextHitInfo)": {
        "args": [
            "TextHitInfo"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.addService(Class, BeanContextServiceProvider)": {
        "args": [
            "Class", 
            "BeanContextServiceProvider"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DriverManager.getLogWriter()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.parseStrict()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.SimpleBeanInfo.getEventSetDescriptors()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.newBufferedReader(Path, Charset)": {
        "args": [
            "Path", 
            "Charset"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.beans.XMLEncoder.writeObject(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.DoubleAdder.doubleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.FlavorTable.getNativesForFlavor(DataFlavor)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DataFlavor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.CharBuffer.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.plusYears(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImageOp.getHeight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.OptionalLong.empty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.color.ColorSpace.getType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.getInstance(String, Provider)": {
        "args": [
            "String", 
            "Provider"
        ], 
        "@throws": [
            "KeyStoreException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "KeyStoreException"
        ]
    }, 
    "java.util.Collections.binarySearch(List, T, Comparator)": {
        "args": [
            "List", 
            "T", 
            "Comparator"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.time.Clock.tick(Clock, Duration)": {
        "args": [
            "Clock", 
            "Duration"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.nio.ShortBuffer.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.WritableRaster.setDataElements(int, int, int, int, Object)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "Object"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.jar.Pack200.unpack(InputStream, JarOutputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "InputStream", 
            "JarOutputStream"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.format.DateTimeFormatter.parsedExcessDays()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.drainTo(Collection, int)": {
        "args": [
            "Collection", 
            "int"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.getGreen(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImageOp.getPropertyNames()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.hasPrimitives()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.CodeSigner.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GridBagLayout.lookupConstraints(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.spliterator(long[], int, int)": {
        "args": [
            "long[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.nio.file.attribute.BasicFileAttributes.lastModifiedTime()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.StampedLock.asWriteLock()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Desktop.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.removeNode()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException", 
            "UnsupportedOperationException", 
            "BackingStoreException"
        ], 
        "throws": [
            "BackingStoreException"
        ]
    }, 
    "java.awt.peer.ComponentPeer.setFont(Font)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Font"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FileInputStream.read(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.release(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLInput.readDouble()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.LinkedHashMap.keySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormat.ofCalendarField(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.withDayOfYear(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.stream.BaseStream.onClose(Runnable)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Runnable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertPath.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Point2D.distance(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Color.getRGBComponents(float[])": {
        "args": [
            "float[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousChannelGroup.provider()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DirectColorModel.getDataElement(int[], int)": {
        "args": [
            "int[]", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.Math.addExact(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.io.DataOutputStream.writeBytes(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.temporal.ChronoField.getBaseUnit()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ArrayBlockingQueue.offer(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.cert.CollectionCertStoreParameters.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.getMaximumFractionDigits()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.getFocusOwner()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.StampedLock.validate(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.unmodifiableList(List)": {
        "args": [
            "List"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.MemoryHandler.flush()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.Attributes.keySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.setThreadFactory(ThreadFactory)": {
        "args": [
            "ThreadFactory"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadLocalRandom.ints()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Point2D.distanceSq(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Inet4Address.isMCSiteLocal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Area.add(Area)": {
        "args": [
            "Area"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.event.MouseEvent.getButton()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.MonthDay.parse(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [
            "DateTimeParseException"
        ], 
        "throws": []
    }, 
    "java.awt.GraphicsConfiguration.createCompatibleVolatileImage(int, int, ImageCapabilities)": {
        "args": [
            "int", 
            "int", 
            "ImageCapabilities"
        ], 
        "@throws": [
            "AWTException"
        ], 
        "throws": [
            "AWTException"
        ]
    }, 
    "java.io.FilterReader.reset()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.accumulateAndGet(T, int, IntBinaryOperator)": {
        "args": [
            "T", 
            "int", 
            "IntBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URL.getProtocol()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.WindowAdapter.windowDeiconified(WindowEvent)": {
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.parallelSort(double[], int, int)": {
        "args": [
            "double[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.security.BasicPermission.implies(Permission)": {
        "args": [
            "Permission"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.MemoryImageSource.setFullBufferUpdates(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Date.setSeconds(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Comparator.reversed()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.LayoutManager2.maximumLayoutSize(Container)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.peekFirst()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.adjustInto(Temporal)": {
        "args": [
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.Calendar.set(int, int, int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.XMLFormatter.getTail(Handler)": {
        "args": [
            "Handler"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.createDesktopPeer(Desktop)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Desktop"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.util.ResourceBundle.getCandidateLocales(String, Locale)": {
        "args": [
            "String", 
            "Locale"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.GregorianCalendar.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Stack.search(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.defaultReadObject()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ClassNotFoundException", 
            "IOException", 
            "NotActiveException"
        ], 
        "throws": [
            "IOException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.awt.image.SampleModel.setPixels(int, int, int, int, double[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "double[]", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.EventQueue.peekEvent(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getCatalogs()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Toolkit.createDragSourceContextPeer(DragGestureEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DragGestureEvent"
        ], 
        "@throws": [], 
        "throws": [
            "InvalidDnDOperationException"
        ]
    }, 
    "java.time.chrono.ThaiBuddhistDate.plus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.getPort()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.reduceValuesToLong(long, ToLongFunction, long, LongBinaryOperator)": {
        "args": [
            "long", 
            "ToLongFunction", 
            "long", 
            "LongBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics2D.hit(Rectangle, Shape, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Rectangle", 
            "Shape", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.MultipleMaster.getDesignAxisNames()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataOutput.write(byte[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.Instant.now()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSource.getDragThreshold()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.MonthDay.of(Month, int)": {
        "args": [
            "Month", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.TreeMap.replace(K, V)": {
        "args": [
            "K", 
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.AffineTransformOp.getBounds2D(BufferedImage)": {
        "args": [
            "BufferedImage"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.with(TemporalField, long)": {
        "args": [
            "TemporalField", 
            "long"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.net.ServerSocket.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLOutput.writeBigDecimal(BigDecimal)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BigDecimal"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.TrayIcon.setToolTip(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.write(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.ArrayList.listIterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.UnknownFormatFlagsException.getFlags()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.deriveFont(Map)": {
        "args": [
            "Map"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.getWaitingThreads(ConditionObject)": {
        "args": [
            "ConditionObject"
        ], 
        "@throws": [
            "IllegalMonitorStateException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.GridBagLayout.getConstraints(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.ComponentAdapter.componentResized(ComponentEvent)": {
        "args": [
            "ComponentEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.NumberFormat.isParseIntegerOnly()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBuffer.getOffset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLXML.getSource(Class)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Class"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.URLConnection.getDefaultUseCaches()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyEditor.getValue()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Map.comparingByKey()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.nextLong()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InputMismatchException", 
            "NoSuchElementException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.image.Raster.getSampleModelTranslateY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.NavigableMap.lowerKey(K)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingDeque.offerFirst(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.cert.CertPathBuilder.getInstance(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NoSuchAlgorithmException"
        ], 
        "throws": [
            "NoSuchAlgorithmException"
        ]
    }, 
    "java.security.cert.TrustAnchor.getNameConstraints()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RenderedImage.getMinY()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.setMultiplier(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyPair.getPrivate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingDeque.poll(long, TimeUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.image.SampleModel.getPixel(int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Color.getComponents(ColorSpace, float[])": {
        "args": [
            "ColorSpace", 
            "float[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.getPixelSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.higherKey(K)": {
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.findColumn(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.interfaces.DSAParams.getP()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.setDecimalFormatSymbols(DecimalFormatSymbols)": {
        "args": [
            "DecimalFormatSymbols"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CharsetDecoder.replacement()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.ContentHandler.getContent(URLConnection)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "URLConnection"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.FloatBuffer.put(float)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "float"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.time.MonthDay.from(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.Dialog.isModal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.DayOfWeek.of(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.Selector.keys()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ClosedSelectorException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantLock.getOwner()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.Reader.skip(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.lockInterruptibly()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InterruptedException", 
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException", 
            "InterruptedException"
        ]
    }, 
    "java.text.DecimalFormatSymbols.getInstance(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Array.getLong(Object, int)": {
        "args": [
            "Object", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ]
    }, 
    "java.awt.Scrollbar.setPageIncrement(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyDescriptor.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalAdjusters.firstDayOfMonth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TimeZone.getAvailableIDs()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.enableInputMethods(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Scrollbar.getValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ThreadLocal.initialValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.LongFunction.apply(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RenderedImage.getMinTileX()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStoreSpi.engineLoad(LoadStoreParameter)": {
        "args": [
            "LoadStoreParameter"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IOException", 
            "NoSuchAlgorithmException", 
            "CertificateException"
        ], 
        "throws": [
            "IOException", 
            "NoSuchAlgorithmException", 
            "CertificateException"
        ]
    }, 
    "java.awt.image.ColorModel.getNumColorComponents()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BandedSampleModel.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.DisplayMode.getBitDepth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ManagementFactory.getMemoryManagerMXBeans()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendValue(TemporalField, int, int, SignStyle)": {
        "args": [
            "TemporalField", 
            "int", 
            "int", 
            "SignStyle"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.LocalTime.plus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.peekFirst()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Future.isCancelled()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsDifferentTableCorrelationNames()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Component.getAccessibleName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.solveCubic(double[], double[])": {
        "args": [
            "double[]", 
            "double[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Area.contains(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.Paper.getImageableX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.await()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.image.renderable.ParameterBlock.add(byte)": {
        "args": [
            "byte"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocketImpl.getTTL()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.PrintWriter.close()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.MonthDay.withDayOfMonth(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.Window.processWindowFocusEvent(WindowEvent)": {
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Date.toLocalDate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.readAllBytes(Path)": {
        "args": [
            "Path"
        ], 
        "@throws": [
            "IOException", 
            "OutOfMemoryError", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.spec.RSAPrivateKeySpec.getPrivateExponent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.GregorianCalendar.add(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.TextComponent.getSelectionEnd()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormat.format(Date)": {
        "args": [
            "Date"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataOutput.write(byte[], int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Window.setModalExclusionType(ModalExclusionType)": {
        "args": [
            "ModalExclusionType"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.GraphicsDevice.getConfigurations()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Throwable.getCause()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousChannelGroup.withThreadPool(ExecutorService)": {
        "args": [
            "ExecutorService"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.datatransfer.DataFlavor.getMimeType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.getP2()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Frame.setMaximizedBounds(Rectangle)": {
        "args": [
            "Rectangle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getString(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.cert.CertStore.getType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.HttpCookie.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Policy.getPermissions(ProtectionDomain)": {
        "args": [
            "ProtectionDomain"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalQueries.localTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.InetAddress.isReachable(NetworkInterface, int, int)": {
        "args": [
            "NetworkInterface", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.CallableStatement.setAsciiStream(String, InputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "InputStream"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.ScheduledThreadPoolExecutor.schedule(Callable, long, TimeUnit)": {
        "args": [
            "Callable", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "RejectedExecutionException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.contains(PathIterator, Rectangle2D)": {
        "args": [
            "PathIterator", 
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipEntry.getComment()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DecimalStyle.ofDefaultLocale()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Phaser.getUnarrivedParties()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneRulesProvider.getRules(String, boolean)": {
        "args": [
            "String", 
            "boolean"
        ], 
        "@throws": [
            "ZoneRulesException"
        ], 
        "throws": []
    }, 
    "java.net.URL.getPort()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Path.normalize()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadLocalRandom.nextLong()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.identity(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.getDouble(String, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "double"
        ], 
        "@throws": [
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.setLength(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.WritableRaster.setSample(int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.BorderLayout.getLayoutComponent(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.image.Raster.getPixels(int, int, int, int, float[])": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "float[]"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetTime.getLong(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.InterruptibleChannel.close()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.text.DecimalFormatSymbols.getInstance()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragGestureEvent.startDrag(Cursor, Transferable, DragSourceListener)": {
        "args": [
            "Cursor", 
            "Transferable", 
            "DragSourceListener"
        ], 
        "@throws": [
            "InvalidDnDOperationException"
        ], 
        "throws": [
            "InvalidDnDOperationException"
        ]
    }, 
    "java.awt.image.ImageFilter.setDimensions(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.hasNextInt()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.print.PrinterJob.print()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "PrinterException"
        ], 
        "throws": [
            "PrinterException"
        ]
    }, 
    "java.time.chrono.HijrahDate.now()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuilder.replace(int, int, String)": {
        "args": [
            "int", 
            "int", 
            "String"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.toEpochSecond()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerArray.decrementAndGet(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.yield()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Package.getImplementationVersion()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.autoCommitFailureClosesAllResultSets()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.temporal.WeekFields.of(DayOfWeek, int)": {
        "args": [
            "DayOfWeek", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.CheckboxMenuItem.setState(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.generatedKeyAlwaysReturned()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.MemoryImageSource.startProduction(ImageConsumer)": {
        "args": [
            "ImageConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isTitleCase(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getRowId(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.BufferedImageFilter.imageComplete(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ImagingOpException"
        ], 
        "throws": []
    }, 
    "java.util.Collection.contains(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Scrollbar.getCurrentAccessibleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ParameterMetaData.isSigned(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.file.attribute.BasicFileAttributes.isSymbolicLink()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AlgorithmParameterGeneratorSpi.engineInit(AlgorithmParameterSpec, SecureRandom)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "AlgorithmParameterSpec", 
            "SecureRandom"
        ], 
        "@throws": [
            "InvalidAlgorithmParameterException"
        ], 
        "throws": [
            "InvalidAlgorithmParameterException"
        ]
    }, 
    "java.awt.FontMetrics.getLineMetrics(String, Graphics)": {
        "args": [
            "String", 
            "Graphics"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicReference.getAndUpdate(UnaryOperator)": {
        "args": [
            "UnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorConvertOp.getRenderingHints()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.Temporal.minus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDateTime.range(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.nio.file.spi.FileSystemProvider.newFileSystem(Path, Map)": {
        "args": [
            "Path", 
            "Map"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IllegalArgumentException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.LocalDate.with(TemporalAdjuster)": {
        "args": [
            "TemporalAdjuster"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistEra.of(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.List.setEnabled(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.locale()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousFileChannel.truncate(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "NonWritableChannelException", 
            "ClosedChannelException", 
            "IllegalArgumentException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.CompletableFuture.acceptEither(CompletionStage, Consumer)": {
        "args": [
            "CompletionStage", 
            "Consumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.lowestOneBit(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.FocusListener.focusGained(FocusEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "FocusEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.CacheResponse.getHeaders()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.FontMetrics.getMaxAdvance()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RenderedImage.getTile(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Scrollbar.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ImageFilter.resendTopDownLeftRight(ImageProducer)": {
        "args": [
            "ImageProducer"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.net.InetAddress.isLinkLocalAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.IsoChronology.dateYearDay(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.EventQueue.getMostRecentEventTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SecureRandom.setSeed(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.System.lineSeparator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DecimalStyle.getNegativeSign()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsANSI92IntermediateSQL()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.MissingFormatWidthException.getFormatSpecifier()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsResultSetConcurrency(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.removeAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.event.AdjustmentListener.adjustmentValueChanged(AdjustmentEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "AdjustmentEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Format.parseObject(String, ParsePosition)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "ParsePosition"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.annotation.Annotation.hashCode()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.PrintJob.lastPageFirst()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.intValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.WatchService.poll()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ClosedWatchServiceException"
        ], 
        "throws": []
    }, 
    "java.nio.CharBuffer.hasArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.FieldPosition.getBeginIndex()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.abs(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.plus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.Instant.compareTo(Instant)": {
        "args": [
            "Instant"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.getFont()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.length()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.Chronology.date(int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.text.BreakIterator.setText(CharacterIterator)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CharacterIterator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.getCommonPoolParallelism()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuItem.enable(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.LongStream.mapToInt(LongToIntFunction)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "LongToIntFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.ioException()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.ItemEvent.getItemSelectable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.Certificate.writeReplace()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ObjectStreamException"
        ], 
        "throws": [
            "ObjectStreamException"
        ]
    }, 
    "java.lang.Short.toUnsignedLong(short)": {
        "args": [
            "short"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndAccumulate(T, int, IntBinaryOperator)": {
        "args": [
            "T", 
            "int", 
            "IntBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Arc2D.getX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RenderedImage.getProperty(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LongSummaryStatistics.accept(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.SocketImpl.supportsUrgentData()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.remove(InputMethodListener, InputMethodListener)": {
        "args": [
            "InputMethodListener", 
            "InputMethodListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.WeekFields.weekBasedYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Timer.purge()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.interrupted()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Dialog.isResizable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.elements()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsSubqueriesInIns()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Math.random()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SecureRandom.getAlgorithm()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Runtime.exec(String[], String[], File)": {
        "args": [
            "String[]", 
            "String[]", 
            "File"
        ], 
        "@throws": [
            "SecurityException", 
            "IOException", 
            "NullPointerException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.font.GlyphMetrics.isCombining()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collector.of(Supplier, BiConsumer, BinaryOperator, Characteristics[])": {
        "args": [
            "Supplier", 
            "BiConsumer", 
            "BinaryOperator", 
            "Characteristics[]"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.JobAttributes.set(JobAttributes)": {
        "args": [
            "JobAttributes"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragGestureEvent.getDragAction()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.getPixels(int, int, int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.TextArea.setColumns(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.CharBuffer.subSequence(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.Object.clone()": {
        "args": [
            ""
        ], 
        "@throws": [
            "CloneNotSupportedException"
        ], 
        "throws": [
            "CloneNotSupportedException"
        ]
    }, 
    "java.util.AbstractMap.getKey()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.CharBuffer.asReadOnlyBuffer()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.getAllStackTraces()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.descendingSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLException.setNextException(SQLException)": {
        "args": [
            "SQLException"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.WeakHashMap.putAll(Map)": {
        "args": [
            "Map"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Adjustable.getOrientation()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.IntUnaryOperator.andThen(IntUnaryOperator)": {
        "args": [
            "IntUnaryOperator"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.WritableRaster.createWritableTranslatedChild(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "RasterFormatException"
        ], 
        "throws": []
    }, 
    "java.net.Inet6Address.isAnyLocalAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Frame.getAccessibleContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.BufferPoolMXBean.getMemoryUsed()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.windowClosing(WindowEvent)": {
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DriverManager.setLogWriter(PrintWriter)": {
        "args": [
            "PrintWriter"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.Calendar.clear(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.acl.AclEntry.addPermission(Permission)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Permission"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.setFocusTraversalPolicy(FocusTraversalPolicy)": {
        "args": [
            "FocusTraversalPolicy"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Appendable.append(CharSequence)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CharSequence"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.file.attribute.UserPrincipalLookupService.lookupPrincipalByName(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "UserPrincipalNotFoundException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Integer.parseUnsignedInt(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.rmi.server.ObjID.write(ObjectOutput)": {
        "args": [
            "ObjectOutput"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.stream.LongStream.empty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.compareTo(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collection.removeIf(Predicate)": {
        "args": [
            "Predicate"
        ], 
        "@throws": [
            "NullPointerException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.lang.management.ThreadInfo.getLockedMonitors()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.toZonedDateTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Handler.publish(LogRecord)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "LogRecord"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.getAnonymousLogger(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "MissingResourceException"
        ], 
        "throws": []
    }, 
    "java.awt.Toolkit.setLockingKeyState(int, boolean)": {
        "args": [
            "int", 
            "boolean"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "HeadlessException"
        ], 
        "throws": [
            "UnsupportedOperationException"
        ]
    }, 
    "java.time.zone.ZoneOffsetTransitionRule.getDayOfMonthIndicator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.IdentityHashMap.replaceAll(BiFunction)": {
        "args": [
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.getDouble(String, double)": {
        "args": [
            "String", 
            "double"
        ], 
        "@throws": [
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractCollection.removeAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.text.NumberFormat.isGroupingUsed()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.MembershipKey.sourceAddress()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Optional.flatMap(Function)": {
        "args": [
            "Function"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Float.sum(float, float)": {
        "args": [
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalAccessor.getLong(TemporalField)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.SwitchPoint.invalidateAll(SwitchPoint[])": {
        "args": [
            "SwitchPoint[]"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.allProceduresAreCallable()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.text.NumberFormat.getCurrency()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.MinguoDate.minus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.ArrayDeque.removeFirst()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.security.Permission.newPermissionCollection()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.FloatBuffer.get(float[])": {
        "args": [
            "float[]"
        ], 
        "@throws": [
            "BufferUnderflowException"
        ], 
        "throws": []
    }, 
    "java.io.PrintStream.println(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.isQuiescent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.getPool()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.getUncaughtExceptionHandler()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SinglePixelPackedSampleModel.setSamples(int, int, int, int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Hashtable.computeIfPresent(K, BiFunction)": {
        "args": [
            "K", 
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.getKeyStore()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "KeyStoreException"
        ], 
        "throws": [
            "KeyStoreException"
        ]
    }, 
    "java.util.stream.StreamSupport.stream(Spliterator, boolean)": {
        "args": [
            "Spliterator", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.fill(float[], int, int, float)": {
        "args": [
            "float[]", 
            "int", 
            "int", 
            "float"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.lookup()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.MemoryImageSource.setAnimated(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DirectColorModel.getRed(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException", 
            "ClassCastException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.Collections.emptyMap()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBuffer.setElemFloat(int, int, float)": {
        "args": [
            "int", 
            "int", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.InputContext.dispose()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AlgorithmParametersSpi.engineGetEncoded()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.DataOutputStream.writeChars(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.spec.DSAPublicKeySpec.getQ()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509Certificate.getIssuerX500Principal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.thenCombineAsync(CompletionStage, BiFunction, Executor)": {
        "args": [
            "CompletionStage", 
            "BiFunction", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.BitSet.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.minusNanos(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.time.MonthDay.now(Clock)": {
        "args": [
            "Clock"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Clock.systemUTC()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.RSAPrivateCrtKeySpec.getPrimeExponentP()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.codePointCount(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.getCaretShapes(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextArea.insertText(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.rangeClosed(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getFocusTraversalKeysEnabled()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getGenericSuperclass()": {
        "args": [
            ""
        ], 
        "@throws": [
            "GenericSignatureFormatError", 
            "TypeNotPresentException", 
            "MalformedParameterizedTypeException"
        ], 
        "throws": []
    }, 
    "java.net.URLClassLoader.findClass(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "ClassNotFoundException", 
            "NullPointerException"
        ], 
        "throws": [
            "ClassNotFoundException"
        ]
    }, 
    "java.time.temporal.ChronoField.getFrom(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.HierarchyBoundsAdapter.ancestorResized(HierarchyEvent)": {
        "args": [
            "HierarchyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationDesc.getClassName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahDate.now(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsCatalogsInTableDefinitions()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Short.decode(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.awt.geom.Ellipse2D.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.binarySearch(long[], int, int, long)": {
        "args": [
            "long[]", 
            "int", 
            "int", 
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.AWTKeyStroke.getAWTKeyStroke(Character, int)": {
        "args": [
            "Character", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.beans.PropertyChangeEvent.getPropagationId()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.ShapeGraphicAttribute.equals(ShapeGraphicAttribute)": {
        "args": [
            "ShapeGraphicAttribute"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.remove(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.nullPlusNonNullIsNull()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.MenuComponent.isFocusTraversable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.decrementExact(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.Label.addNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Date.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.getPriority()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.FieldPosition.setEndIndex(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.hashCode(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousFileChannel.tryLock(long, long, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "long", 
            "boolean"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ClosedChannelException", 
            "OverlappingFileLockException", 
            "NonReadableChannelException", 
            "NonWritableChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.BlockingDeque.add(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "IllegalStateException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.file.SecureDirectoryStream.getFileAttributeView(Class)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.setTrafficClass(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.time.YearMonth.get(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.setForeground(Color)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Color"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistDate.now(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.getAccessibleChild(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Boolean.getBoolean(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Point2D.clone()": {
        "args": [
            ""
        ], 
        "@throws": [
            "OutOfMemoryError"
        ], 
        "throws": []
    }, 
    "java.awt.TextField.preferredSize(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.FieldPosition.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Timestamp.getTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.UnknownFormatFlagsException.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.DoubleFunction.apply(double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.plus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ByteLookupTable.getTable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.peer.DropTargetContextPeer.getDropTarget()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.NetworkInterface.getInetAddresses()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Button.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ClassLoader.defineClass(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ClassFormatError", 
            "IndexOutOfBoundsException", 
            "SecurityException"
        ], 
        "throws": [
            "ClassFormatError"
        ]
    }, 
    "java.util.SimpleTimeZone.useDaylightTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.processKeyEvent(KeyEvent)": {
        "args": [
            "KeyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Date.getDay()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.headMap(K, boolean)": {
        "args": [
            "K", 
            "boolean"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.PrintJob.getGraphics()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Scrollbar.getListeners(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.security.Identity.toString(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.set(long, int)": {
        "args": [
            "long", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.indexOf(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.setMaximumPoolSize(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Spliterator.forEachRemaining(LongConsumer)": {
        "args": [
            "LongConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SelectableChannel.isBlocking()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsConfiguration.getColorModel(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.minusMonths(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.fill(char[], int, int, char)": {
        "args": [
            "char[]", 
            "int", 
            "int", 
            "char"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Graphics.hitClip(int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.LongUnaryOperator.applyAsLong(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ResourceBundle.containsKey(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.TextField.getColumns()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Object.notify()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalMonitorStateException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceEvent.getLocation()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.FilteredImageSource.addConsumer(ImageConsumer)": {
        "args": [
            "ImageConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.max(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Dialog.show()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.FloatBuffer.compact()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ScheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.quadrantRotate(int, double, double)": {
        "args": [
            "int", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsDevice.getBestConfiguration(GraphicsConfigTemplate)": {
        "args": [
            "GraphicsConfigTemplate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URI.resolve(URI)": {
        "args": [
            "URI"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Point2D.distance(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.clone()": {
        "args": [
            ""
        ], 
        "@throws": [
            "OutOfMemoryError"
        ], 
        "throws": []
    }, 
    "java.lang.Short.reverseBytes(short)": {
        "args": [
            "short"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.UnresolvedPermission.implies(Permission)": {
        "args": [
            "Permission"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.Pack200.pack(JarInputStream, OutputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "JarInputStream", 
            "OutputStream"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.CropImageFilter.setProperties(Hashtable)": {
        "args": [
            "Hashtable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.LongStream.flatMap(LongFunction)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "LongFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CheckboxMenuItem.getAccessibleRole()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Ellipse2D.contains(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.getDefault(Category)": {
        "args": [
            "Category"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ArrayBlockingQueue.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.applyToEither(CompletionStage, Function)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CompletionStage", 
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.InputMethodListener.caretPositionChanged(InputMethodEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "InputMethodEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.PrintJob.getPageResolution()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Period.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRL.getSignature()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getHoldability()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.text.DecimalFormatSymbols.getGroupingSeparator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Event.translate(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.setLanguageTag(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllformedLocaleException"
        ], 
        "throws": []
    }, 
    "java.beans.PropertyChangeEvent.getPropertyName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.isFocusable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.getAlpha(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.FileChannel.write(ByteBuffer[], int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.geom.Path2D.contains(PathIterator, double, double, double, double)": {
        "args": [
            "PathIterator", 
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateBlob(int, Blob)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Blob"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.file.attribute.UserDefinedFileAttributeView.size(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "ArithmeticException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.zip.ZipEntry.setMethod(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.IdentityScope.getIdentity(Principal)": {
        "args": [
            "Principal"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.preferredSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.minus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.nio.file.FileSystem.isOpen()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneRules.getOffset(LocalDateTime)": {
        "args": [
            "LocalDateTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getProcedureTerm()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.stream.IntStream.count()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetContext.setTargetActions(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertPathValidatorException.getIndex()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.adapt(Callable)": {
        "args": [
            "Callable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.replaceFirst(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "PatternSyntaxException"
        ], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.put(String, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.KeyStore.newInstance(String, Provider, ProtectionParameter)": {
        "args": [
            "String", 
            "Provider", 
            "ProtectionParameter"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Map.hashCode()": {
        "Abstract": [
            "Y", 
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.JarURLConnection.getMainAttributes()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.Socket.isBound()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.AppletInitializer.activate(Applet)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Applet"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDateTime.minus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.logging.StreamHandler.setOutputStream(OutputStream)": {
        "args": [
            "OutputStream"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.awt.TrayIcon.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509Certificate.getBasicConstraints()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseDate.plus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.BorderLayout.getLayoutComponent(Container, Object)": {
        "args": [
            "Container", 
            "Object"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.RescaleOp.getBounds2D(Raster)": {
        "args": [
            "Raster"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.ofPattern(String, Locale)": {
        "args": [
            "String", 
            "Locale"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ReplicateScaleFilter.setPixels(int, int, int, int, ColorModel, byte[], int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "ColorModel", 
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CharsetDecoder.detectedCharset()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsCoreSQLGrammar()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.font.TextLayout.getCaretShapes(int, Rectangle2D)": {
        "args": [
            "int", 
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ServiceLoader.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.FileTime.from(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Map.compute(K, BiFunction)": {
        "args": [
            "K", 
            "BiFunction"
        ], 
        "@throws": [
            "NullPointerException", 
            "UnsupportedOperationException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.util.stream.Collectors.summarizingDouble(ToDoubleFunction)": {
        "args": [
            "ToDoubleFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.NumericShaper.getContextualShaper(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.Math.scalb(float, int)": {
        "args": [
            "float", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ClassLoader.findLoadedClass(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.MessageDigestSpi.engineDigest()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.Matcher.replaceFirst(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseDate.plus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.SimpleBeanInfo.getPropertyDescriptors()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Boolean.logicalOr(boolean, boolean)": {
        "args": [
            "boolean", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.LockSupport.parkUntil(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.CookieManager.put(URI, Map)": {
        "args": [
            "URI", 
            "Map"
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Base64.wrap(OutputStream)": {
        "args": [
            "OutputStream"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.divideToIntegralValue(BigDecimal, MathContext)": {
        "args": [
            "BigDecimal", 
            "MathContext"
        ], 
        "@throws": [
            "ArithmeticException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.Graphics2D.getBackground()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.setDefault(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Adjustable.setMinimum(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.MessageDigestSpi.engineDigest(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DigestException"
        ], 
        "throws": [
            "DigestException"
        ]
    }, 
    "java.awt.AWTEventMulticaster.add(MouseMotionListener, MouseMotionListener)": {
        "args": [
            "MouseMotionListener", 
            "MouseMotionListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BandedSampleModel.getSamples(int, int, int, int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ResourceBundle.getBaseBundleName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongArray.updateAndGet(int, LongUnaryOperator)": {
        "args": [
            "int", 
            "LongUnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPane.getHScrollbarHeight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.dumpStack()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataInputStream.readShort()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.AbstractList.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyDescriptor.getPropertyEditorClass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Level.getLocalizedName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLong.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsStoredFunctionsUsingCallSyntax()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.cert.PKIXParameters.setTrustAnchors(Set)": {
        "args": [
            "Set"
        ], 
        "@throws": [
            "InvalidAlgorithmParameterException", 
            "NullPointerException", 
            "ClassCastException"
        ], 
        "throws": [
            "InvalidAlgorithmParameterException"
        ]
    }, 
    "java.lang.String.valueOf(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Menu.addSeparator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.WindowEvent.getNewState()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StackTraceElement.isNativeMethod()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPane.getScrollPosition()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.StrictMath.rint(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.getUseParentHandlers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Method.toGenericString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseChronology.date(Era, int, int, int)": {
        "args": [
            "Era", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.security.CodeSigner.getSignerCertPath()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.applyShape(Region)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Region"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Authenticator.requestPasswordAuthentication(String, InetAddress, int, String, String, String, URL, RequestorType)": {
        "args": [
            "String", 
            "InetAddress", 
            "int", 
            "String", 
            "String", 
            "String", 
            "URL", 
            "RequestorType"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetDropEvent.getCurrentDataFlavors()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.setFocusable(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.AbstractChronology.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.FloatBuffer.allocate(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.Duration.toMinutes()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SortedMap.entrySet()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.CharArrayWriter.append(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.prepareImage(Image, int, int, ImageObserver)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Image", 
            "int", 
            "int", 
            "ImageObserver"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.intersects(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetAdapter.dragOver(DropTargetDragEvent)": {
        "args": [
            "DropTargetDragEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.FileTime.toInstant()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.create(int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getBlob(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.StringBuffer.append(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.NodeChangeEvent.getChild()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.SocketImpl.shutdownInput()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.math.BigInteger.toByteArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongArray.getAndDecrement(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ProcessBuilder.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.getGeneratedKeys()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.CopyOnWriteArraySet.containsAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.TexturePaint.getAnchorRect()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Polygon.translate(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsCatalogsInIndexDefinitions()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Color.getColor(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TrayIcon.getSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.StringTokenizer.hasMoreElements()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.forEach(Consumer)": {
        "args": [
            "Consumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.DoubleSummaryStatistics.getMin()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.TrayIconPeer.updateImage()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.reduceKeys(long, Function, BiFunction)": {
        "args": [
            "long", 
            "Function", 
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ContextualRenderedImageFactory.getPropertyNames()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Dimension2D.setSize(double, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectStreamField.isUnshared()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.signal()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalMonitorStateException"
        ], 
        "throws": []
    }, 
    "java.lang.instrument.ClassFileTransformer.transform(ClassLoader, String, Class, ProtectionDomain, byte[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ClassLoader", 
            "String", 
            "Class", 
            "ProtectionDomain", 
            "byte[]"
        ], 
        "@throws": [
            "IllegalClassFormatException"
        ], 
        "throws": [
            "IllegalClassFormatException"
        ]
    }, 
    "java.rmi.activation.Activatable.exportObject(Remote, ActivationID, int, RMIClientSocketFactory, RMIServerSocketFactory)": {
        "args": [
            "Remote", 
            "ActivationID", 
            "int", 
            "RMIClientSocketFactory", 
            "RMIServerSocketFactory"
        ], 
        "@throws": [
            "RemoteException", 
            "UnsupportedOperationException"
        ], 
        "throws": [
            "RemoteException"
        ]
    }, 
    "java.awt.geom.Rectangle2D.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.WindowPeer.updateIconImages()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.DelayQueue.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.IdentityHashMap.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentSampleModel.getDataElements(int, int, Object, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "Object", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.time.Month.minLength()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingQueue.put(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "InterruptedException", 
            "NullPointerException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.lang.reflect.Field.toGenericString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendZoneText(TextStyle)": {
        "args": [
            "TextStyle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TimerTask.cancel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.getHeight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ref.ReferenceQueue.remove(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "InterruptedException"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "InterruptedException"
        ]
    }, 
    "java.lang.Class.isEnum()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.dispose()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormatSymbols.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getBackground()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Driver.acceptsURL(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.font.OpenType.getFontTable(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuContainer.postEvent(Event)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Event"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistChronology.eras()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Button.getMinimumAccessibleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.isTerminated()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.setComponentZOrder(Component, int)": {
        "args": [
            "Component", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "IllegalArgumentException", 
            "IllegalArgumentException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.ref.ReferenceQueue.poll()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.color.ICC_Profile.getInstance(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException", 
            "IllegalArgumentException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.beans.BeanInfo.getDefaultEventIndex()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistChronology.localDateTime(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.hasTileWriters()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderContext.concetenateTransform(AffineTransform)": {
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertificateRevokedException.getExtensions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.LongBuffer.put(long[])": {
        "args": [
            "long[]"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setObject(int, Object, SQLType)": {
        "args": [
            "int", 
            "Object", 
            "SQLType"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.Path2D.intersects(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.HierarchyBoundsListener.ancestorResized(HierarchyEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "HierarchyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.getActualMinimum(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahChronology.date(Era, int, int, int)": {
        "args": [
            "Era", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.time.Instant.plus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.focusPreviousComponent(Component)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.createGlyphVector(FontRenderContext, int[])": {
        "args": [
            "FontRenderContext", 
            "int[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Point2D.distanceSq(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.isEnabled()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.hasContended()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextHitInfo.trailing(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.pollLast()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ClassLoader.findLibrary(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Cursor.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.elements()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.executeLargeUpdate(String, int[])": {
        "args": [
            "String", 
            "int[]"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException", 
            "SQLTimeoutException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.BlockingQueue.contains(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.Year.now(Clock)": {
        "args": [
            "Clock"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyEditorSupport.isPaintable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.getKeyEventPostProcessors()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Month.of(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.sql.CallableStatement.registerOutParameter(String, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Button.getAccessibleName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.hasQueuedSubmissions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.InputMethodEvent.getCommittedCharacterCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.lastIndexOf(Object, int)": {
        "args": [
            "Object", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.spi.CalendarNameProvider.getDisplayNames(String, int, int, Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int", 
            "int", 
            "Locale"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Collections.synchronizedMap(Map)": {
        "args": [
            "Map"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GridLayout.getRows()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Area.getBounds2D()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.lastElement()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.net.URL.openConnection(Proxy)": {
        "args": [
            "Proxy"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException", 
            "IllegalArgumentException", 
            "UnsupportedOperationException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.Clob.setCharacterStream(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.logging.Logger.getParent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Readable.read(CharBuffer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CharBuffer"
        ], 
        "@throws": [
            "IOException", 
            "NullPointerException", 
            "ReadOnlyBufferException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.TimeZone.getTimeZone(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Spliterator.getExactSizeIfKnown()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.KeyboardFocusManagerPeer.getCurrentFocusOwner()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.minimumSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.FileChannel.position()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.charset.UnmappableCharacterException.getInputLength()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Color.getAlpha()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeMap.headMap(K, boolean)": {
        "args": [
            "K", 
            "boolean"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ChronoPeriod.isZero()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.FocusEvent.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.BitSet.or(BitSet)": {
        "args": [
            "BitSet"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.BufferedInputStream.read()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.Socket.getReceiveBufferSize()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.io.ObjectInputStream.read()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.text.MessageFormat.format(String, Object[])": {
        "args": [
            "String", 
            "Object[]"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.Phaser.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CharsetEncoder.encode(CharBuffer)": {
        "args": [
            "CharBuffer"
        ], 
        "@throws": [
            "IllegalStateException", 
            "MalformedInputException", 
            "UnmappableCharacterException"
        ], 
        "throws": [
            "CharacterCodingException"
        ]
    }, 
    "java.security.cert.Certificate.toString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.ObjID.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertSelector.match(Certificate)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Certificate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Path.iterator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Deflater.finished()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.isDynamicLayoutActive()": {
        "args": [
            ""
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.awt.image.RescaleOp.getPoint2D(Point2D, Point2D)": {
        "args": [
            "Point2D", 
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicMarkableReference.get(boolean[])": {
        "args": [
            "boolean[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Formatter.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.color.ICC_Profile.getInstance(InputStream)": {
        "args": [
            "InputStream"
        ], 
        "@throws": [
            "IOException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.chrono.IsoChronology.getCalendarType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.getCertificate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.addFocusListener(FocusListener)": {
        "args": [
            "FocusListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.FloatBuffer.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.NavigableMap.lastEntry()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RenderedImage.getHeight()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.CharBuffer.allocate(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.event.HierarchyEvent.getChanged()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.Buffer.arrayOffset()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ReadOnlyBufferException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.Calendar.isLenient()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.accept(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setNClob(String, Reader, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Reader", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.ByteBuffer.put(byte)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "byte"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.util.zip.ZipOutputStream.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ZipException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.ImageFilter.imageComplete(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.DoubleBinaryOperator.applyAsDouble(double, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.BitSet.set(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.BorderLayout.minimumLayoutSize(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.IDN.toUnicode(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.getFirstDayOfWeek()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getDeclaredMethod(String, Class[])": {
        "args": [
            "String", 
            "Class[]"
        ], 
        "@throws": [
            "NoSuchMethodException", 
            "NullPointerException", 
            "SecurityException"
        ], 
        "throws": [
            "NoSuchMethodException", 
            "SecurityException"
        ]
    }, 
    "java.awt.MenuComponent.selectAllAccessibleSelection()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.PixelGrabber.imageComplete(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.withYear(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.security.AllPermission.implies(Permission)": {
        "args": [
            "Permission"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.LongBuffer.arrayOffset()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ReadOnlyBufferException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.time.Duration.plusMillis(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadLocalRandom.nextDouble(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.event.MouseAdapter.mouseWheelMoved(MouseWheelEvent)": {
        "args": [
            "MouseWheelEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.DesktopPeer.isSupported(Action)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Action"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.toArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.Manifest.getEntries()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DirectColorModel.getRGB(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.add(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.getDayOfMonth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.with(TemporalField, long)": {
        "args": [
            "TemporalField", 
            "long"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.getMonetaryDecimalSeparator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Double.compare(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyEditorSupport.setAsText(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": [
            "IllegalArgumentException"
        ]
    }, 
    "java.net.Authenticator.getRequestingHost()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CoderResult.isError()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.NavigableSet.subSet(E, E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E", 
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.writeUnshared(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "NotSerializableException", 
            "InvalidClassException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Collections.synchronizedNavigableMap(NavigableMap)": {
        "args": [
            "NavigableMap"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.MatchResult.start(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalStateException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.System.clearProperty(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.String.concat(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyChangeSupport.firePropertyChange(String, Object, Object)": {
        "args": [
            "String", 
            "Object", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.LinearGradientPaint.createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints)": {
        "args": [
            "ColorModel", 
            "Rectangle", 
            "Rectangle2D", 
            "AffineTransform", 
            "RenderingHints"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.spi.FileSystemProvider.newInputStream(Path, OpenOption[])": {
        "args": [
            "Path", 
            "OpenOption[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.HttpURLConnection.getResponseCode()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.ZonedDateTime.get(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.DelayQueue.poll()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.AnnotatedTypeVariable.getAnnotatedBounds()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Period.getMonths()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.plusDays(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getSQLStateType()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.AWTEventMulticaster.windowActivated(WindowEvent)": {
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.toEngineeringString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataOutput.writeShort(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.text.DateFormatSymbols.getShortWeekdays()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getBinaryStream(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.URLConnection.getContentEncoding()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.codePointBefore(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ImageConsumer.setPixels(int, int, int, int, ColorModel, byte[], int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "ColorModel", 
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.DayOfWeek.range(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.awt.GraphicsConfigTemplate.getBestConfiguration(GraphicsConfiguration[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "GraphicsConfiguration[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Choice.addNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadLocalRandom.ints(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.datatransfer.SystemFlavorMap.getFlavorsForNative(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetDropEvent.getSourceActions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ClassLoader.findResource(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.add(FocusListener, FocusListener)": {
        "args": [
            "FocusListener", 
            "FocusListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Map.computeIfPresent(K, BiFunction)": {
        "args": [
            "K", 
            "BiFunction"
        ], 
        "@throws": [
            "NullPointerException", 
            "UnsupportedOperationException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDate.ofYearDay(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.lang.StringBuffer.insert(int, char[])": {
        "args": [
            "int", 
            "char[]"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.stream.StreamSupport.longStream(Supplier, int, boolean)": {
        "args": [
            "Supplier", 
            "int", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.keyTyped(KeyEvent)": {
        "args": [
            "KeyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.prepareStatement(String, String[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String[]"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.ResultSetMetaData.getCatalogName(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Integer.shortValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Authenticator.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.getHoldability()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.Period.ofYears(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.findStatic(Class, String, MethodType)": {
        "args": [
            "Class", 
            "String", 
            "MethodType"
        ], 
        "@throws": [
            "NoSuchMethodException", 
            "IllegalAccessException", 
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": [
            "NoSuchMethodException", 
            "IllegalAccessException"
        ]
    }, 
    "java.io.PipedInputStream.read(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.ImageObserver.imageUpdate(Image, int, int, int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Image", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.toLocalTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.SystemTray.getSystemTray()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "HeadlessException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.MenuComponent.setLocation(Point)": {
        "args": [
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.copyOfRange(boolean[], int, int)": {
        "args": [
            "boolean[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Vector.spliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ArrayBlockingQueue.take()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.AWTEventMulticaster.windowDeiconified(WindowEvent)": {
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.MemoryImageSource.newPixels(int[], ColorModel, int, int)": {
        "args": [
            "int[]", 
            "ColorModel", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.CharSequence.length()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getObject(String, Map)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Map"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.spec.ECFieldFp.getFieldSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.RoundRectangle2D.setRoundRect(RoundRectangle2D)": {
        "args": [
            "RoundRectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextComponent.getAtIndex(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.Chronology.dateNow(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Array.setBoolean(Object, int, boolean)": {
        "args": [
            "Object", 
            "int", 
            "boolean"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ]
    }, 
    "java.awt.Window.setShape(Shape)": {
        "args": [
            "Shape"
        ], 
        "@throws": [
            "IllegalComponentStateException", 
            "IllegalComponentStateException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.AbstractCollection.size()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Constructor.getAnnotatedReceiverType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyFactory.generatePublic(KeySpec)": {
        "args": [
            "KeySpec"
        ], 
        "@throws": [
            "InvalidKeySpecException"
        ], 
        "throws": [
            "InvalidKeySpecException"
        ]
    }, 
    "java.awt.MenuItem.getAccessibleName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.AffineTransformOp.getInterpolationType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RMIClassLoaderSpi.loadClass(String, String, ClassLoader)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String", 
            "ClassLoader"
        ], 
        "@throws": [
            "MalformedURLException", 
            "ClassNotFoundException"
        ], 
        "throws": [
            "MalformedURLException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.util.logging.Logger.warning(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ResourceBundle.getKeys()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Comparator.nullsFirst(Comparator)": {
        "args": [
            "Comparator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setByte(int, byte)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "byte"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.AffineTransform.concatenate(AffineTransform)": {
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.MultiPixelPackedSampleModel.getSampleSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.revealDirect(MethodHandle)": {
        "args": [
            "MethodHandle"
        ], 
        "@throws": [
            "SecurityException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.net.SocketImpl.getInputStream()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.applet.Applet.isValidateRoot()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.createCompatibleSampleModel(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.MouseDragGestureRecognizer.mouseClicked(MouseEvent)": {
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Set.add(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.TimeUnit.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextHitInfo.getInsertionIndex()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SocketChannel.socket()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneRules.getTransitionRules()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.SystemFlavorMap.encodeDataFlavor(DataFlavor)": {
        "args": [
            "DataFlavor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.BooleanSupplier.getAsBoolean()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ConvolveOp.filter(BufferedImage, BufferedImage)": {
        "args": [
            "BufferedImage", 
            "BufferedImage"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "ImagingOpException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDate.of(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImage.createScaledRendering(int, int, RenderingHints)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "RenderingHints"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.BitSet.valueOf(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyFactory.getProvider()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.MemoryHandler.isLoggable(LogRecord)": {
        "args": [
            "LogRecord"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CharsetEncoder.implOnUnmappableCharacter(CodingErrorAction)": {
        "args": [
            "CodingErrorAction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.createVolatileImage(int, int, ImageCapabilities)": {
        "args": [
            "int", 
            "int", 
            "ImageCapabilities"
        ], 
        "@throws": [
            "AWTException"
        ], 
        "throws": [
            "AWTException"
        ]
    }, 
    "java.time.temporal.ValueRange.isIntValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.removeWindowFocusListener(WindowFocusListener)": {
        "args": [
            "WindowFocusListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.System.getProperty(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.stream.Collectors.groupingBy(Function)": {
        "args": [
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.CharSequence.chars()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.LongBuffer.compact()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.parallelSort(double[])": {
        "args": [
            "double[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantLock.lock()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLInput.readShort()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Dictionary.keys()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.createMenu(Menu)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Menu"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.util.BitSet.stream()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Panel.getAccessibleContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Inet6Address.isLoopbackAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.InputMethodEvent.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.unreflectGetter(Field)": {
        "args": [
            "Field"
        ], 
        "@throws": [
            "IllegalAccessException", 
            "NullPointerException"
        ], 
        "throws": [
            "IllegalAccessException"
        ]
    }, 
    "java.awt.TextField.removeActionListener(ActionListener)": {
        "args": [
            "ActionListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Array.getDouble(Object, int)": {
        "args": [
            "Object", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ]
    }, 
    "java.lang.SecurityManager.inClassLoader()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.getSampleDouble(int, int, int, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.ListResourceBundle.getKeys()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.DeflaterInputStream.available()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.file.Path.toFile()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.fill(short[], short)": {
        "args": [
            "short[]", 
            "short"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.getInt(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.AbstractList.addAll(int, Collection)": {
        "args": [
            "int", 
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.net.DatagramSocket.isClosed()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.FramePeer.emulateActivation(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.with(TemporalField, long)": {
        "args": [
            "TemporalField", 
            "long"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.font.GlyphMetrics.getBounds2D()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.CacheResponse.getBody()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.Timestamp.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.isRepresentationClassInputStream()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TrayIcon.getToolTip()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPaneAdjustable.getMaximum()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Map.merge(K, V, BiFunction)": {
        "args": [
            "K", 
            "V", 
            "BiFunction"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.DayOfWeek.plus(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.DelayQueue.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.SocketImpl.create(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Scanner.hasNextBigInteger()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.Executors.unconfigurableExecutorService(ExecutorService)": {
        "args": [
            "ExecutorService"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.rotate(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.BufferedInputStream.mark(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuBar.getShortcutMenuItem(MenuShortcut)": {
        "args": [
            "MenuShortcut"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.DefaultKeyboardFocusManager.processKeyEvent(Component, KeyEvent)": {
        "args": [
            "Component", 
            "KeyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.BitSet.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getDeclaredConstructor(Class[])": {
        "args": [
            "Class[]"
        ], 
        "@throws": [
            "NoSuchMethodException", 
            "SecurityException"
        ], 
        "throws": [
            "NoSuchMethodException", 
            "SecurityException"
        ]
    }, 
    "java.awt.geom.QuadCurve2D.getPathIterator(AffineTransform)": {
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.get(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Set.isEmpty()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramPacket.setData(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.SecureClassLoader.defineClass(String, ByteBuffer, CodeSource)": {
        "args": [
            "String", 
            "ByteBuffer", 
            "CodeSource"
        ], 
        "@throws": [
            "ClassFormatError", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.Date.compareTo(Date)": {
        "args": [
            "Date"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.PageAttributes.set(PageAttributes)": {
        "args": [
            "PageAttributes"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ExecutorService.submit(Runnable)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Runnable"
        ], 
        "@throws": [
            "RejectedExecutionException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.GridBagLayout.location(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.releaseShared(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.parallelSort(int[])": {
        "args": [
            "int[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.getFilePointer()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.AbstractList.listIterator(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.stream(long[])": {
        "args": [
            "long[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.MulticastSocket.getNetworkInterface()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.security.UnresolvedPermission.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AccessController.doPrivileged(PrivilegedAction, AccessControlContext, Permission[])": {
        "args": [
            "PrivilegedAction", 
            "AccessControlContext", 
            "Permission[]"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.management.MemoryUsage.from(CompositeData)": {
        "args": [
            "CompositeData"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.image.RescaleOp.getBounds2D(BufferedImage)": {
        "args": [
            "BufferedImage"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.PrintJob.finalize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayDeque.offer(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.temporal.TemporalUnit.getDuration()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SinglePixelPackedSampleModel.getSampleSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.WatchKey.reset()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.drawBytes(byte[], int, int, int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.Collections.checkedSet(Set, Class)": {
        "args": [
            "Set", 
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.entering(String, String, Object)": {
        "args": [
            "String", 
            "String", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.addExact(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.Container.addPropertyChangeListener(String, PropertyChangeListener)": {
        "args": [
            "String", 
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.Channels.newChannel(OutputStream)": {
        "args": [
            "OutputStream"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Signature.setParameter(AlgorithmParameterSpec)": {
        "args": [
            "AlgorithmParameterSpec"
        ], 
        "@throws": [
            "InvalidAlgorithmParameterException"
        ], 
        "throws": [
            "InvalidAlgorithmParameterException"
        ]
    }, 
    "java.util.logging.LoggingMXBean.setLoggerLevel(String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.logging.LogRecord.setSourceClassName(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.getLineMetrics(String, int, int, FontRenderContext)": {
        "args": [
            "String", 
            "int", 
            "int", 
            "FontRenderContext"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.DatagramChannel.isConnected()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.arrayElementGetter(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IllegalArgumentException"
        ]
    }, 
    "java.awt.image.IndexColorModel.isValid()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.wrap(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.compare(char, char)": {
        "args": [
            "char", 
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Frame.getMenuBar()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.getSamples(int, int, int, int, int, float[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "float[]", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDateTime.plusMonths(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.lang.Boolean.logicalAnd(boolean, boolean)": {
        "args": [
            "boolean", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.now()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.getAccessibleStateSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.MulticastSocket.setTimeToLive(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.Month.firstDayOfYear(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.PriorityBlockingQueue.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.removeLastOccurrence(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.digit(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.of(LocalTime, ZoneOffset)": {
        "args": [
            "LocalTime", 
            "ZoneOffset"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.transform(AffineTransform)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoPeriod.toString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEvent.setSource(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Paint.createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ColorModel", 
            "Rectangle", 
            "Rectangle2D", 
            "AffineTransform", 
            "RenderingHints"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentSampleModel.getSample(int, int, int, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.annotation.Repeatable.value()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.InflaterInputStream.read()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.PreparedStatement.setClob(int, Reader)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Reader"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.LocalDate.getChronology()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.minusDays(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.Date.getDate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.addHierarchyBoundsListener(HierarchyBoundsListener)": {
        "args": [
            "HierarchyBoundsListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsConfigTemplate.isGraphicsConfigSupported(GraphicsConfiguration)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "GraphicsConfiguration"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.hasNextByte()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.invokeAll(ForkJoinTask, ForkJoinTask)": {
        "args": [
            "ForkJoinTask", 
            "ForkJoinTask"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.thenApply(Function)": {
        "args": [
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Package.getAnnotations()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.FlatteningPathIterator.currentSegment(float[])": {
        "args": [
            "float[]"
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.util.Calendar.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.withResolverStyle(ResolverStyle)": {
        "args": [
            "ResolverStyle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.readUnsignedShort()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.ResultSet.isClosed()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.file.Files.copy(Path, OutputStream)": {
        "args": [
            "Path", 
            "OutputStream"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.beans.PropertyEditor.getJavaInitializationString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Double.longBitsToDouble(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.getWaitQueueLength(ConditionObject)": {
        "args": [
            "ConditionObject"
        ], 
        "@throws": [
            "IllegalMonitorStateException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Choice.getAccessibleContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.FileChannel.size()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.DatabaseMetaData.isCatalogAtStart()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.file.attribute.AclEntry.setPrincipal(UserPrincipal)": {
        "args": [
            "UserPrincipal"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.putLong(String, long)": {
        "args": [
            "String", 
            "long"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.net.InetAddress.isMCSiteLocal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AlphaComposite.derive(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.parse(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [
            "DateTimeParseException"
        ], 
        "throws": []
    }, 
    "java.security.DigestOutputStream.setMessageDigest(MessageDigest)": {
        "args": [
            "MessageDigest"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.RecursiveAction.exec()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahDate.plus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.MulticastSocket.send(DatagramPacket, byte)": {
        "args": [
            "DatagramPacket", 
            "byte"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.CharBuffer.wrap(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Objects.requireNonNull(T)": {
        "args": [
            "T"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.acl.Owner.addOwner(Principal, Principal)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Principal", 
            "Principal"
        ], 
        "@throws": [
            "NotOwnerException"
        ], 
        "throws": [
            "NotOwnerException"
        ]
    }, 
    "java.util.stream.DoubleStream.reduce(double, DoubleBinaryOperator)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double", 
            "DoubleBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.annotation.IncompleteAnnotationException.annotationType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isUnicodeIdentifierPart(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TimeZone.toZoneId()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setTime(int, Time)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Time"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.OptionalInt.orElseGet(IntSupplier)": {
        "args": [
            "IntSupplier"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.equals(TextLayout)": {
        "args": [
            "TextLayout"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.isInstance(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.IntBuffer.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.getAccessibleComponent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.getRoundingMode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.setSize(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintWriter.format(String, Object[])": {
        "args": [
            "String", 
            "Object[]"
        ], 
        "@throws": [
            "IllegalFormatException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Canvas.paint(Graphics)": {
        "args": [
            "Graphics"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.remove(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.datatransfer.ClipboardOwner.lostOwnership(Clipboard, Transferable)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Clipboard", 
            "Transferable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.SerializedLambda.getImplMethodSignature()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ContainerOrderFocusTraversalPolicy.getComponentBefore(Container, Component)": {
        "args": [
            "Container", 
            "Component"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.equals(byte[], byte[])": {
        "args": [
            "byte[]", 
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.DialogPeer.blockWindows(List)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "List"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Authenticator.getRequestingProtocol()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.getIssuerAsString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.listIterator(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.NavigableMap.headMap(K)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.io.PrintWriter.setError()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalUnit.isTimeBased()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Enum.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkMulticast(InetAddress)": {
        "args": [
            "InetAddress"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getProcedureColumns(String, String, String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String", 
            "String", 
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.math.BigDecimal.toBigInteger()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.compareUnsigned(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadInfo.getThreadState()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getLong(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Class.getDeclaredClasses()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.nio.channels.spi.SelectorProvider.provider()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Policy.getProvider()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.copy(List, List)": {
        "args": [
            "List", 
            "List"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.FutureTask.run()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentMap.compute(K, BiFunction)": {
        "args": [
            "K", 
            "BiFunction"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationSystem.activeGroup(ActivationGroupID, ActivationInstantiator, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ActivationGroupID", 
            "ActivationInstantiator", 
            "long"
        ], 
        "@throws": [
            "UnknownGroupException", 
            "ActivationException", 
            "RemoteException"
        ], 
        "throws": [
            "UnknownGroupException", 
            "ActivationException", 
            "RemoteException"
        ]
    }, 
    "java.awt.Window.getFocusTraversalKeys(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.getDayOfMonth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getBlob(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.RectangularShape.setFrameFromCenter(Point2D, Point2D)": {
        "args": [
            "Point2D", 
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.peek(IntConsumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "IntConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.CacheRequest.getBody()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.geom.RectangularShape.getCenterY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ConvolveOp.createCompatibleDestRaster(Raster)": {
        "args": [
            "Raster"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.AttributedString.getIterator(Attribute[], int, int)": {
        "args": [
            "Attribute[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.io.InputStream.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.KeyboardFocusManager.removeVetoableChangeListener(VetoableChangeListener)": {
        "args": [
            "VetoableChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ImageConsumer.imageComplete(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getImportedKeys(String, String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String", 
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.font.TextLayout.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateObject(String, Object, SQLType)": {
        "args": [
            "String", 
            "Object", 
            "SQLType"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.CompletableFuture.runAfterBothAsync(CompletionStage, Runnable, Executor)": {
        "args": [
            "CompletionStage", 
            "Runnable", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.getNow(T)": {
        "args": [
            "T"
        ], 
        "@throws": [
            "CancellationException", 
            "CompletionException"
        ], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.parsedLeapSecond()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.FontRenderContext.getTransformType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.action(Event, Object)": {
        "args": [
            "Event", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.selectAllAccessibleSelection()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Hashtable.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.valueOf(long, int)": {
        "args": [
            "long", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SplittableRandom.split()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.ValueRange.of(long, long, long)": {
        "args": [
            "long", 
            "long", 
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.TextComponent.getCharacterBounds(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.thenComposeAsync(Function, Executor)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Function", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.JDBCType.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.Matcher.groupCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.SocketImpl.getFileDescriptor()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Ellipse2D.intersects(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDate.with(TemporalField, long)": {
        "args": [
            "TemporalField", 
            "long"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.sql.SQLOutput.writeAsciiStream(InputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "InputStream"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.ZonedDateTime.ofInstant(Instant, ZoneId)": {
        "args": [
            "Instant", 
            "ZoneId"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.lang.Short.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Permission.getActions()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.boxed()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.MonthDay.adjustInto(Temporal)": {
        "args": [
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedQueue.toArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyDescriptor.getPropertyType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Executable.getExceptionTypes()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.IsoChronology.date(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.MenuComponentPeer.dispose()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setClob(int, Reader, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Reader", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.AWTKeyStroke.getKeyChar()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.floorMod(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.withHour(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.Objects.isNull(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.countStackFrames()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalThreadStateException"
        ], 
        "throws": []
    }, 
    "java.awt.GridBagLayout.minimumLayoutSize(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.RoundingMode.valueOf(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.StrictMath.exp(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Stream.noneMatch(Predicate)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Predicate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneOffsetTransitionRule.getStandardOffset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.peer.DropTargetPeer.addDropTarget(DropTarget)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DropTarget"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.BitSet.set(int, boolean)": {
        "args": [
            "int", 
            "boolean"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.Character.forName(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Float.compare(float, float)": {
        "args": [
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.takeLast()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.jar.Attributes.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneOffsetTransition.compareTo(ZoneOffsetTransition)": {
        "args": [
            "ZoneOffsetTransition"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.interfaces.DSAPublicKey.getY()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.getComponents(Object, int[], int)": {
        "args": [
            "Object", 
            "int[]", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException", 
            "ClassCastException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetContext.acceptDrop(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayDeque.pollFirst()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.minus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.sql.Connection.clearWarnings()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.logging.Logger.finest(Supplier)": {
        "args": [
            "Supplier"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragGestureRecognizer.getComponent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Provider.getAlgorithm()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPane.layout()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.LayoutManager.removeLayoutComponent(Component)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.compareTo(YearMonth)": {
        "args": [
            "YearMonth"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragGestureRecognizer.getTriggerEvent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.Manifest.write(OutputStream)": {
        "args": [
            "OutputStream"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.PreparedStatement.executeQuery()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLTimeoutException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.BufferedImage.getTile(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.security.MessageDigest.getInstance(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NoSuchAlgorithmException"
        ], 
        "throws": [
            "NoSuchAlgorithmException"
        ]
    }, 
    "java.awt.datatransfer.DataFlavor.getRepresentationClass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertificateFactory.generateCertPath(List)": {
        "args": [
            "List"
        ], 
        "@throws": [
            "CertificateException"
        ], 
        "throws": [
            "CertificateException"
        ]
    }, 
    "java.beans.Visibility.okToUseGui()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.plusMillis(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.Point.move(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.System.currentTimeMillis()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.isFocusCycleRoot(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.binarySearch(T[], int, int, T, Comparator)": {
        "args": [
            "T[]", 
            "int", 
            "int", 
            "T", 
            "Comparator"
        ], 
        "@throws": [
            "ClassCastException", 
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsIntegrityEnhancementFacility()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.KeyStore.getProvider()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.AclEntry.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StackTraceElement.getClassName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.ChronoField.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.RuntimeMXBean.getStartTime()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.CookieManager.get(URI, Map)": {
        "args": [
            "URI", 
            "Map"
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.beans.EventSetDescriptor.getGetListenerMethod()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeSet.descendingIterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.setMaximumIntegerDigits(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.WeekFields.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentSampleModel.getSampleSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.LongAccumulator.doubleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerArray.compareAndSet(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.subtract(BigInteger)": {
        "args": [
            "BigInteger"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.updatesAreDetected(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Arrays.setAll(double[], IntToDoubleFunction)": {
        "args": [
            "double[]", 
            "IntToDoubleFunction"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.file.FileSystem.close()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException", 
            "UnsupportedOperationException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.KeyStoreSpi.engineSize()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertStore.getInstance(String, CertStoreParameters)": {
        "args": [
            "String", 
            "CertStoreParameters"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "InvalidAlgorithmParameterException"
        ], 
        "throws": [
            "InvalidAlgorithmParameterException", 
            "NoSuchAlgorithmException"
        ]
    }, 
    "java.awt.geom.RectangularShape.isEmpty()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahDate.plus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.nio.file.FileSystem.getPathMatcher(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "PatternSyntaxException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.LinkedList.addFirst(E)": {
        "args": [
            "E"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.getX1()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.acl.Owner.isOwner(Principal)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Principal"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsEnvironment.isHeadless()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahDate.with(TemporalAdjuster)": {
        "args": [
            "TemporalAdjuster"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.security.Provider.getService(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.bounds()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.NumericShaper.getContextualShaper(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.getAccessibleChildrenCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.min(float, float)": {
        "args": [
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsConfiguration.getColorModel()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.setFetchDirection(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.CompletionStage.toCompletableFuture()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingDeque.take()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.Container.removeNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.CollationElementIterator.primaryOrder(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.PropertyPermission.getActions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.PageAttributes.setColor(ColorType)": {
        "args": [
            "ColorType"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.ProcessBuilder.redirectInput()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509Certificate.getSigAlgParams()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.HashMap.computeIfAbsent(K, Function)": {
        "args": [
            "K", 
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getComponentType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.removeNode()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "BackingStoreException", 
            "IllegalStateException", 
            "UnsupportedOperationException"
        ], 
        "throws": [
            "BackingStoreException"
        ]
    }, 
    "java.awt.Scrollbar.processEvent(AWTEvent)": {
        "args": [
            "AWTEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isIdeographic(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingDeque.remove()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistDate.range(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Arc2D.getWidth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentColorModel.getGreen(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.parseDefaulting(TemporalField, long)": {
        "args": [
            "TemporalField", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.parallelPrefix(int[], IntBinaryOperator)": {
        "args": [
            "int[]", 
            "IntBinaryOperator"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.zone.ZoneRules.nextTransition(Instant)": {
        "args": [
            "Instant"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.LookupTable.getOffset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertPathValidator.getInstance(String, Provider)": {
        "args": [
            "String", 
            "Provider"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "NoSuchAlgorithmException"
        ]
    }, 
    "java.lang.management.ThreadMXBean.findDeadlockedThreads()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderContext.setAreaOfInterest(Shape)": {
        "args": [
            "Shape"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.minusYears(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Array.get(Object, int)": {
        "args": [
            "Object", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ]
    }, 
    "java.awt.print.PageFormat.getPaper()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.toTitleCase(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.Writer.write(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.PipedWriter.connect(PipedReader)": {
        "args": [
            "PipedReader"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.beans.beancontext.BeanContextSupport.fireChildrenAdded(BeanContextMembershipEvent)": {
        "args": [
            "BeanContextMembershipEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.CharArrayWriter.flush()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CharsetDecoder.implReset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.set(char, int)": {
        "args": [
            "char", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.setLocation(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.longValueExact()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.Scanner.hasNextShort()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Executable.getDeclaredAnnotations()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.setLenient(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.format(long, StringBuffer, FieldPosition)": {
        "args": [
            "long", 
            "StringBuffer", 
            "FieldPosition"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.spi.AbstractSelectableChannel.register(Selector, int, Object)": {
        "args": [
            "Selector", 
            "int", 
            "Object"
        ], 
        "@throws": [
            "ClosedSelectorException", 
            "IllegalBlockingModeException", 
            "IllegalSelectorException", 
            "CancelledKeyException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "ClosedChannelException"
        ]
    }, 
    "java.awt.image.DataBufferFloat.getData()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.NumberFormat.getInstance()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Stream.mapToLong(ToLongFunction)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ToLongFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Adler32.update(ByteBuffer)": {
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.PriorityQueue.add(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.clearParameters()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.RescaleOp.getScaleFactors(float[])": {
        "args": [
            "float[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SecureRandomSpi.engineGenerateSeed(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.TextComponentPeer.getSelectionEnd()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuItem.addNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.PropertyPermission.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.from(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.TextComponent.getCharCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.Clipboard.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Set.toArray(T[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T[]"
        ], 
        "@throws": [
            "ArrayStoreException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.getFlatnessSq(double, double, double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Rectangle.add(Point)": {
        "args": [
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setDouble(int, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "double"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.PrintWriter.printf(Locale, String, Object[])": {
        "args": [
            "Locale", 
            "String", 
            "Object[]"
        ], 
        "@throws": [
            "IllegalFormatException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Spliterators.spliterator(double[], int, int, int)": {
        "args": [
            "double[]", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.event.ComponentAdapter.componentShown(ComponentEvent)": {
        "Hidden": [
            "Y"
        ], 
        "args": [
            "ComponentEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsAlterTableWithAddColumn()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Cursor.getPredefinedCursor(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.ClassLoader.getPackage(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.PathIterator.currentSegment(float[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "float[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getMaxColumnsInIndex()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.URL.getUserInfo()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.EventQueue.push(EventQueue)": {
        "args": [
            "EventQueue"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Random.doubles(long, double, double)": {
        "args": [
            "long", 
            "double", 
            "double"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.IdentityScope.identities()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getGraphicsConfiguration()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.OptionalInt.ifPresent(IntConsumer)": {
        "args": [
            "IntConsumer"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.getThreadFactory()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Robot.waitForIdle()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalThreadStateException"
        ], 
        "throws": []
    }, 
    "java.awt.Window.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Rectangle.reshape(int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isWhitespace(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentColorModel.createCompatibleSampleModel(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Currency.getNumericCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.indexOf(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.insert(int, boolean)": {
        "args": [
            "int", 
            "boolean"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Arc2D.setArc(Point2D, Dimension2D, double, double, int)": {
        "args": [
            "Point2D", 
            "Dimension2D", 
            "double", 
            "double", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextEvent.getPropagatedFrom()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Rectangle2D.outcode(Point2D)": {
        "args": [
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.getSystemEventQueue()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.net.DatagramSocketImpl.bind(int, InetAddress)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "InetAddress"
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.awt.datatransfer.DataFlavor.isRepresentationClassRemote()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.DatagramChannel.write(ByteBuffer[])": {
        "args": [
            "ByteBuffer[]"
        ], 
        "@throws": [
            "NotYetConnectedException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.ResultSet.getUnicodeStream(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.locks.StampedLock.unlock(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalMonitorStateException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Point2D.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.isAccessibleChildSelected(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.setFields(int[])": {
        "args": [
            "int[]"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.im.spi.InputMethod.dispose()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MediaTracker.waitForID(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.net.Socket.getRemoteSocketAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.SerializedLambda.getCapturedArg(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.toInstant()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CharsetEncoder.replacement()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.releaseSavepoint(Savepoint)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Savepoint"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.MulticastSocket.joinGroup(InetAddress)": {
        "args": [
            "InetAddress"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.text.DecimalFormatSymbols.getExponentSeparator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.TrustAnchor.getCA()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ClassLoader.definePackage(String, String, String, String, String, String, String, URL)": {
        "args": [
            "String", 
            "String", 
            "String", 
            "String", 
            "String", 
            "String", 
            "String", 
            "URL"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": [
            "IllegalArgumentException"
        ]
    }, 
    "java.awt.Event.metaDown()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.append(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsDevice.getAvailableAcceleratedMemory()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.getVisualOtherHit(TextHitInfo)": {
        "args": [
            "TextHitInfo"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Choice.removeAll()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.parallelPrefix(double[], int, int, DoubleBinaryOperator)": {
        "args": [
            "double[]", 
            "int", 
            "int", 
            "DoubleBinaryOperator"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.RenderingHints.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.peer.DropTargetContextPeer.getTransferDataFlavors()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSetMetaData.isSearchable(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Collections.emptySortedMap()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsEnvironment.isHeadlessInstance()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getDatabaseProductName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.charset.CharsetDecoder.charset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DirectColorModel.getBlue(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.MalformedInputException.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutput.write(byte[], int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.LocalTime.from(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.hasArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.PriorityBlockingQueue.offer(E, long, TimeUnit)": {
        "args": [
            "E", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.TextComponent.textValueChanged(TextEvent)": {
        "args": [
            "TextEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.SimpleFileVisitor.visitFile(T, BasicFileAttributes)": {
        "args": [
            "T", 
            "BasicFileAttributes"
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.geom.Path2D.contains(PathIterator, double, double)": {
        "args": [
            "PathIterator", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Comparator.equals(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextField.getAccessibleStateSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.ServerSocket.getLocalSocketAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.getExtensionKeys()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.toMillis()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.ServerSocketChannel.socket()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataOutput.writeBoolean(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.reflect.Modifier.isInterface(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.InputEvent.isControlDown()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.minusNanos(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDate.toEpochDay()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AlgorithmParameterGenerator.getInstance(String, Provider)": {
        "args": [
            "String", 
            "Provider"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "NoSuchAlgorithmException"
        ]
    }, 
    "java.awt.Container.componentRemoved(ContainerEvent)": {
        "args": [
            "ContainerEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DriverManager.registerDriver(Driver)": {
        "args": [
            "Driver"
        ], 
        "@throws": [
            "SQLException", 
            "NullPointerException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.invoke.CallSite.getTarget()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousChannel.close()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.AlgorithmParametersSpi.engineInit(AlgorithmParameterSpec)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "AlgorithmParameterSpec"
        ], 
        "@throws": [
            "InvalidParameterSpecException"
        ], 
        "throws": [
            "InvalidParameterSpecException"
        ]
    }, 
    "java.net.URLConnection.getContent()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException", 
            "UnknownServiceException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.PrintWriter.format(Locale, String, Object[])": {
        "args": [
            "Locale", 
            "String", 
            "Object[]"
        ], 
        "@throws": [
            "IllegalFormatException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.ArrayDeque.spliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Adjustable.removeAdjustmentListener(AdjustmentListener)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "AdjustmentListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URI.getRawPath()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStoreSpi.engineIsCertificateEntry(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.WindowListener.windowIconified(WindowEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.spi.AbstractSelectableChannel.blockingLock()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Arc2D.getPathIterator(AffineTransform)": {
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.headSet(E, boolean)": {
        "args": [
            "E", 
            "boolean"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.Math.toIntExact(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendText(TemporalField, TextStyle)": {
        "args": [
            "TemporalField", 
            "TextStyle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.thenAcceptBothAsync(CompletionStage, BiConsumer, Executor)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CompletionStage", 
            "BiConsumer", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.canExecute()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.ListIterator.remove()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.text.DecimalFormat.getNegativeSuffix()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DirectColorModel.getAlpha(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "ArrayIndexOutOfBoundsException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.time.Duration.plusSeconds(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ExecutorService.invokeAny(Collection, long, TimeUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Collection", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException", 
            "NullPointerException", 
            "TimeoutException", 
            "ExecutionException", 
            "RejectedExecutionException"
        ], 
        "throws": [
            "InterruptedException", 
            "ExecutionException", 
            "TimeoutException"
        ]
    }, 
    "java.io.DataOutput.writeBytes(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.ComponentColorModel.isCompatibleSampleModel(SampleModel)": {
        "args": [
            "SampleModel"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.removeWindowStateListener(WindowStateListener)": {
        "args": [
            "WindowStateListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.remove(MouseWheelListener, MouseWheelListener)": {
        "args": [
            "MouseWheelListener", 
            "MouseWheelListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Hashtable.merge(K, V, BiFunction)": {
        "args": [
            "K", 
            "V", 
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.NetworkInterface.getParent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.add(Component, Object)": {
        "args": [
            "Component", 
            "Object"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.Struct.getAttributes(Map)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Map"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.ResultSet.first()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.logging.Logger.log(Level, String, Throwable)": {
        "args": [
            "Level", 
            "String", 
            "Throwable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeMap.higherKey(K)": {
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.getDate(String, Calendar)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Calendar"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.AffineTransform.translate(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.withEarlierOffsetAtOverlap()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "DateTimeException", 
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ColorConvertOp.filter(BufferedImage, BufferedImage)": {
        "args": [
            "BufferedImage", 
            "BufferedImage"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.rmi.server.RemoteCall.executeCall()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "Exception"
        ], 
        "throws": [
            "Exception"
        ]
    }, 
    "java.time.chrono.Chronology.prolepticYear(Era, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Era", 
            "int"
        ], 
        "@throws": [
            "DateTimeException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.awt.DefaultKeyboardFocusManager.enqueueKeyEvents(long, Component)": {
        "args": [
            "long", 
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.DoubleAccumulator.getThenReset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.FileDialogPeer.setFilenameFilter(FilenameFilter)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "FilenameFilter"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.PixelInterleavedSampleModel.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.nodeExists(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "BackingStoreException", 
            "IllegalArgumentException", 
            "NullPointerException", 
            "IllegalStateException"
        ], 
        "throws": [
            "BackingStoreException"
        ]
    }, 
    "java.sql.DatabaseMetaData.supportsMixedCaseIdentifiers()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Integer.bitCount(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Modifier.isAbstract(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.BeanInfo.getDefaultPropertyIndex()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuItem.setCurrentAccessibleValue(Number)": {
        "args": [
            "Number"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.getNumComponents()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.stripTrailingZeros()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.replace(K, V)": {
        "args": [
            "K", 
            "V"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.DriverManager.getConnection(String, String, String)": {
        "args": [
            "String", 
            "String", 
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLTimeoutException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.dnd.DropTarget.clearAutoscroll()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.toString(int[])": {
        "args": [
            "int[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SinglePixelPackedSampleModel.createDataBuffer()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.remove(FocusListener, FocusListener)": {
        "args": [
            "FocusListener", 
            "FocusListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Blob.getBinaryStream()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.getFirst()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.runAfterBoth(CompletionStage, Runnable)": {
        "args": [
            "CompletionStage", 
            "Runnable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.MemoryNotificationInfo.getPoolName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.of(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.Calendar.setFirstDayOfWeek(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.copyOfRange(double[], int, int)": {
        "args": [
            "double[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.logging.ErrorManager.error(String, Exception, int)": {
        "args": [
            "String", 
            "Exception", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextChildSupport.addPropertyChangeListener(String, PropertyChangeListener)": {
        "args": [
            "String", 
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneRulesProvider.provideRules(String, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "boolean"
        ], 
        "@throws": [
            "ZoneRulesException"
        ], 
        "throws": []
    }, 
    "java.awt.image.SinglePixelPackedSampleModel.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseAdapter.mouseExited(MouseEvent)": {
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FilterReader.close()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.AWTEventMulticaster.mouseEntered(MouseEvent)": {
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectStreamClass.forClass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.List.removeAll(Collection)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.closePath()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.enumeration(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.LogRecord.setResourceBundle(ResourceBundle)": {
        "args": [
            "ResourceBundle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantLock.unlock()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalMonitorStateException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.MinguoChronology.zonedDateTime(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLInput.readBigDecimal()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.NavigableSet.headSet(E, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E", 
            "boolean"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSetMetaData.getColumnTypeName(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.AffineTransform.getQuadrantRotateInstance(int, double, double)": {
        "args": [
            "int", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsFullOuterJoins()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.temporal.TemporalQuery.queryFrom(TemporalAccessor)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.getComponentAt(Point)": {
        "args": [
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.LockInfo.from(CompositeData)": {
        "args": [
            "CompositeData"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.Instant.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoPeriod.multipliedBy(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.offer(E, long, TimeUnit)": {
        "args": [
            "E", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "NullPointerException", 
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.dnd.DropTarget.stop()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseDate.now(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.setTimeOfDay(int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateAsciiStream(String, InputStream, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "InputStream", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.ZonedDateTime.parse(CharSequence, DateTimeFormatter)": {
        "args": [
            "CharSequence", 
            "DateTimeFormatter"
        ], 
        "@throws": [
            "DateTimeParseException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDateTime.isSupported(TemporalUnit)": {
        "args": [
            "TemporalUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.VolatileCallSite.setTarget(MethodHandle)": {
        "args": [
            "MethodHandle"
        ], 
        "@throws": [
            "NullPointerException", 
            "WrongMethodTypeException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.Channels.newOutputStream(WritableByteChannel)": {
        "args": [
            "WritableByteChannel"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceDragEvent.getUserAction()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getState()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateBinaryStream(String, InputStream, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "InputStream", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.addAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.StrictMath.copySign(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.SplashScreen.getBounds()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": [
            "IllegalStateException"
        ]
    }, 
    "java.util.stream.LongStream.toArray()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.FileTime.toMillis()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.getDisplayName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ListPeer.getPreferredSize(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.LongBuffer.put(int, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "long"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.lang.ThreadLocal.remove()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipOutputStream.finish()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ZipException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.color.ICC_Profile.getColorSpaceType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.NavigableMap.ceilingKey(K)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.IntBuffer.compareTo(IntBuffer)": {
        "args": [
            "IntBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeMap.ceilingKey(K)": {
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.file.FileStore.name()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintWriter.print(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.WriteAbortedException.getCause()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.put(String, Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Object"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.spec.DSAParameterSpec.getQ()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.MultiPixelPackedSampleModel.createCompatibleSampleModel(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.SplashScreen.isVisible()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedHashSet.spliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadLocalRandom.ints(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Comparator.comparingDouble(ToDoubleFunction)": {
        "args": [
            "ToDoubleFunction"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.datatransfer.FlavorTable.getFlavorsForNative(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.plusYears(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.time.zone.ZoneRulesProvider.getVersions(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "ZoneRulesException"
        ], 
        "throws": []
    }, 
    "java.sql.Statement.close()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.SynchronousQueue.contains(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.CompletionHandler.failed(Throwable, A)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Throwable", 
            "A"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.getLong(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.Font.getLineMetrics(String, FontRenderContext)": {
        "args": [
            "String", 
            "FontRenderContext"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Package.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getCursor()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.GregorianCalendar.roll(int, boolean)": {
        "args": [
            "int", 
            "boolean"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.PrimitiveIterator.forEachRemaining(DoubleConsumer)": {
        "args": [
            "DoubleConsumer"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.ListResourceBundle.handleGetObject(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.setRGB(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Timer.schedule(TimerTask, Date)": {
        "args": [
            "TimerTask", 
            "Date"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.drainTasksTo(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.UUID.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.get(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.FramePeer.setMenuBar(MenuBar)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "MenuBar"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.forEach(IntConsumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "IntConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.toString(Object[])": {
        "args": [
            "Object[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.ObjID.read(ObjectInput)": {
        "args": [
            "ObjectInput"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Double.sum(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertPath.getEncoded()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "CertificateEncodingException"
        ], 
        "throws": [
            "CertificateEncodingException"
        ]
    }, 
    "java.lang.reflect.Constructor.getAnnotation(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArraySet.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.EllipticCurve.getSeed()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.Pattern.pattern()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Path.toRealPath(LinkOption[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "LinkOption[]"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.CallableStatement.getCharacterStream(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Formatter.format(String, Object[])": {
        "args": [
            "String", 
            "Object[]"
        ], 
        "@throws": [
            "IllegalFormatException", 
            "FormatterClosedException"
        ], 
        "throws": []
    }, 
    "java.util.Properties.list(PrintWriter)": {
        "args": [
            "PrintWriter"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.sql.Statement.setMaxFieldSize(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Scanner.useLocale(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.of(int, int, int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkExit(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Constructor.newInstance(Object[])": {
        "args": [
            "Object[]"
        ], 
        "@throws": [
            "IllegalAccessException", 
            "IllegalArgumentException", 
            "InstantiationException", 
            "InvocationTargetException", 
            "ExceptionInInitializerError"
        ], 
        "throws": [
            "InstantiationException", 
            "IllegalAccessException", 
            "IllegalArgumentException", 
            "InvocationTargetException"
        ]
    }, 
    "java.sql.CallableStatement.registerOutParameter(int, SQLType)": {
        "args": [
            "int", 
            "SQLType"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.channels.SelectableChannel.validOps()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.VetoableChangeSupport.getVetoableChangeListeners(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.PrimitiveIterator.nextInt()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.awt.Frame.setBackground(Color)": {
        "args": [
            "Color"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.SplashScreen.getImageURL()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": [
            "IllegalStateException"
        ]
    }, 
    "java.time.chrono.ChronoZonedDateTime.equals(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Polygon.getPathIterator(AffineTransform)": {
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.actionPerformed(ActionEvent)": {
        "args": [
            "ActionEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.next(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NoSuchElementException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsLikeEscapeClause()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Map.comparingByValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLOutput.writeBinaryStream(InputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "InputStream"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.BufferedImage.getAlphaRaster()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLClassLoader.newInstance(URL[], ClassLoader)": {
        "args": [
            "URL[]", 
            "ClassLoader"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.beans.EventHandler.create(Class, Object, String, String)": {
        "args": [
            "Class", 
            "Object", 
            "String", 
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "NullPointerException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Window.hide()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.getRenderableSource(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.LongAdder.sumThenReset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSetMetaData.isDefinitelyWritable(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.Policy.getInstance(String, Parameters)": {
        "args": [
            "String", 
            "Parameters"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException", 
            "IllegalArgumentException", 
            "NoSuchAlgorithmException"
        ], 
        "throws": [
            "NoSuchAlgorithmException"
        ]
    }, 
    "java.util.stream.Collectors.maxBy(Comparator)": {
        "args": [
            "Comparator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.LoggingMXBean.getLoggerLevel(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.execute(Runnable)": {
        "args": [
            "Runnable"
        ], 
        "@throws": [
            "NullPointerException", 
            "RejectedExecutionException"
        ], 
        "throws": []
    }, 
    "java.util.stream.Collectors.partitioningBy(Predicate)": {
        "args": [
            "Predicate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.map(DoubleUnaryOperator)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DoubleUnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.NumberFormat.setCurrency(Currency)": {
        "args": [
            "Currency"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.SocketChannel.isConnectionPending()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setCharacterStream(int, Reader, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Reader", 
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.ResultSet.getBigDecimal(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.management.MemoryPoolMXBean.getMemoryManagerNames()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ImageProducer.removeConsumer(ImageConsumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ImageConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setAsciiStream(int, InputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "InputStream"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.chrono.AbstractChronology.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.PSSParameterSpec.getSaltLength()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.now(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.plusYears(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.EnumSet.range(E, E)": {
        "args": [
            "E", 
            "E"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDate.lengthOfYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.remove()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongArray.getAndAdd(int, long)": {
        "args": [
            "int", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PseudoColumnUsage.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.LineBreakMeasurer.nextOffset(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DirectColorModel.getRGB(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.Container.isFocusTraversalPolicyProvider()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterator.forEachRemaining(IntConsumer)": {
        "args": [
            "IntConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.insets()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.removePropertyChangeListener(PropertyChangeListener)": {
        "args": [
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferUShort.getData()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.applet.Applet.getAppletContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.NumberFormat.setMaximumFractionDigits(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.FileChannel.open(Path, OpenOption[])": {
        "args": [
            "Path", 
            "OpenOption[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Rectangle.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.EnumMap.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.contains(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.VetoableChangeSupport.addVetoableChangeListener(VetoableChangeListener)": {
        "args": [
            "VetoableChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.spi.FileSystemProvider.createSymbolicLink(Path, Path, FileAttribute[])": {
        "args": [
            "Path", 
            "Path", 
            "FileAttribute[]"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "FileAlreadyExistsException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.geom.AffineTransform.setToQuadrantRotation(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.hasNextLong(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.Date.UTC(int, int, int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.pollSubmission()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Scrollbar.setBlockIncrement(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousFileChannel.force(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.SimpleTimeZone.setDSTSavings(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.fireServiceRevoked(Class, boolean)": {
        "args": [
            "Class", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Desktop.print(File)": {
        "args": [
            "File"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.chrono.JapaneseChronology.date(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Rectangle2D.setRect(float, float, float, float)": {
        "args": [
            "float", 
            "float", 
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquireInterruptibly(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.security.KeyStoreSpi.engineIsKeyEntry(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.setSize(Dimension)": {
        "args": [
            "Dimension"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Method.getAnnotation(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Math.nextAfter(float, double)": {
        "args": [
            "float", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.MessageFormat.format(Object, StringBuffer, FieldPosition)": {
        "args": [
            "Object", 
            "StringBuffer", 
            "FieldPosition"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.putByteArray(String, byte[])": {
        "args": [
            "String", 
            "byte[]"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.font.TextMeasurer.insertChar(AttributedCharacterIterator, int)": {
        "args": [
            "AttributedCharacterIterator", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.headSet(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSetMetaData.getPrecision(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.file.attribute.AclEntry.setType(AclEntryType)": {
        "args": [
            "AclEntryType"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.lastIndexOf(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Random.nextFloat()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FileDialog.setMultipleMode(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Constructor.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.negated()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.withZoneSameInstant(ZoneId)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ZoneId"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.GridBagLayout.GetLayoutInfo(Container, int)": {
        "args": [
            "Container", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.lastIndexOf(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ListIterator.hasNext()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.atZone(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Constructor.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Stream.count()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRLSelector.getMinCRL()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandleInfo.referenceKindToString(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.requestFocus(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayList.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionService.poll()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.XMLEncoder.getOwner()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.spi.AbstractSelector.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.print.PrinterJob.validatePage(PageFormat)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "PageFormat"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.PathMatcher.matches(Path)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Path"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.MemoryUsage.getMax()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextComponent.getListeners(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.reduceToInt(long, ToIntBiFunction, int, IntBinaryOperator)": {
        "args": [
            "long", 
            "ToIntBiFunction", 
            "int", 
            "IntBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.withDayOfYear(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Modifier.isTransient(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.replaceItem(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImageProducer.addConsumer(ImageConsumer)": {
        "args": [
            "ImageConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.isHidden(Path)": {
        "args": [
            "Path"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.CountedCompleter.getRoot()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyEditorSupport.supportsCustomEditor()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.show(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.getMinimumSize()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.formatToCharacterIterator(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.text.MessageFormat.setFormats(Format[])": {
        "args": [
            "Format[]"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.createCompatibleSampleModel(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.merge(K, V, BiFunction)": {
        "args": [
            "K", 
            "V", 
            "BiFunction"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Integer.compare(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Date.setMonth(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Properties.list(PrintStream)": {
        "args": [
            "PrintStream"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDateTime.withNano(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.io.DataInput.readUnsignedShort()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.GradientPaint.getColor2()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.getQueuedReaderThreads()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentSampleModel.getPixel(int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.net.URI.isAbsolute()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.getAWTEventListeners()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.SplittableRandom.nextDouble()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationID.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.spliterator(T[])": {
        "args": [
            "T[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AlgorithmParametersSpi.engineInit(byte[], String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "byte[]", 
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Byte.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.sql.DatabaseMetaData.getMaxConnections()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.Inet6Address.getScopedInterface()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Map.equals(Object)": {
        "Abstract": [
            "Y", 
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.HierarchyEvent.getChangedParent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setClob(String, Reader)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Reader"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.reflect.Constructor.getTypeParameters()": {
        "args": [
            ""
        ], 
        "@throws": [
            "GenericSignatureFormatError"
        ], 
        "throws": []
    }, 
    "java.util.HashSet.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.NumberFormat.getIntegerInstance()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.ServerSocketChannel.setOption(SocketOption, T)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "SocketOption", 
            "T"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IllegalArgumentException", 
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Byte.valueOf(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.time.Clock.withZone(ZoneId)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayDeque.add(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.ByteArrayOutputStream.close()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.URL.getFile()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Dialog.setModal(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.getRejectedExecutionHandler()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.PriorityQueue.poll()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.List.toArray(T[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T[]"
        ], 
        "@throws": [
            "ArrayStoreException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.event.InputMethodEvent.getVisiblePosition()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TimeZone.useDaylightTime()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.WindowAdapter.windowActivated(WindowEvent)": {
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.Writer.close()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Canvas.getAccessibleRole()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.ofEpochSecond(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.image.RenderedImage.getTileGridYOffset()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Formatter.locale()": {
        "args": [
            ""
        ], 
        "@throws": [
            "FormatterClosedException"
        ], 
        "throws": []
    }, 
    "java.lang.ProcessBuilder.environment()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.zip.Deflater.finalize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.Book.setPage(int, Printable, PageFormat)": {
        "args": [
            "int", 
            "Printable", 
            "PageFormat"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "NullPointerException"
        ], 
        "throws": [
            "IndexOutOfBoundsException"
        ]
    }, 
    "java.security.Provider.computeIfAbsent(Object, Function)": {
        "args": [
            "Object", 
            "Function"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.focusLost(FocusEvent)": {
        "args": [
            "FocusEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.UUID.getMostSignificantBits()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.remove(TextListener, TextListener)": {
        "args": [
            "TextListener", 
            "TextListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.ChronoUnit.getDuration()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintWriter.write(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.AdjustmentEvent.getValueIsAdjusting()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ShortBuffer.order()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.remove(Object, Object)": {
        "args": [
            "Object", 
            "Object"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingDeque.push(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "IllegalStateException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Spliterators.spliterator(Collection, int)": {
        "args": [
            "Collection", 
            "int"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.SplittableRandom.nextLong(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.math.BigDecimal.divide(BigDecimal)": {
        "args": [
            "BigDecimal"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.Character.isLowerCase(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.createBCSChild(Object, Object)": {
        "args": [
            "Object", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyEditor.isPaintable()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Member.isSynthetic()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.setCursor(Cursor)": {
        "args": [
            "Cursor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.removeFirst()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedTransferQueue.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.bind(SocketAddress)": {
        "args": [
            "SocketAddress"
        ], 
        "@throws": [
            "IOException", 
            "IllegalArgumentException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.DatagramSocket.setSoTimeout(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.awt.image.LookupTable.lookupPixel(int[], int[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int[]", 
            "int[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.processFocusEvent(FocusEvent)": {
        "args": [
            "FocusEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContext.instantiateChild(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException", 
            "ClassNotFoundException"
        ], 
        "throws": [
            "IOException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.time.LocalDateTime.getHour()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Short.toUnsignedInt(short)": {
        "args": [
            "short"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.upFocusCycle()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GridBagLayout.getLayoutWeights()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Struct.getAttributes()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.cert.X509CertSelector.getPolicy()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.numberOfTrailingZeros(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.color.ICC_Profile.getNumComponents()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ProfileDataException"
        ], 
        "throws": []
    }, 
    "java.awt.image.PixelGrabber.grabPixels(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.geom.Rectangle2D.setFrame(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.Chronology.zonedDateTime(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.security.ProtectionDomain.getClassLoader()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.getCurrentKeyboardFocusManager()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.MulticastSocket.setNetworkInterface(NetworkInterface)": {
        "args": [
            "NetworkInterface"
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.util.jar.JarOutputStream.putNextEntry(ZipEntry)": {
        "args": [
            "ZipEntry"
        ], 
        "@throws": [
            "ZipException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.chrono.Chronology.dateYearDay(Era, int, int)": {
        "args": [
            "Era", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.lang.Double.isNaN()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.RemoteException.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URISyntaxException.getIndex()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.replaceAll(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "PatternSyntaxException"
        ], 
        "throws": []
    }, 
    "java.nio.IntBuffer.wrap(int[], int, int)": {
        "args": [
            "int[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.math.BigInteger.shiftLeft(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.with(TemporalAdjuster)": {
        "args": [
            "TemporalAdjuster"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.Character.isLetter(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.RoundingMode.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.DelayQueue.toArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadInfo.getLockInfo()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.minus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Arc2D.getArcType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.Transferable.getTransferData(DataFlavor)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DataFlavor"
        ], 
        "@throws": [
            "IOException", 
            "UnsupportedFlavorException"
        ], 
        "throws": [
            "UnsupportedFlavorException", 
            "IOException"
        ]
    }, 
    "java.security.cert.CertPathBuilder.getProvider()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.coalesceEvents(AWTEvent, AWTEvent)": {
        "args": [
            "AWTEvent", 
            "AWTEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.sin(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquireShared(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Deque.peek()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ListPeer.deselect(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.SynchronousQueue.drainTo(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.cert.CertificateFactory.getType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.signum(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Savepoint.getSavepointId()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.GraphicsDevice.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDateTime.toString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.isHidden()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.Map.put(K, V)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K", 
            "V"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkLink(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.getDayOfYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.AttributedCharacterIterator.readResolve()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InvalidObjectException"
        ], 
        "throws": [
            "InvalidObjectException"
        ]
    }, 
    "java.awt.dnd.DropTargetDropEvent.isLocalTransfer()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongFieldUpdater.addAndGet(T, long)": {
        "args": [
            "T", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateSQLXML(String, SQLXML)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "SQLXML"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.cert.CertificateFactory.getProvider()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferUShort.getElem(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.getFocusedWindow()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.ProtectionDomain.getPermissions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setBigDecimal(int, BigDecimal)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "BigDecimal"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.channels.FileLock.isValid()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Clob.getSubString(long, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.ConcurrentMap.putIfAbsent(K, V)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K", 
            "V"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.file.SecureDirectoryStream.getFileAttributeView(T, Class, LinkOption[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "Class", 
            "LinkOption[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getMaxColumnsInTable()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.Line2D.setLine(float, float, float, float)": {
        "args": [
            "float", 
            "float", 
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.writeBytes(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.StringReader.markSupported()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.GlyphMetrics.getRSB()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.addSource(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.isDaemon()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.GraphicAttribute.draw(Graphics2D, float, float)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Graphics2D", 
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Deflater.end()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXParameters.getSigProvider()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Timestamp.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.ofNanoOfDay(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.List.addAccessibleSelection(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.DatagramChannel.open(ProtocolFamily)": {
        "args": [
            "ProtocolFamily"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.String.regionMatches(boolean, int, String, int, int)": {
        "args": [
            "boolean", 
            "int", 
            "String", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Path.hashCode()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.max(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLException.getErrorCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.getPrintJob(Frame, String, Properties)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Frame", 
            "String", 
            "Properties"
        ], 
        "@throws": [
            "NullPointerException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.TimeZone.getOffset(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.MultiPixelPackedSampleModel.getSampleSize(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collection.equals(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsConvert()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.QuadCurve2D.getBounds()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Scrollbar.setValue(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.nextDouble()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InputMismatchException", 
            "NoSuchElementException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.annotateClass(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.StrictMath.floorDiv(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.event.KeyListener.keyReleased(KeyEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "KeyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalAdjusters.dayOfWeekInMonth(int, DayOfWeek)": {
        "args": [
            "int", 
            "DayOfWeek"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.ImageGraphicAttribute.draw(Graphics2D, float, float)": {
        "args": [
            "Graphics2D", 
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.nextAfter(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneRules.getTransition(LocalDateTime)": {
        "args": [
            "LocalDateTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Stream.forEach(Consumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Consumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Method.getDefaultValue()": {
        "args": [
            ""
        ], 
        "@throws": [
            "TypeNotPresentException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.nullsAreSortedHigh()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.Phaser.getParent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PushbackInputStream.read()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.ZonedDateTime.getHour()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.getClipRect()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.awaitQuiescence(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuilder.append(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.setParseBigDecimal(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.insertElementAt(E, int)": {
        "args": [
            "E", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Graphics2D.drawImage(BufferedImage, BufferedImageOp, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BufferedImage", 
            "BufferedImageOp", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.setCertificateValid(Date)": {
        "args": [
            "Date"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.AclEntry.flags()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentColorModel.getRGB(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "ArrayIndexOutOfBoundsException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.sql.SQLOutput.writeFloat(float)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "float"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.descendingIterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.PKCS12Attribute.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics2D.setRenderingHint(Key, Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Key", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.TextComponentPeer.setCaretPosition(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.IntBuffer.hasArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.getLocale()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseDate.getEra()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertificateFactory.generateCertificates(InputStream)": {
        "args": [
            "InputStream"
        ], 
        "@throws": [
            "CertificateException"
        ], 
        "throws": [
            "CertificateException"
        ]
    }, 
    "java.awt.Rectangle.move(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AlgorithmParameters.init(AlgorithmParameterSpec)": {
        "args": [
            "AlgorithmParameterSpec"
        ], 
        "@throws": [
            "InvalidParameterSpecException"
        ], 
        "throws": [
            "InvalidParameterSpecException"
        ]
    }, 
    "java.util.regex.Pattern.flags()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendValueReduced(TemporalField, int, int, ChronoLocalDate)": {
        "args": [
            "TemporalField", 
            "int", 
            "int", 
            "ChronoLocalDate"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.cert.PKIXParameters.setCertStores(List)": {
        "args": [
            "List"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.net.NetworkInterface.getNetworkInterfaces()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.awt.dnd.DragSourceListener.dragOver(DragSourceDragEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DragSourceDragEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalField.isTimeBased()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.cbrt(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.MessageFormat.setFormat(int, Format)": {
        "args": [
            "int", 
            "Format"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.StringBuilder.append(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ContainerOrderFocusTraversalPolicy.accept(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextComponent.getSelectedText()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.CropImageFilter.setPixels(int, int, int, int, ColorModel, byte[], int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "ColorModel", 
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuBar.getMenuCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.range(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.security.Policy.getParameters()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.createDirectory(Path, FileAttribute[])": {
        "args": [
            "Path", 
            "FileAttribute[]"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "FileAlreadyExistsException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.reflect.Executable.getAnnotation(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsSelectForUpdate()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.peer.FramePeer.setState(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.RenderingHints.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.PermissionCollection.isReadOnly()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.isFrameStateSupported(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.util.jar.JarEntry.getCertificates()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractQueue.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Proxy.newProxyInstance(ClassLoader, Class[], InvocationHandler)": {
        "args": [
            "ClassLoader", 
            "Class[]", 
            "InvocationHandler"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": [
            "IllegalArgumentException"
        ]
    }, 
    "java.awt.dnd.DragSourceEvent.getY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.spi.AbstractSelector.end()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ThreadGroup.enumerate(ThreadGroup[])": {
        "args": [
            "ThreadGroup[]"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getData()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Array.setInt(Object, int, int)": {
        "args": [
            "Object", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ]
    }, 
    "java.util.Comparator.thenComparing(Function, Comparator)": {
        "args": [
            "Function", 
            "Comparator"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.TextArea.getAccessibleContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.subMap(K, K)": {
        "args": [
            "K", 
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.math.BigInteger.setBit(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.getCtrlX1()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLong.get()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.keys()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLInput.readRowId()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.DatabaseMetaData.ownUpdatesAreVisible(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.atomic.DoubleAdder.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationGroupID.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.hasWaiters(Condition)": {
        "args": [
            "Condition"
        ], 
        "@throws": [
            "IllegalMonitorStateException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Float.floatToRawIntBits(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.ptLineDistSq(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.DirectoryStream.iterator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.time.temporal.ChronoField.getDisplayName(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.UnicastRemoteObject.unexportObject(Remote, boolean)": {
        "args": [
            "Remote", 
            "boolean"
        ], 
        "@throws": [
            "NoSuchObjectException"
        ], 
        "throws": [
            "NoSuchObjectException"
        ]
    }, 
    "java.awt.MenuItem.getActionListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateNClob(int, Reader)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Reader"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.text.spi.DateFormatSymbolsProvider.getInstance(Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.net.CacheRequest.abort()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StringWriter.flush()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.VetoableChangeListener.vetoableChange(PropertyChangeEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "PropertyChangeEvent"
        ], 
        "@throws": [
            "PropertyVetoException"
        ], 
        "throws": [
            "PropertyVetoException"
        ]
    }, 
    "java.awt.Window.setAutoRequestFocus(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.compareTo(File)": {
        "args": [
            "File"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.searchValues(long, Function)": {
        "args": [
            "long", 
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.LongBuffer.isDirect()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.SynchronousQueue.spliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.setElementAt(E, int)": {
        "args": [
            "E", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.MediaTracker.addImage(Image, int, int, int)": {
        "args": [
            "Image", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.JobAttributes.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.ResponseCache.put(URI, URLConnection)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "URI", 
            "URLConnection"
        ], 
        "@throws": [
            "IOException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.ObjectStreamClass.getSerialVersionUID()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.setReadable(boolean, boolean)": {
        "args": [
            "boolean", 
            "boolean"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.font.GlyphMetrics.isStandard()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterators.emptySpliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.ceil(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayDeque.peek()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.DatagramChannel.read(ByteBuffer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [
            "NotYetConnectedException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.file.attribute.BasicFileAttributeView.readAttributes()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.text.MessageFormat.applyPattern(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedQueue.contains(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.minusHours(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.lang.Integer.valueOf(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.addTileObserver(TileObserver)": {
        "args": [
            "TileObserver"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.abs()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Deque.peekLast()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.getPreferredSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ConvolveOp.getBounds2D(BufferedImage)": {
        "args": [
            "BufferedImage"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.ExceptionListener.exceptionThrown(Exception)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Exception"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.GlyphVector.getPixelBounds(FontRenderContext, float, float)": {
        "args": [
            "FontRenderContext", 
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferDouble.getElemFloat(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.MonthDay.get(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.ActiveEvent.dispatch()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.subSequence(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.Float.shortValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FilterReader.ready()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.BufferedImage.getProperty(String, ImageObserver)": {
        "args": [
            "String", 
            "ImageObserver"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.file.attribute.PosixFileAttributes.group()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.interrupt()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.spliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.AffineTransformOp.getBounds2D(Raster)": {
        "args": [
            "Raster"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.parallelSort(long[], int, int)": {
        "args": [
            "long[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.image.MultiPixelPackedSampleModel.setSample(int, int, int, int, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "DataBuffer"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getDriverMinorVersion()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalAdjusters.lastDayOfYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setBlob(String, InputStream, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "InputStream", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.OffsetDateTime.plusMinutes(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.SimpleTimeZone.setRawOffset(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.propertyChange(PropertyChangeEvent)": {
        "args": [
            "PropertyChangeEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuShortcut.getKey()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.read(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.GridLayout.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistChronology.eraOf(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setTimestamp(String, Timestamp, Calendar)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Timestamp", 
            "Calendar"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.text.AttributedCharacterIterator.getAllAttributeKeys()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.DisplayMode.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.getMostRecentFocusOwner()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Label.getAccessibleName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.List.clear()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.net.Inet6Address.isMCOrgLocal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.BufferedInputStream.available()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.chrono.ThaiBuddhistDate.until(ChronoLocalDate)": {
        "args": [
            "ChronoLocalDate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataInputStream.readFully(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.peer.DesktopPeer.browse(URI)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "URI"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.UUID.version()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.IndexedPropertyDescriptor.getIndexedPropertyType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBuffer.setElem(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.Certificate.verify(PublicKey)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "PublicKey"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "InvalidKeyException", 
            "NoSuchProviderException", 
            "SignatureException", 
            "CertificateException"
        ], 
        "throws": [
            "CertificateException", 
            "NoSuchAlgorithmException", 
            "InvalidKeyException", 
            "NoSuchProviderException", 
            "SignatureException"
        ]
    }, 
    "java.io.InputStream.skip(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.text.DateFormatSymbols.setEras(String[])": {
        "args": [
            "String[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalField.toString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.createList(List)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "List"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.sql.ResultSet.updateBinaryStream(String, InputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "InputStream"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicInteger.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistChronology.isLeapYear(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ParameterMetaData.getParameterTypeName(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.System.gc()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ExecutorService.shutdown()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.beforeFirst()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.ZonedDateTime.withDayOfYear(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceListener.dragExit(DragSourceEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DragSourceEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.RoundRectangle2D.setFrame(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.LongStream.boxed()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyChangeSupport.removePropertyChangeListener(String, PropertyChangeListener)": {
        "args": [
            "String", 
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SinglePixelPackedSampleModel.setDataElements(int, int, Object, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "Object", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.DoubleBuffer.array()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ReadOnlyBufferException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Certificate.getGuarantor()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.getInCheck()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.getFontMetrics(Font)": {
        "args": [
            "Font"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.FileSystem.getPath(String, String[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String[]"
        ], 
        "@throws": [
            "InvalidPathException"
        ], 
        "throws": []
    }, 
    "java.awt.TextArea.append(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.applet.Applet.play(URL)": {
        "args": [
            "URL"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.EnumMap.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.instrument.Instrumentation.addTransformer(ClassFileTransformer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ClassFileTransformer"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.ClassLoader.findResources(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Short.byteValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.isMinimumSizeSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.minusNanos(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferFloat.getElem(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.TimeUnit.timedJoin(Thread, long)": {
        "args": [
            "Thread", 
            "long"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.text.DecimalFormatSymbols.getPerMill()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.setDaemon(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "IllegalThreadStateException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.security.AuthProvider.setCallbackHandler(CallbackHandler)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CallbackHandler"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.setGlobalPermanentFocusOwner(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.util.concurrent.TimeUnit.toSeconds(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.WatchEvent.context()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuilder.reverse()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.HttpCookie.getPortlist()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.focusPreviousComponent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.PixelInterleavedSampleModel.createCompatibleSampleModel(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.beans.BeanInfo.getBeanDescriptor()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Optional.orElse(T)": {
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.withMonth(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.time.Clock.tickMinutes(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationMonitor.inactiveObject(ActivationID)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ActivationID"
        ], 
        "@throws": [
            "UnknownObjectException", 
            "RemoteException"
        ], 
        "throws": [
            "UnknownObjectException", 
            "RemoteException"
        ]
    }, 
    "java.sql.SQLOutput.writeByte(byte)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "byte"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Long.numberOfTrailingZeros(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.JarFile.getManifest()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.reflect.AnnotatedElement.getAnnotation(Class)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Parameter.getParameterizedType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.minusYears(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getSampleModel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.lookupTag(List, Collection)": {
        "args": [
            "List", 
            "Collection"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Window.getLocale()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Inflater.getBytesWritten()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.paintAll(Graphics)": {
        "args": [
            "Graphics"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Number.intValue()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.getInt(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.security.Provider.getOrDefault(Object, Object)": {
        "args": [
            "Object", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.BeanInfo.getAdditionalBeanInfo()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Double.longValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.WeakHashMap.containsValue(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Byte.parseByte(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.security.PolicySpi.engineGetPermissions(CodeSource)": {
        "args": [
            "CodeSource"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.Attributes.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.plus(MathContext)": {
        "args": [
            "MathContext"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.security.cert.CertPathValidator.getProvider()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.ECParameterSpec.getOrder()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GradientPaint.getColor1()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.Charset.canEncode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.synchronizedSet(Set)": {
        "args": [
            "Set"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Compiler.command(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.GraphicsConfiguration.isTranslucencyCapable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendLocalized(FormatStyle, FormatStyle)": {
        "args": [
            "FormatStyle", 
            "FormatStyle"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.sql.Connection.setSchema(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.management.MemoryPoolMXBean.isCollectionUsageThresholdExceeded()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.EnumMap.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.WindowListener.windowClosing(WindowEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.minusDays(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.lang.management.MemoryPoolMXBean.getCollectionUsageThreshold()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.lang.management.ThreadMXBean.getThreadInfo(long[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.TextArea.setRows(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Frame.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.logp(Level, String, String, Supplier)": {
        "args": [
            "Level", 
            "String", 
            "String", 
            "Supplier"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.weakCompareAndSet(T, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistDate.from(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ComponentSampleModel.createDataBuffer()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTKeyStroke.isOnKeyRelease()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetContext.getTransferDataFlavors()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StringWriter.append(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Date.getHours()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.image.MultiPixelPackedSampleModel.getScanlineStride()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.OptionalLong.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.GlyphVector.getGlyphCodes(int, int, int[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IndexOutOfBoundsException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.text.NumberFormat.setMaximumIntegerDigits(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.toURI()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.beans.Expression.setValue(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.BeanInfo.getEventSetDescriptors()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferShort.getData()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CoderResult.isUnderflow()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.URIParameter.getURI()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.handleAsync(BiFunction)": {
        "args": [
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.WatchEvent.kind()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Button.getAccessibleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.DefaultPersistenceDelegate.initialize(Class, Object, Object, Encoder)": {
        "args": [
            "Class", 
            "Object", 
            "Object", 
            "Encoder"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadLocalRandom.setSeed(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.lang.System.load(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException", 
            "UnsatisfiedLinkError", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.Provider.remove(Object, Object)": {
        "args": [
            "Object", 
            "Object"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.SplashScreen.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": [
            "IllegalStateException"
        ]
    }, 
    "java.awt.dnd.DropTargetContext.getTargetActions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.EventSetDescriptor.isInDefaultEventSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.roll(int, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.IntBuffer.asReadOnlyBuffer()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PersistenceDelegate.mutatesTo(Object, Object)": {
        "args": [
            "Object", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RGBImageFilter.filterRGBPixels(int, int, int, int, int[], int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireNanos(int, long)": {
        "args": [
            "int", 
            "long"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.Calendar.setDate(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.GlyphVector.getGlyphPixelBounds(int, FontRenderContext, float, float)": {
        "args": [
            "int", 
            "FontRenderContext", 
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Polygon.addPoint(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.rowInserted()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.management.RuntimeMXBean.getVmVersion()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setInt(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Container.add(Component, Object, int)": {
        "args": [
            "Component", 
            "Object", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.Class.desiredAssertionStatus()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractList.clear()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDate.parse(CharSequence, DateTimeFormatter)": {
        "args": [
            "CharSequence", 
            "DateTimeFormatter"
        ], 
        "@throws": [
            "DateTimeParseException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Array.setShort(Object, int, short)": {
        "args": [
            "Object", 
            "int", 
            "short"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ]
    }, 
    "java.time.Month.get(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.beans.Introspector.setBeanInfoSearchPath(String[])": {
        "args": [
            "String[]"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.im.InputMethodRequests.cancelLatestCommittedText(Attribute[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Attribute[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.readByte()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Locale.setLanguage(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllformedLocaleException"
        ], 
        "throws": []
    }, 
    "java.net.URI.getQuery()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.toGenericString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.getBackground()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.isShutdown()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.getCertificateAlias(Certificate)": {
        "args": [
            "Certificate"
        ], 
        "@throws": [
            "KeyStoreException"
        ], 
        "throws": [
            "KeyStoreException"
        ]
    }, 
    "java.awt.image.renderable.ParameterBlock.shallowClone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ClassLoader.findSystemClass(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "ClassNotFoundException"
        ], 
        "throws": [
            "ClassNotFoundException"
        ]
    }, 
    "java.util.LinkedHashMap.removeEldestEntry(Entry)": {
        "args": [
            "Entry"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.newInputStream(Path, OpenOption[])": {
        "args": [
            "Path", 
            "OpenOption[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.format.DateTimeFormatter.getResolverFields()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextComponent.isEditable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.add(double)": {
        "args": [
            "double"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.nio.IntBuffer.isDirect()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocket.close()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocketImpl.receive(DatagramPacket)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DatagramPacket"
        ], 
        "@throws": [
            "IOException", 
            "PortUnreachableException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.TextArea.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ResourceBundle.needsReload(String, Locale, String, ClassLoader, ResourceBundle, long)": {
        "args": [
            "String", 
            "Locale", 
            "String", 
            "ClassLoader", 
            "ResourceBundle", 
            "long"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.LineNumberReader.readLine()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Double.doubleToRawLongBits(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataOutputStream.writeFloat(float)": {
        "args": [
            "float"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.ThreadGroup.uncaughtException(Thread, Throwable)": {
        "args": [
            "Thread", 
            "Throwable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.executeLargeUpdate(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException", 
            "SQLTimeoutException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.temporal.ChronoField.rangeRefinedBy(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.fireServiceRevoked(BeanContextServiceRevokedEvent)": {
        "args": [
            "BeanContextServiceRevokedEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.multiplyExact(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.Long.valueOf(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.sql.Clob.position(String, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.dnd.DropTargetContext.getCurrentDataFlavorsAsList()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Clob.free()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.Period.minusMonths(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.MissingResourceException.getKey()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.setFileNameMap(FileNameMap)": {
        "args": [
            "FileNameMap"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.io.PushbackReader.reset()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.text.SimpleDateFormat.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ListResourceBundle.getContents()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.TypeVariable.getName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.FileSystems.newFileSystem(Path, ClassLoader)": {
        "args": [
            "Path", 
            "ClassLoader"
        ], 
        "@throws": [
            "ProviderNotFoundException", 
            "ServiceConfigurationError", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Vector.remove(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.io.FilterOutputStream.flush()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Hashtable.containsValue(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.Clob.getCharacterStream(long, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.ConcurrentNavigableMap.headMap(K)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.JobAttributes.setMultipleDocumentHandlingToDefault()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.Attributes.get(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.GregorianCalendar.setGregorianChange(Date)": {
        "args": [
            "Date"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectStreamField.getTypeString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Permissions.elements()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetDropEvent.acceptDrop(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.getOwner(Path, LinkOption[])": {
        "args": [
            "Path", 
            "LinkOption[]"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.SynchronousQueue.put(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "InterruptedException", 
            "NullPointerException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.Map.putIfAbsent(K, V)": {
        "args": [
            "K", 
            "V"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.net.JarURLConnection.getJarFile()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.text.Normalizer.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ReplicateScaleFilter.setDimensions(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isSpaceChar(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Menu.remove(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXCertPathChecker.check(Certificate)": {
        "args": [
            "Certificate"
        ], 
        "@throws": [], 
        "throws": [
            "CertPathValidatorException"
        ]
    }, 
    "java.sql.DatabaseMetaData.supportsMultipleTransactions()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.MonthDay.of(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.security.cert.PKIXCertPathChecker.check(Certificate, Collection)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Certificate", 
            "Collection"
        ], 
        "@throws": [
            "CertPathValidatorException"
        ], 
        "throws": [
            "CertPathValidatorException"
        ]
    }, 
    "java.util.concurrent.CompletionService.poll(long, TimeUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.zip.Deflater.setLevel(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.DelayQueue.drainTo(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.PreferenceChangeEvent.getNode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.drawArc(int, int, int, int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.DoubleAccumulator.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.get(String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.lazySet(T, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.intValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingQueue.take()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.sql.Array.getResultSet()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.KeyboardFocusManager.setGlobalCurrentFocusCycleRoot(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.time.temporal.TemporalAdjusters.firstInMonth(DayOfWeek)": {
        "args": [
            "DayOfWeek"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoDate.lengthOfMonth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StringReader.read(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.URL.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.remove(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.containsKey(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.math.BigInteger.flipBit(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Field.getLong(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "IllegalAccessException", 
            "IllegalArgumentException", 
            "NullPointerException", 
            "ExceptionInInitializerError"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "IllegalAccessException"
        ]
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.addService(Class, BeanContextServiceProvider, boolean)": {
        "args": [
            "Class", 
            "BeanContextServiceProvider", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AlgorithmConstraints.permits(Set, String, Key, AlgorithmParameters)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Set", 
            "String", 
            "Key", 
            "AlgorithmParameters"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.List.addItem(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.getZone()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.lastEntry()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormatSymbols.getEras()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.MemoryPoolMXBean.isCollectionUsageThresholdSupported()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getColorModel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.ShapeGraphicAttribute.getBounds()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.FutureTask.runAndReset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FontMetrics.getLineMetrics(char[], int, int, Graphics)": {
        "args": [
            "char[]", 
            "int", 
            "int", 
            "Graphics"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Currency.getSymbol(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.ptLineDist(Point2D)": {
        "args": [
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.ConstantCallSite.getTarget()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.DoubleAccumulator.floatValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.GlyphVector.getGlyphVisualBounds(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Desktop.getDesktop()": {
        "args": [
            ""
        ], 
        "@throws": [
            "HeadlessException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.image.MemoryImageSource.addConsumer(ImageConsumer)": {
        "args": [
            "ImageConsumer"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Toolkit.getScreenSize()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.text.FieldPosition.setBeginIndex(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Dialog.getTitle()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.DefaultKeyboardFocusManager.dequeueKeyEvents(long, Component)": {
        "args": [
            "long", 
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.plusHours(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.nio.ShortBuffer.get()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "BufferUnderflowException"
        ], 
        "throws": []
    }, 
    "java.awt.print.PageFormat.getMatrix()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.multiply(BigDecimal, MathContext)": {
        "args": [
            "BigDecimal", 
            "MathContext"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.plusSeconds(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.ChoicePeer.add(String, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.addNodeChangeListener(NodeChangeListener)": {
        "args": [
            "NodeChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SocketChannel.shutdownInput()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NotYetConnectedException", 
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Locale.removeUnicodeLocaleAttribute(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllformedLocaleException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.IsoChronology.zonedDateTime(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.beans.VetoableChangeSupport.fireVetoableChange(String, boolean, boolean)": {
        "args": [
            "String", 
            "boolean", 
            "boolean"
        ], 
        "@throws": [
            "PropertyVetoException"
        ], 
        "throws": [
            "PropertyVetoException"
        ]
    }, 
    "java.io.DataOutputStream.writeLong(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Menu.insert(MenuItem, int)": {
        "args": [
            "MenuItem", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.file.FileStore.getUsableSpace()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.charset.CharsetEncoder.implFlush(ByteBuffer)": {
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.getAccessibleParent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.acl.Acl.checkPermission(Principal, Permission)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Principal", 
            "Permission"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.finalize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.findStaticGetter(Class, String, Class)": {
        "args": [
            "Class", 
            "String", 
            "Class"
        ], 
        "@throws": [
            "NoSuchFieldException", 
            "IllegalAccessException", 
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": [
            "NoSuchFieldException", 
            "IllegalAccessException"
        ]
    }, 
    "java.util.Calendar.roll(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoDate.atTime(LocalTime)": {
        "args": [
            "LocalTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Proxy.address()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateInt(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.CharBuffer.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferDouble.setElem(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.SerializedLambda.getFunctionalInterfaceMethodSignature()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.firePropertyChange(String, char, char)": {
        "args": [
            "String", 
            "char", 
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.InputMethodRequests.getLocationOffset(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.Paper.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.setKeyUsage(boolean[])": {
        "args": [
            "boolean[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getFetchDirection()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.ResourceBundle.handleKeySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Byte.valueOf(byte)": {
        "args": [
            "byte"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousServerSocketChannel.open(AsynchronousChannelGroup)": {
        "args": [
            "AsynchronousChannelGroup"
        ], 
        "@throws": [
            "ShutdownChannelGroupException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.regex.Pattern.compile(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "PatternSyntaxException"
        ], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getTileGridYOffset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.GregorianCalendar.computeFields()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.readFully(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Container.isValidateRoot()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MediaTracker.isErrorAny()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.parseLong(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.sql.Statement.setMaxRows(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.GraphicsEnvironment.getAvailableFontFamilyNames(Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.isFlavorTextType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahDate.range(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.FieldPosition.getField()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.isAnnotation()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getPrimeQ()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ThreadGroup.getMaxPriority()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.DSAGenParameterSpec.getSeedLength()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterator.forEachRemaining(T_CONS)": {
        "args": [
            "T_CONS"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.coerceData(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImageFilter.getBufferedImageOp()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Runtime.freeMemory()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.SecureCacheResponse.getServerCertificateChain()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SSLPeerUnverifiedException"
        ], 
        "throws": [
            "SSLPeerUnverifiedException"
        ]
    }, 
    "java.util.SimpleTimeZone.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.guessContentTypeFromStream(InputStream)": {
        "args": [
            "InputStream"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.im.InputMethodRequests.getInsertPositionOffset()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.add(Component, int)": {
        "args": [
            "Component", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.getCtrlX2()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.lastIndexOf(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSource.isDragImageSupported()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Blob.position(byte[], long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "byte[]", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Checkbox.getMaximumAccessibleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.PackedColorModel.getMask(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.net.Socket.connect(SocketAddress, int)": {
        "args": [
            "SocketAddress", 
            "int"
        ], 
        "@throws": [
            "IOException", 
            "SocketTimeoutException", 
            "IllegalBlockingModeException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.PreparedStatement.setLong(int, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "long"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.SynchronousQueue.poll()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AllPermission.getActions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.Buffer.limit()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.OptionalDouble.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.setPixels(int, int, int, int, float[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "float[]", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Toolkit.getProperty(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.getBounds()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.UncheckedIOException.getCause()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.parallelSetAll(double[], IntToDoubleFunction)": {
        "args": [
            "double[]", 
            "IntToDoubleFunction"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.net.Inet6Address.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.WindowPeer.updateMinimumSize()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.getY2()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.LoggingMXBean.getParentLoggerName(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.IntBuffer.array()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ReadOnlyBufferException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDateTime.of(int, Month, int, int, int)": {
        "args": [
            "int", 
            "Month", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.security.cert.CertPathBuilder.build(CertPathParameters)": {
        "args": [
            "CertPathParameters"
        ], 
        "@throws": [
            "CertPathBuilderException", 
            "InvalidAlgorithmParameterException"
        ], 
        "throws": [
            "CertPathBuilderException", 
            "InvalidAlgorithmParameterException"
        ]
    }, 
    "java.security.SecureRandom.getInstance(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "NoSuchProviderException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "NoSuchAlgorithmException", 
            "NoSuchProviderException"
        ]
    }, 
    "java.security.cert.X509Certificate.getSignature()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferDouble.getData(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StreamTokenizer.parseNumbers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.IntSupplier.getAsInt()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractSequentialList.addAll(int, Collection)": {
        "args": [
            "int", 
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.net.Inet4Address.isLinkLocalAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.getValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.DefaultFocusTraversalPolicy.accept(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.spi.FileSystemProvider.getFileStore(Path)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Path"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.AccessController.doPrivilegedWithCombiner(PrivilegedExceptionAction, AccessControlContext, Permission[])": {
        "args": [
            "PrivilegedExceptionAction", 
            "AccessControlContext", 
            "Permission[]"
        ], 
        "@throws": [
            "PrivilegedActionException", 
            "NullPointerException"
        ], 
        "throws": [
            "PrivilegedActionException"
        ]
    }, 
    "java.lang.Math.abs(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.forEachValue(long, Consumer)": {
        "args": [
            "long", 
            "Consumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.getHandlers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicStampedReference.getStamp()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.RectangularShape.contains(Point2D)": {
        "args": [
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZoneId.ofOffset(String, ZoneOffset)": {
        "args": [
            "String", 
            "ZoneOffset"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.MenuItem.isEnabled()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.getLogger(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "MissingResourceException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetTime.isAfter(OffsetTime)": {
        "args": [
            "OffsetTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Adjustable.setBlockIncrement(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.atZone(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CheckboxMenuItem.getMaximumAccessibleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Map.forEach(BiConsumer)": {
        "args": [
            "BiConsumer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ConcurrentModificationException"
        ], 
        "throws": []
    }, 
    "java.sql.Blob.truncate(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.stream.IntStream.of(int[])": {
        "args": [
            "int[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.setFetchSize(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Menu.add(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.minusSeconds(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.SortedMap.firstKey()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.sort(int[], int, int)": {
        "args": [
            "int[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.TextComponent.getAccessibleRole()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.offer(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.Timestamp.getNanos()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPaneAdjustable.getVisibleAmount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.isInterrupted()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.entrySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXRevocationChecker.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.valueOf(double)": {
        "args": [
            "double"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.builder()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.precision()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.withDayOfYear(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.MultipleGradientPaint.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Beans.getInstanceOf(Object, Class)": {
        "args": [
            "Object", 
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.valueOf(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.SystemFlavorMap.getFlavorsForNatives(String[])": {
        "args": [
            "String[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.setLevel(Level)": {
        "args": [
            "Level"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.time.chrono.JapaneseDate.range(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.TextAreaPeer.getPreferredSize(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.parallelSort(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.ValueRange.getMinimum()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.OperatingSystemMXBean.getSystemLoadAverage()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.min()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getDouble(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.cert.CertPathValidator.validate(CertPath, CertPathParameters)": {
        "args": [
            "CertPath", 
            "CertPathParameters"
        ], 
        "@throws": [
            "CertPathValidatorException", 
            "InvalidAlgorithmParameterException"
        ], 
        "throws": [
            "CertPathValidatorException", 
            "InvalidAlgorithmParameterException"
        ]
    }, 
    "java.nio.Buffer.position(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.rmi.server.RemoteRef.remoteToString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseChronology.eraOf(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.Dialog.toBack()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Map.containsKey(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.remove(ItemListener, ItemListener)": {
        "args": [
            "ItemListener", 
            "ItemListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendChronologyId()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.getInternationalCurrencySymbol()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.of(int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.event.TextEvent.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.SimpleBeanInfo.getBeanDescriptor()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AccessController.doPrivileged(PrivilegedAction, AccessControlContext)": {
        "args": [
            "PrivilegedAction", 
            "AccessControlContext"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.JobAttributes.getMinPage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.interfaces.DSAKey.getParams()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateBinaryStream(int, InputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "InputStream"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.KeyStoreSpi.engineGetCertificateAlias(Certificate)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Certificate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Stream.findFirst()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.getKeyEventDispatchers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Polygon.intersects(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.readUTF()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException", 
            "UTFDataFormatException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.temporal.ValueRange.getSmallestMaximum()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.setFocusTraversalPolicyProvider(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServices.hasService(Class)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.spi.AbstractSelectionKey.cancel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.addLast(E)": {
        "args": [
            "E"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ImageProducer.addConsumer(ImageConsumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ImageConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadMXBean.getThreadUserTime(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.FlatteningPathIterator.getRecursionLimit()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipEntry.getSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.mapInputMethodHighlight(InputMethodHighlight)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "InputMethodHighlight"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.time.ZonedDateTime.plusMonths(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.security.IdentityScope.removeIdentity(Identity)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Identity"
        ], 
        "@throws": [
            "KeyManagementException"
        ], 
        "throws": [
            "KeyManagementException"
        ]
    }, 
    "java.lang.reflect.Method.getReturnType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeMap.headMap(K)": {
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceContext.dragEnter(DragSourceDragEvent)": {
        "args": [
            "DragSourceDragEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.SynchronousQueue.offer(E, long, TimeUnit)": {
        "args": [
            "E", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException", 
            "NullPointerException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.text.DecimalFormat.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.CharBuffer.append(char)": {
        "args": [
            "char"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.isLightweight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ManagementFactory.getPlatformMBeanServer()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.time.zone.ZoneOffsetTransition.of(LocalDateTime, ZoneOffset, ZoneOffset)": {
        "args": [
            "LocalDateTime", 
            "ZoneOffset", 
            "ZoneOffset"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.rmi.server.RMIClassLoaderSpi.getClassAnnotation(Class)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.math.BigDecimal.setScale(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "ArithmeticException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLong.getAndIncrement()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collectors.summarizingInt(ToIntFunction)": {
        "args": [
            "ToIntFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.IdentityHashMap.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getBounds(Rectangle)": {
        "args": [
            "Rectangle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneOffsetTransitionRule.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.contains(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Runtime.availableProcessors()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URISyntaxException.getReason()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayList.forEach(Consumer)": {
        "args": [
            "Consumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.SynchronousQueue.offer(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Map.remove(Object, Object)": {
        "args": [
            "Object", 
            "Object"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.font.GlyphMetrics.getAdvance()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.addContainerListener(ContainerListener)": {
        "args": [
            "ContainerListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.MouseDragGestureRecognizer.unregisterListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ClassLoader.defineClass(String, byte[], int, int, ProtectionDomain)": {
        "args": [
            "String", 
            "byte[]", 
            "int", 
            "int", 
            "ProtectionDomain"
        ], 
        "@throws": [
            "ClassFormatError", 
            "NoClassDefFoundError", 
            "IndexOutOfBoundsException", 
            "SecurityException"
        ], 
        "throws": [
            "ClassFormatError"
        ]
    }, 
    "java.time.chrono.ChronoLocalDate.isLeapYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.highestOneBit(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuItem.getActionCommand()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.createPackedRaster(int, int, int, int, int, Point)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "Point"
        ], 
        "@throws": [
            "RasterFormatException", 
            "IllegalArgumentException", 
            "IllegalArgumentException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextArea.getPreferredSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentSampleModel.getPixels(int, int, int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ProcessBuilder.start()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException", 
            "SecurityException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.YearMonth.isValidDay(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SignatureSpi.engineSign(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "SignatureException"
        ], 
        "throws": [
            "SignatureException"
        ]
    }, 
    "java.time.temporal.Temporal.with(TemporalAdjuster)": {
        "args": [
            "TemporalAdjuster"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.image.VolatileImage.getSnapshot()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.downFocusCycle()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.IntBuffer.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DirectColorModel.isCompatibleRaster(Raster)": {
        "args": [
            "Raster"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImage.getProperty(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.of(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArraySet.removeIf(Predicate)": {
        "args": [
            "Predicate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.spi.AsynchronousChannelProvider.provider()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isAlphabetic(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.findStaticSetter(Class, String, Class)": {
        "args": [
            "Class", 
            "String", 
            "Class"
        ], 
        "@throws": [
            "NoSuchFieldException", 
            "IllegalAccessException", 
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": [
            "NoSuchFieldException", 
            "IllegalAccessException"
        ]
    }, 
    "java.beans.PropertyChangeListenerProxy.propertyChange(PropertyChangeEvent)": {
        "args": [
            "PropertyChangeEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CharsetEncoder.encodeLoop(CharBuffer, ByteBuffer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CharBuffer", 
            "ByteBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.ComponentListener.componentHidden(ComponentEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ComponentEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocketImpl.disconnect()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.listFiles()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.putIfAbsent(K, V)": {
        "args": [
            "K", 
            "V"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.JDBCType.getVendorTypeNumber()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.RenderingHints.putAll(Map)": {
        "args": [
            "Map"
        ], 
        "@throws": [
            "ClassCastException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.setDataElements(int, int, Object, DataBuffer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "Object", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Toolkit.setDynamicLayout(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.awt.TextArea.appendText(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ClientInfoStatus.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.sum()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.minusSeconds(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ManagementFactory.getMemoryPoolMXBeans()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoDate.with(TemporalField, long)": {
        "args": [
            "TemporalField", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.PKCS12Attribute.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceAdapter.dragMouseMoved(DragSourceDragEvent)": {
        "args": [
            "DragSourceDragEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Permission.equals(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuItem.setShortcut(MenuShortcut)": {
        "args": [
            "MenuShortcut"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.helpQuiesce()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRLSelector.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.WeakHashMap.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.isFocusCycleRoot()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.addPropertyChangeListener(PropertyChangeListener)": {
        "args": [
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.isTerminating()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandle.invokeExact(Object[])": {
        "args": [
            "Object[]"
        ], 
        "@throws": [
            "WrongMethodTypeException", 
            "Throwable"
        ], 
        "throws": [
            "Throwable"
        ]
    }, 
    "java.sql.PreparedStatement.setArray(int, Array)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Array"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.interfaces.DSAKeyPairGenerator.initialize(DSAParams, SecureRandom)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DSAParams", 
            "SecureRandom"
        ], 
        "@throws": [
            "InvalidParameterException"
        ], 
        "throws": [
            "InvalidParameterException"
        ]
    }, 
    "java.rmi.activation.ActivationDesc.getData()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.pop()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.awt.Robot.createScreenCapture(Rectangle)": {
        "args": [
            "Rectangle"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getBigDecimal(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.CallableStatement.setBoolean(String, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "boolean"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Object.wait(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalMonitorStateException", 
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.Scanner.nextByte()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InputMismatchException", 
            "NoSuchElementException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsMultipleResultSets()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.logging.LogRecord.setParameters(Object[])": {
        "args": [
            "Object[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.FormatFlagsConversionMismatchException.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Dialog.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Identity.toString()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.time.temporal.WeekFields.getFirstDayOfWeek()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.HashSet.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URISyntaxException.getInput()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.setCurve(double, double, double, double, double, double, double, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Period.plus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.hashCode()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandle.invokeWithArguments(Object[])": {
        "args": [
            "Object[]"
        ], 
        "@throws": [
            "ClassCastException", 
            "WrongMethodTypeException", 
            "Throwable"
        ], 
        "throws": [
            "Throwable"
        ]
    }, 
    "java.sql.Connection.setSavepoint(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.DomainCombiner.combine(ProtectionDomain[], ProtectionDomain[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ProtectionDomain[]", 
            "ProtectionDomain[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.PopupMenu.getParent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongFieldUpdater.compareAndSet(T, long, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "long", 
            "long"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.util.Date.before(Date)": {
        "args": [
            "Date"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Collections.fill(List, T)": {
        "args": [
            "List", 
            "T"
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.net.ProxySelector.select(URI)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "URI"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.Policy.refresh()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseDate.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Area.intersect(Area)": {
        "args": [
            "Area"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.RowId.toString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.bitLength()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.floatValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.createCheckboxMenuItem(CheckboxMenuItem)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CheckboxMenuItem"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.util.GregorianCalendar.getCalendarType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Button.getMaximumAccessibleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.reverseOrder()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.addSubjectAlternativeName(int, byte[])": {
        "args": [
            "int", 
            "byte[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.beans.beancontext.BeanContextSupport.getChildBeanContextMembershipListener(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Dialog.setShape(Shape)": {
        "args": [
            "Shape"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.EnumMap.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyChangeSupport.addPropertyChangeListener(String, PropertyChangeListener)": {
        "args": [
            "String", 
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.prepareCall(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.AWTEventMulticaster.inputMethodTextChanged(InputMethodEvent)": {
        "args": [
            "InputMethodEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicReference.compareAndSet(V, V)": {
        "args": [
            "V", 
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.unreflectConstructor(Constructor)": {
        "args": [
            "Constructor"
        ], 
        "@throws": [
            "IllegalAccessException", 
            "NullPointerException"
        ], 
        "throws": [
            "IllegalAccessException"
        ]
    }, 
    "java.time.chrono.ChronoLocalDate.until(Temporal, TemporalUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Temporal", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.Math.cosh(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SignatureSpi.engineInitSign(PrivateKey)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "PrivateKey"
        ], 
        "@throws": [
            "InvalidKeyException"
        ], 
        "throws": [
            "InvalidKeyException"
        ]
    }, 
    "java.awt.image.RasterOp.getBounds2D(Raster)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Raster"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.getParallelism()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Random.longs(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDate.adjustInto(Temporal)": {
        "args": [
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.LongSummaryStatistics.getAverage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicInteger.getAndIncrement()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.isCompatibleRaster(Raster)": {
        "args": [
            "Raster"
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.time.temporal.Temporal.isSupported(TemporalUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "TemporalUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Path.resolveSibling(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "InvalidPathException"
        ], 
        "throws": []
    }, 
    "java.awt.font.TextHitInfo.getOffsetHit(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.getActiveCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.CharBuffer.length()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.areExtraMouseButtonsEnabled()": {
        "args": [
            ""
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.util.AbstractSequentialList.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MultipleGradientPaint.getCycleMethod()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.GatheringByteChannel.write(ByteBuffer[], int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "NonWritableChannelException", 
            "ClosedChannelException", 
            "AsynchronousCloseException", 
            "ClosedByInterruptException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.LinkedBlockingDeque.pollFirst(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.zip.Deflater.getAdler()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Hashtable.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalAmount.subtractFrom(Temporal)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.io.DataOutputStream.write(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.file.Files.exists(Path, LinkOption[])": {
        "args": [
            "Path", 
            "LinkOption[]"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServiceProvider.getCurrentServiceSelectors(BeanContextServices, Class)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BeanContextServices", 
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FilePermission.getActions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getData(Rectangle)": {
        "args": [
            "Rectangle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.setClientInfo(String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "SQLClientInfoException"
        ], 
        "throws": [
            "SQLClientInfoException"
        ]
    }, 
    "java.lang.Class.getDeclaringClass()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.util.Arrays.copyOfRange(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.absolutePath()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.putFloat(int, float)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "float"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.lang.Character.isValidCodePoint(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasWaiters()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalMonitorStateException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Arc2D.setArc(double, double, double, double, double, double, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Collator.compare(String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getNClob(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.AbstractCollection.containsAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.withZoneSameInstant(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.toArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Guard.checkGuard(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.awt.geom.AffineTransform.getScaleInstance(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Observable.hasChanged()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getAccessibleContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Permission.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipEntry.getMethod()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.getShortParameter(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.font.FontRenderContext.isTransformed()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getNClob(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.MissingFormatArgumentException.getFormatSpecifier()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.IsoChronology.dateYearDay(Era, int, int)": {
        "args": [
            "Era", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.nio.file.spi.FileSystemProvider.newDirectoryStream(Path, Filter)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Path", 
            "Filter"
        ], 
        "@throws": [
            "NotDirectoryException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.OffsetTime.withMinute(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.JobAttributes.getPageRanges()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.hasFocus()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.peekNextLocalTask()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.getAccessibleStateSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.take()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.lang.reflect.Executable.getAnnotatedParameterTypes()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.userRoot()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.Deque.remove()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArraySet.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.BaseStream.close()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.WindowAdapter.windowClosed(WindowEvent)": {
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyPairGenerator.getInstance(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "NoSuchProviderException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "NoSuchAlgorithmException", 
            "NoSuchProviderException"
        ]
    }, 
    "java.util.concurrent.locks.StampedLock.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Color.getColor(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FontMetrics.stringWidth(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.DoubleAdder.intValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.HttpCookie.getMaxAge()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.EnumConstantNotPresentException.constantName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Array.getShort(Object, int)": {
        "args": [
            "Object", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ]
    }, 
    "java.util.WeakHashMap.get(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.DatagramChannel.read(ByteBuffer[])": {
        "args": [
            "ByteBuffer[]"
        ], 
        "@throws": [
            "NotYetConnectedException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.ScheduledThreadPoolExecutor.decorateTask(Runnable, RunnableScheduledFuture)": {
        "args": [
            "Runnable", 
            "RunnableScheduledFuture"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.setCatalog(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Dimension.setSize(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.ChronoField.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509Certificate.getSubjectX500Principal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.RadialGradientPaint.getRadius()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.StampedLock.readLock()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.get(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.text.DecimalFormat.setPositivePrefix(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.Pack200.properties()": {
        "Abstract": [
            "Y", 
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahDate.lengthOfYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.plus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicInteger.get()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BandedSampleModel.setSample(int, int, int, double, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "double", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.MonthDay.range(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.clone()": {
        "args": [
            ""
        ], 
        "@throws": [
            "OutOfMemoryError"
        ], 
        "throws": []
    }, 
    "java.sql.Connection.createArrayOf(String, Object[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Object[]"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.beans.PropertyEditor.setAsText(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": [
            "IllegalArgumentException"
        ]
    }, 
    "java.util.Date.getYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.contentEquals(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.getNano()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.remove(WindowFocusListener, WindowFocusListener)": {
        "args": [
            "WindowFocusListener", 
            "WindowFocusListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.setHoldability(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.channels.DatagramChannel.validOps()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.childDeserializedHook(Object, BCSChild)": {
        "args": [
            "Object", 
            "BCSChild"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.Matcher.matches()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkMulticast(InetAddress, byte)": {
        "args": [
            "InetAddress", 
            "byte"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Map.getValue()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.net.HttpCookie.hasExpired()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.RenderingHints.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.net.HttpURLConnection.setInstanceFollowRedirects(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextContainerProxy.getContainer()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.supplyAsync(Supplier)": {
        "args": [
            "Supplier"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataOutput.writeLong(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.NavigableSet.lower(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.print.Printable.print(Graphics, PageFormat, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Graphics", 
            "PageFormat", 
            "int"
        ], 
        "@throws": [
            "PrinterException"
        ], 
        "throws": [
            "PrinterException"
        ]
    }, 
    "java.nio.channels.FileChannel.write(ByteBuffer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Thread.join()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.Locale.toLanguageTag()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Button.getAccessibleActionDescription(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.getCtrlY2()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.ObjDoubleConsumer.accept(T, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.emptySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.setDecimalSeparator(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.add(BigDecimal, MathContext)": {
        "args": [
            "BigDecimal", 
            "MathContext"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.keyUp(Event, int)": {
        "args": [
            "Event", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayDeque.toArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.withDayOfMonth(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.Container.print(Graphics)": {
        "args": [
            "Graphics"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.update(Graphics)": {
        "args": [
            "Graphics"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.WeakHashMap.put(K, V)": {
        "args": [
            "K", 
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Map.computeIfAbsent(K, Function)": {
        "args": [
            "K", 
            "Function"
        ], 
        "@throws": [
            "NullPointerException", 
            "UnsupportedOperationException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.getParameterMetaData()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.KeyPairGeneratorSpi.generateKeyPair()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TrayIcon.getActionCommand()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.DatagramChannel.bind(SocketAddress)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "SocketAddress"
        ], 
        "@throws": [
            "AlreadyBoundException", 
            "UnsupportedAddressTypeException", 
            "ClosedChannelException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.CheckboxMenuItem.removeItemListener(ItemListener)": {
        "args": [
            "ItemListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.indexOf(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsPositionedUpdate()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.text.DecimalFormat.getPositiveSuffix()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.node(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.nio.file.FileStore.getTotalSpace()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.peer.ComponentPeer.flip(int, int, int, int, FlipContents)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "FlipContents"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509Certificate.getVersion()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.getChar()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "BufferUnderflowException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.getMousePosition()": {
        "args": [
            ""
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.lang.reflect.Array.getBoolean(Object, int)": {
        "args": [
            "Object", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ]
    }, 
    "java.time.LocalDate.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.isQueued(Thread)": {
        "args": [
            "Thread"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.ShortBuffer.get(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.PriorityBlockingQueue.toArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CharsetDecoder.decode(ByteBuffer)": {
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [
            "IllegalStateException", 
            "MalformedInputException", 
            "UnmappableCharacterException"
        ], 
        "throws": [
            "CharacterCodingException"
        ]
    }, 
    "java.sql.Statement.setLargeMaxRows(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Dialog.hide()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.DayOfWeek.from(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.lang.instrument.Instrumentation.getObjectSize(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.HashMap.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.getTextPlainUnicodeFlavor()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneOffsetTransitionRule.createTransition(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.peer.DropTargetContextPeer.getTargetActions()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsBatchUpdates()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.channels.SelectionKey.isConnectable()": {
        "args": [
            ""
        ], 
        "@throws": [
            "CancelledKeyException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadLocalRandom.longs(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.io.PrintWriter.print(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.spi.CollatorProvider.getInstance(Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.net.DatagramSocket.send(DatagramPacket)": {
        "args": [
            "DatagramPacket"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException", 
            "PortUnreachableException", 
            "IllegalBlockingModeException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.font.OpenType.getFontTable(int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTarget.setDefaultActions(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsDevice.isWindowTranslucencySupported(WindowTranslucency)": {
        "args": [
            "WindowTranslucency"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.isAlphaPremultiplied()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.min(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalAccessor.isSupported(TemporalField)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.ComponentEvent.getComponent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.annotation.IncompleteAnnotationException.elementName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.AttributedString.addAttribute(Attribute, Object, int, int)": {
        "args": [
            "Attribute", 
            "Object", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationGroupDesc.getClassName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLOutput.writeRef(Ref)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Ref"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.BufferCapabilities.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.getImage(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedTransferQueue.take()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.TimeZone.getDefault()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.isDecimalSeparatorAlwaysShown()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyChangeEvent.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.AnnotatedWildcardType.getAnnotatedLowerBounds()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.charValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.NetworkInterface.getIndex()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Dictionary.put(K, V)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K", 
            "V"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.PixelGrabber.setColorModel(ColorModel)": {
        "args": [
            "ColorModel"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.CookiePolicy.shouldAccept(URI, HttpCookie)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "URI", 
            "HttpCookie"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.before(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayList.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.applet.Applet.getParameterInfo()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CharsetDecoder.decode(ByteBuffer, CharBuffer, boolean)": {
        "args": [
            "ByteBuffer", 
            "CharBuffer", 
            "boolean"
        ], 
        "@throws": [
            "IllegalStateException", 
            "CoderMalfunctionError"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadLocalRandom.doubles(long, double, double)": {
        "args": [
            "long", 
            "double", 
            "double"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.BitSet.clear(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistEra.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeMap.firstEntry()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.unmodifiableCollection(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDateTime.minus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.security.Key.getFormat()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.RobotPeer.mousePress(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.FileChannel.map(MapMode, long, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "MapMode", 
            "long", 
            "long"
        ], 
        "@throws": [
            "NonReadableChannelException", 
            "NonWritableChannelException", 
            "IllegalArgumentException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.LinkedList.peek()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.minusSeconds(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.temporal.TemporalAccessor.get(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Arc2D.setAngleStart(double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.getFetchDirection()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.ObjectStreamClass.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.element()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.net.InetSocketAddress.getAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Parameter.isSynthetic()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.log(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Ellipse2D.getBounds2D()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RemoteRef.invoke(Remote, Method, Object[], long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Remote", 
            "Method", 
            "Object[]", 
            "long"
        ], 
        "@throws": [
            "Exception"
        ], 
        "throws": [
            "Exception"
        ]
    }, 
    "java.util.Set.clear()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.time.Duration.ofSeconds(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.subdivide(double[], int, double[], int, double[], int)": {
        "args": [
            "double[]", 
            "int", 
            "double[]", 
            "int", 
            "double[]", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Random.longs()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.applet.AppletContext.showStatus(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ShortBuffer.duplicate()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragGestureRecognizer.fireDragGestureRecognized(int, Point)": {
        "args": [
            "int", 
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.scalb(double, int)": {
        "args": [
            "double", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferDouble.getElem(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseEvent.getX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.HttpCookie.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsEnvironment.getMaximumWindowBounds()": {
        "args": [
            ""
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.util.logging.Level.getResourceBundleName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.plus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.Font.getFamily()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.createCompatibleWritableRaster(int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "RasterFormatException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.childJustRemovedHook(Object, BCSChild)": {
        "args": [
            "Object", 
            "BCSChild"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.CharArrayReader.reset()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.locks.ReadWriteLock.writeLock()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.hasNextShort(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.im.spi.InputMethodDescriptor.hasDynamicLocaleList()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsConfiguration.getImageCapabilities()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Stream.of(T)": {
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.FloatBuffer.compareTo(FloatBuffer)": {
        "args": [
            "FloatBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.HttpCookie.getValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Introspector.getBeanInfo(Class, int)": {
        "args": [
            "Class", 
            "int"
        ], 
        "@throws": [
            "IntrospectionException"
        ], 
        "throws": [
            "IntrospectionException"
        ]
    }, 
    "java.nio.channels.spi.AbstractSelectableChannel.configureBlocking(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.OptionalInt.of(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.setForeground(Color)": {
        "args": [
            "Color"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.setLine(double, double, double, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Map.size()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Security.getProviders(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "InvalidParameterException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.function.Predicate.test(T)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendInstant()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.GlyphVector.getGlyphMetrics(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentNavigableMap.descendingKeySet()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.isDestroyed()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Robot.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.withFixedOffsetZone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Driver.getParentLogger()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLFeatureNotSupportedException"
        ]
    }, 
    "java.awt.dnd.DragSourceAdapter.dragExit(DragSourceEvent)": {
        "args": [
            "DragSourceEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Period.withMonths(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FileDialog.setDirectory(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.InputEvent.isShiftDown()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXParameters.setCertPathCheckers(List)": {
        "args": [
            "List"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.lang.management.MemoryPoolMXBean.isUsageThresholdSupported()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.MemoryPoolMXBean.getUsageThresholdCount()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.Deque.add(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "IllegalStateException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateArray(String, Array)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Array"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.URI.toASCIIString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRLEntry.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.CookieManager.setCookiePolicy(CookiePolicy)": {
        "args": [
            "CookiePolicy"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadInfo.isSuspended()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLOutput.writeRowId(RowId)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "RowId"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.cert.TrustAnchor.getCAName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Period.withYears(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.RectangularShape.getY()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CountedCompleter.helpComplete(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.toArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Executors.callable(Runnable, T)": {
        "args": [
            "Runnable", 
            "T"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.stream.StreamSupport.longStream(OfLong, boolean)": {
        "args": [
            "OfLong", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.readLong()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.Provider.putAll(Map)": {
        "args": [
            "Map"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.minus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.logging.Logger.getAnonymousLogger()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Timestamp.compareTo(Date)": {
        "args": [
            "Date"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.BorderLayout.layoutContainer(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FilenameFilter.accept(File, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "File", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.prepareStatement(String, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.text.DateFormat.getAvailableLocales()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SplittableRandom.ints()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.createTempFile(String, String, FileAttribute[])": {
        "args": [
            "String", 
            "String", 
            "FileAttribute[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Scrollbar.setValues(int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.PrinterIOException.getIOException()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.List.retainAll(Collection)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Toolkit.createCanvas(Canvas)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Canvas"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.IntBuffer.put(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.getLayoutPath()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.getCanonicalPath()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.management.PlatformLoggingMXBean.setLoggerLevel(String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.logging.Logger.config(Supplier)": {
        "args": [
            "Supplier"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Rectangle2D.setRect(double, double, double, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuItem.getLabel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.createScrollbar(Scrollbar)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Scrollbar"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.util.Deque.addLast(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "IllegalStateException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.event.WindowListener.windowOpened(WindowEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.format(DateTimeFormatter)": {
        "args": [
            "DateTimeFormatter"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.putBoolean(String, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "boolean"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.lang.Double.shortValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertificateFactorySpi.engineGenerateCertPath(List)": {
        "args": [
            "List"
        ], 
        "@throws": [
            "CertificateException", 
            "UnsupportedOperationException"
        ], 
        "throws": [
            "CertificateException"
        ]
    }, 
    "java.util.zip.Inflater.finished()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.getPassword()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDate.from(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.Toolkit.createMenuBar(MenuBar)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "MenuBar"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.awt.MenuComponent.getBounds()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getObject(int, Map)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Map"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.chrono.MinguoChronology.zonedDateTime(Instant, ZoneId)": {
        "args": [
            "Instant", 
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Clob.setAsciiStream(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.chrono.ChronoZonedDateTime.withLaterOffsetAtOverlap()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "DateTimeException", 
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.Deque.offerLast(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.text.DecimalFormat.setMaximumFractionDigits(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Cursor.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.putLong(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicReferenceArray.getAndAccumulate(int, E, BinaryOperator)": {
        "args": [
            "int", 
            "E", 
            "BinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Executors.privilegedCallableUsingCurrentClassLoader(Callable)": {
        "args": [
            "Callable"
        ], 
        "@throws": [
            "NullPointerException", 
            "AccessControlException"
        ], 
        "throws": []
    }, 
    "java.util.logging.LogRecord.setLoggerName(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.getPixels(int, int, int, int, double[])": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "double[]"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.management.MemoryPoolMXBean.isUsageThresholdExceeded()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.lang.StrictMath.abs(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendOptional(DateTimeFormatter)": {
        "args": [
            "DateTimeFormatter"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ScheduledThreadPoolExecutor.setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.RobotPeer.mouseRelease(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getTime(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.stream.LongStream.reduce(long, LongBinaryOperator)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "LongBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextChildSupport.addVetoableChangeListener(String, VetoableChangeListener)": {
        "args": [
            "String", 
            "VetoableChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingQueue.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSetMetaData.getColumnClassName(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.dnd.DropTargetContext.getDropTarget()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Dimension2D.clone()": {
        "args": [
            ""
        ], 
        "@throws": [
            "OutOfMemoryError"
        ], 
        "throws": []
    }, 
    "java.awt.event.AdjustmentEvent.getValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.DelayQueue.peek()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.getISO3Country()": {
        "args": [
            ""
        ], 
        "@throws": [
            "MissingResourceException"
        ], 
        "throws": [
            "MissingResourceException"
        ]
    }, 
    "java.awt.Graphics.fillPolygon(int[], int[], int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int[]", 
            "int[]", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ResourceBundle.clearCache(ClassLoader)": {
        "args": [
            "ClassLoader"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.cert.PolicyNode.getChildren()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.IDN.toASCII(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.TreeMap.put(K, V)": {
        "args": [
            "K", 
            "V"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.beans.Statement.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.add(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.toCharArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.parse(String, Map)": {
        "args": [
            "String", 
            "Map"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.add(WindowStateListener, WindowStateListener)": {
        "args": [
            "WindowStateListener", 
            "WindowStateListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.offerLast(E)": {
        "args": [
            "E"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ExecutorService.shutdownNow()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.List.getPreferredSize(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.FileSystem.newWatchService()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.applet.AppletStub.getCodeBase()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.spi.AbstractSelector.implCloseSelector()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.DataBufferShort.getData(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GridLayout.setHgap(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Composite.createContext(ColorModel, ColorModel, RenderingHints)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ColorModel", 
            "ColorModel", 
            "RenderingHints"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SortedSet.tailSet(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.NetworkChannel.supportedOptions()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.addPreferenceChangeListener(PreferenceChangeListener)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "PreferenceChangeListener"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLong.compareAndSet(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.newThread(ForkJoinPool)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ForkJoinPool"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ImageProducer.isConsumer(ImageConsumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ImageConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Field.set(Object, Object)": {
        "args": [
            "Object", 
            "Object"
        ], 
        "@throws": [
            "IllegalAccessException", 
            "IllegalArgumentException", 
            "NullPointerException", 
            "ExceptionInInitializerError"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "IllegalAccessException"
        ]
    }, 
    "java.lang.Thread.getThreadGroup()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextComponent.getCaretPosition()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Button.setActionCommand(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collectors.toMap(Function, Function, BinaryOperator)": {
        "args": [
            "Function", 
            "Function", 
            "BinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertPathBuilder.getRevocationChecker()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.reduceValuesToDouble(long, ToDoubleFunction, double, DoubleBinaryOperator)": {
        "args": [
            "long", 
            "ToDoubleFunction", 
            "double", 
            "DoubleBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.FeatureDescriptor.setPreferred(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.fill3DRect(int, int, int, int, boolean)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.ShapeGraphicAttribute.draw(Graphics2D, float, float)": {
        "args": [
            "Graphics2D", 
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.Attributes.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.SocketHandler.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.io.PushbackInputStream.unread(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Window.isShowing()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Boolean.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Optional.get()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.io.PrintWriter.checkError()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahChronology.dateYearDay(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.time.ZoneOffset.of(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.nio.file.attribute.UserDefinedFileAttributeView.name()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Annotation.getValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.hasQueuedThreads()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.getAccessibleSelection()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Choice.getAccessibleRole()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Rectangle.outcode(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GridLayout.preferredLayoutSize(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.getYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Formatter.getTail(Handler)": {
        "args": [
            "Handler"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.Matcher.appendReplacement(StringBuffer, String)": {
        "args": [
            "StringBuffer", 
            "String"
        ], 
        "@throws": [
            "IllegalStateException", 
            "IllegalArgumentException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.setSerialNumber(BigInteger)": {
        "args": [
            "BigInteger"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Rectangle.getX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.Attributes.containsValue(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.binarySearch(List, T)": {
        "args": [
            "List", 
            "T"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.awt.SplashScreen.setImageURL(URL)": {
        "args": [
            "URL"
        ], 
        "@throws": [
            "NullPointerException", 
            "IOException", 
            "IllegalStateException"
        ], 
        "throws": [
            "NullPointerException", 
            "IOException", 
            "IllegalStateException"
        ]
    }, 
    "java.util.Calendar.getMinimum(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SplittableRandom.doubles(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.logging.StreamHandler.isLoggable(LogRecord)": {
        "args": [
            "LogRecord"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.getInstance(TimeZone, Locale)": {
        "args": [
            "TimeZone", 
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.asSubclass(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.awt.Toolkit.isModalExclusionTypeSupported(ModalExclusionType)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ModalExclusionType"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Ellipse2D.getWidth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyChangeSupport.fireIndexedPropertyChange(String, int, int, int)": {
        "args": [
            "String", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RemoteCall.getOutputStream()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.ImageConsumer.setProperties(Hashtable)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Hashtable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Provider.load(InputStream)": {
        "args": [
            "InputStream"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.PriorityQueue.contains(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.copySign(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDate.minus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.math.BigInteger.modPow(BigInteger, BigInteger)": {
        "args": [
            "BigInteger", 
            "BigInteger"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.Locale.forLanguageTag(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.LongAdder.longValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStoreSpi.engineGetEntry(String, ProtectionParameter)": {
        "args": [
            "String", 
            "ProtectionParameter"
        ], 
        "@throws": [
            "KeyStoreException", 
            "NoSuchAlgorithmException", 
            "UnrecoverableEntryException", 
            "UnrecoverableKeyException"
        ], 
        "throws": [
            "KeyStoreException", 
            "NoSuchAlgorithmException", 
            "UnrecoverableEntryException"
        ]
    }, 
    "java.time.YearMonth.plus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.DelayQueue.put(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Field.getShort(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "IllegalAccessException", 
            "IllegalArgumentException", 
            "NullPointerException", 
            "ExceptionInInitializerError"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "IllegalAccessException"
        ]
    }, 
    "java.lang.StrictMath.sinh(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ManagementFactory.getThreadMXBean()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.atTime(OffsetTime)": {
        "args": [
            "OffsetTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.getDataElements(int, Object)": {
        "args": [
            "int", 
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "ArrayIndexOutOfBoundsException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.nio.file.Path.relativize(Path)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Path"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.FontMetrics.getLineMetrics(CharacterIterator, int, int, Graphics)": {
        "args": [
            "CharacterIterator", 
            "int", 
            "int", 
            "Graphics"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.toLocalizedPattern()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.with(TemporalAdjuster)": {
        "args": [
            "TemporalAdjuster"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.net.InetSocketAddress.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRLEntry.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferDouble.setElem(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.nextDown(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getCatalogSeparator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.reflect.Array.setLong(Object, int, long)": {
        "args": [
            "Object", 
            "int", 
            "long"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ]
    }, 
    "java.security.MessageDigest.getProvider()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.generic()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.InetAddress.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetDragEvent.getCurrentDataFlavors()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Double.hashCode(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.truncatedTo(TemporalUnit)": {
        "args": [
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.getMinimumSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StreamTokenizer.nextToken()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.SocketImplFactory.createSocketImpl()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SocketChannel.setOption(SocketOption, T)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "SocketOption", 
            "T"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IllegalArgumentException", 
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.MenuComponent.getAccessibleSelectionCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.RecursiveTask.exec()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.drawLine(int, int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.indexOf(E, int)": {
        "args": [
            "E", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.logging.LogRecord.setMillis(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GridLayout.setColumns(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.getTime(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.datatransfer.DataFlavor.tryToLoadClass(String, ClassLoader)": {
        "args": [
            "String", 
            "ClassLoader"
        ], 
        "@throws": [
            "ClassNotFoundException"
        ], 
        "throws": [
            "ClassNotFoundException"
        ]
    }, 
    "java.io.File.isFile()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.io.File.length()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.io.InputStreamReader.close()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.beans.SimpleBeanInfo.getAdditionalBeanInfo()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.sort(long[])": {
        "args": [
            "long[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentSampleModel.setDataElements(int, int, Object, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "Object", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.MenuPeer.addSeparator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.length()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.get(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.Map.setValue(V)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "V"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.net.Inet6Address.isMCGlobal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collectors.toMap(Function, Function)": {
        "args": [
            "Function", 
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getItemCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics2D.translate(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.Channels.newOutputStream(AsynchronousByteChannel)": {
        "args": [
            "AsynchronousByteChannel"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Month.minus(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPaneAdjustable.setVisibleAmount(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "AWTError"
        ], 
        "throws": []
    }, 
    "java.util.logging.Logger.log(Level, String, Object[])": {
        "args": [
            "Level", 
            "String", 
            "Object[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.from(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.Locale.getDisplayScript()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GridBagLayout.GetMinSize(Container, GridBagLayoutInfo)": {
        "args": [
            "Container", 
            "GridBagLayoutInfo"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.add(ItemListener, ItemListener)": {
        "args": [
            "ItemListener", 
            "ItemListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.isHeldByCurrentThread()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getRef(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.DataOutput.writeChars(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.StackTraceElement.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.get()": {
        "args": [
            ""
        ], 
        "@throws": [
            "CancellationException", 
            "ExecutionException", 
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException", 
            "ExecutionException"
        ]
    }, 
    "java.awt.image.DataBufferInt.getElem(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.ContentHandlerFactory.createContentHandler(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getLocationOnScreen()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Path.getNameCount()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.setEnabled(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FileOutputStream.getFD()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.YearMonth.plusMonths(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.rmi.activation.Activatable.exportObject(Remote, String, MarshalledObject, boolean, int)": {
        "args": [
            "Remote", 
            "String", 
            "MarshalledObject", 
            "boolean", 
            "int"
        ], 
        "@throws": [
            "ActivationException", 
            "RemoteException", 
            "UnsupportedOperationException"
        ], 
        "throws": [
            "ActivationException", 
            "RemoteException"
        ]
    }, 
    "java.awt.event.KeyEvent.getExtendedKeyCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TexturePaint.getTransparency()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.setToRotation(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.SocketOption.type()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseChronology.localDateTime(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.SimpleFileVisitor.visitFileFailed(T, IOException)": {
        "args": [
            "T", 
            "IOException"
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.temporal.TemporalAdjusters.firstDayOfNextMonth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.setSize(Dimension)": {
        "args": [
            "Dimension"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentSampleModel.setSample(int, int, int, int, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRLSelector.setDateAndTime(Date)": {
        "args": [
            "Date"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Rectangle.getLocation()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServices.removeBeanContextServicesListener(BeanContextServicesListener)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BeanContextServicesListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.toHours()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseMotionListener.mouseDragged(MouseEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.Attributes.getValue(Name)": {
        "args": [
            "Name"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Key.getEncoded()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.LoaderHandler.loadClass(URL, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "URL", 
            "String"
        ], 
        "@throws": [
            "MalformedURLException", 
            "ClassNotFoundException"
        ], 
        "throws": [
            "MalformedURLException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.time.zone.ZoneOffsetTransition.isGap()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SortedMap.comparator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.RenderingHints.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Double.valueOf(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataInput.readFully(byte[], int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.channels.ServerSocketChannel.getLocalAddress()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.CardLayout.addLayoutComponent(Component, Object)": {
        "args": [
            "Component", 
            "Object"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.erase()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.color.ICC_ColorSpace.getProfile()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.submit(ForkJoinTask)": {
        "args": [
            "ForkJoinTask"
        ], 
        "@throws": [
            "NullPointerException", 
            "RejectedExecutionException"
        ], 
        "throws": []
    }, 
    "java.util.EventObject.getSource()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.JarEntry.getCodeSigners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.EnumMap.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.get(T)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.getPoolSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.getMinute()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Frame.setIconImage(Image)": {
        "args": [
            "Image"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.LogManager.readConfiguration(InputStream)": {
        "args": [
            "InputStream"
        ], 
        "@throws": [
            "SecurityException", 
            "IOException"
        ], 
        "throws": [
            "IOException", 
            "SecurityException"
        ]
    }, 
    "java.lang.reflect.Method.getGenericParameterTypes()": {
        "args": [
            ""
        ], 
        "@throws": [
            "GenericSignatureFormatError", 
            "TypeNotPresentException", 
            "MalformedParameterizedTypeException"
        ], 
        "throws": []
    }, 
    "java.util.TreeSet.first()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.awt.TextComponent.getText()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.getClipBounds(Rectangle)": {
        "args": [
            "Rectangle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ThreadLocal.set(T)": {
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.reduceToLong(long, ToLongBiFunction, long, LongBinaryOperator)": {
        "args": [
            "long", 
            "ToLongBiFunction", 
            "long", 
            "LongBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ClassLoader.getClassLoadingLock(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Process.getInputStream()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.hasWrappers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.finalize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Menu.countItems()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.WindowAdapter.windowDeactivated(WindowEvent)": {
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertStore.getInstance(String, CertStoreParameters, String)": {
        "args": [
            "String", 
            "CertStoreParameters", 
            "String"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "InvalidAlgorithmParameterException", 
            "NoSuchProviderException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "InvalidAlgorithmParameterException", 
            "NoSuchAlgorithmException", 
            "NoSuchProviderException"
        ]
    }, 
    "java.sql.DriverManager.getLogStream()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentNavigableMap.tailMap(K)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Container.getListeners(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.Provider.getVersion()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Optional.empty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getPackage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.Charset.name()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertificateRevokedException.getInvalidityDate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ScheduledThreadPoolExecutor.submit(Runnable, T)": {
        "args": [
            "Runnable", 
            "T"
        ], 
        "@throws": [
            "RejectedExecutionException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Rectangle.setSize(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getEnclosingConstructor()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.security.cert.TrustAnchor.getTrustedCert()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.removePreferenceChangeListener(PreferenceChangeListener)": {
        "args": [
            "PreferenceChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Button.addNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicInteger.weakCompareAndSet(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetContext.getComponent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.OutputStream.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Vector.copyInto(Object[])": {
        "args": [
            "Object[]"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException", 
            "ArrayStoreException"
        ], 
        "throws": []
    }, 
    "java.lang.ClassLoader.defineClass(String, ByteBuffer, ProtectionDomain)": {
        "args": [
            "String", 
            "ByteBuffer", 
            "ProtectionDomain"
        ], 
        "@throws": [
            "ClassFormatError", 
            "NoClassDefFoundError", 
            "SecurityException"
        ], 
        "throws": [
            "ClassFormatError"
        ]
    }, 
    "java.sql.DatabaseMetaData.getDriverVersion()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.prefs.Preferences.systemNodeForPackage(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.PageAttributes.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.PKCS8EncodedKeySpec.getFormat()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.MonthDay.atYear(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.HijrahChronology.isLeapYear(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextHitInfo.isLeadingEdge()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentSampleModel.getScanlineStride()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.ItemEvent.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Certificate.getPublicKey()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Checkbox.removeItemListener(ItemListener)": {
        "args": [
            "ItemListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.DisplayMode.getWidth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.quietlyComplete()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DriverManager.deregisterDriver(Driver)": {
        "args": [
            "Driver"
        ], 
        "@throws": [
            "SQLException", 
            "SecurityException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.file.Files.getAttribute(Path, String, LinkOption[])": {
        "args": [
            "Path", 
            "String", 
            "LinkOption[]"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IllegalArgumentException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.chrono.ChronoLocalDateTime.atZone(ZoneId)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Desktop.isDesktopSupported()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getAnnotation(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.next()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.Channel.isOpen()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.getRed(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "ArrayIndexOutOfBoundsException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.MenuItem.getCurrentAccessibleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SplittableRandom.doubles(long, double, double)": {
        "args": [
            "long", 
            "double", 
            "double"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.zip.InflaterInputStream.reset()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.event.ContainerListener.componentRemoved(ContainerEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ContainerEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Rectangle.intersection(Rectangle)": {
        "args": [
            "Rectangle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.hashCode(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.storesUpperCaseQuotedIdentifiers()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.StringBuilder.append(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RMIClassLoaderSpi.getClassLoader(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "MalformedURLException", 
            "SecurityException"
        ], 
        "throws": [
            "MalformedURLException"
        ]
    }, 
    "java.io.ObjectOutputStream.enableReplaceObject(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.lang.reflect.Method.getGenericReturnType()": {
        "args": [
            ""
        ], 
        "@throws": [
            "GenericSignatureFormatError", 
            "TypeNotPresentException", 
            "MalformedParameterizedTypeException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ScheduledExecutorService.scheduleWithFixedDelay(Runnable, long, long, TimeUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Runnable", 
            "long", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "RejectedExecutionException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.Math.cos(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicReference.updateAndGet(UnaryOperator)": {
        "args": [
            "UnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.of(int, int, int, int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.lang.Character.isLetter(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahEra.of(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.Spliterator.forEachRemaining(DoubleConsumer)": {
        "args": [
            "DoubleConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CharsetEncoder.malformedInputAction()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistChronology.prolepticYear(Era, int)": {
        "args": [
            "Era", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.BreakIterator.getWordInstance()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateBytes(String, byte[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "byte[]"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Dimension.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ListResourceBundle.handleKeySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServices.releaseService(BeanContextChild, Object, Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BeanContextChild", 
            "Object", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationSystem.shutdown()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "RemoteException"
        ], 
        "throws": [
            "RemoteException"
        ]
    }, 
    "java.net.URLClassLoader.findResource(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.spi.InputMethod.setLocale(Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.function.Consumer.accept(T)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Runtime.loadLibrary(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException", 
            "UnsatisfiedLinkError", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Locale.getDisplayVariant(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.toLocalTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuBar.add(Menu)": {
        "args": [
            "Menu"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.NumericShaper.getShaper(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.temporal.WeekFields.getMinimalDaysInFirstWeek()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.TransferQueue.hasWaitingConsumer()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URI.getUserInfo()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.intersects(Rectangle2D)": {
        "args": [
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPane.getVScrollbarWidth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.range(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.util.zip.DeflaterInputStream.read(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.rmi.server.RemoteCall.releaseOutputStream()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.invoke.MethodHandleInfo.getName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsEnvironment.registerFont(Font)": {
        "args": [
            "Font"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.FloatBuffer.order()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ListPeer.delItems(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Blob.getBytes(long, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Toolkit.checkImage(Image, int, int, ImageObserver)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Image", 
            "int", 
            "int", 
            "ImageObserver"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.TextComponentPeer.setText(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Scrollbar.getBlockIncrement()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Deflater.finish()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RenderedImage.getColorModel()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.Certificate.readResolve()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ObjectStreamException"
        ], 
        "throws": [
            "ObjectStreamException"
        ]
    }, 
    "java.net.SocketImpl.connect(InetAddress, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "InetAddress", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.font.MultipleMaster.deriveMMFont(float[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "float[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.toLowerCase(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractSequentialList.remove(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.MultipleGradientPaint.getColorSpace()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.IntBuffer.wrap(int[])": {
        "args": [
            "int[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.doubleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoDate.from(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ArrayBlockingQueue.toArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.equals(int[], int[])": {
        "args": [
            "int[]", 
            "int[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Arc2D.intersects(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.of(int, int, int, int, int, int, int, ZoneId)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "ZoneId"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.Graphics.getFontMetrics(Font)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Font"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.spi.AbstractInterruptibleChannel.begin()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataInput.readFully(byte[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.invoke.MethodHandleProxies.isWrapperInstance(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.remove(MouseListener, MouseListener)": {
        "args": [
            "MouseListener", 
            "MouseListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.newBufferedWriter(Path, Charset, OpenOption[])": {
        "args": [
            "Path", 
            "Charset", 
            "OpenOption[]"
        ], 
        "@throws": [
            "IOException", 
            "UnsupportedOperationException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.CardLayout.show(Container, String)": {
        "args": [
            "Container", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.BitSet.get(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.insertParameterTypes(int, List)": {
        "args": [
            "int", 
            "List"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.BufferedInputStream.read(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.ThreadPoolExecutor.isTerminating()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Iterator.next()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.transform(float[], int, float[], int, int)": {
        "args": [
            "float[]", 
            "int", 
            "float[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.startsWith(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.InputContext.getLocale()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.isFocusCycleRoot(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.setRegion(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllformedLocaleException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSetMetaData.getTableName(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.SinglePixelPackedSampleModel.getScanlineStride()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLOutput.writeNString(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Enum.ordinal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.LineNumberReader.mark(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.file.attribute.FileOwnerAttributeView.setOwner(UserPrincipal)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "UserPrincipal"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.applet.AppletStub.isActive()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.getDayOfYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.BaseStream.sequential()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.readUTF()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException", 
            "UTFDataFormatException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.chrono.MinguoDate.plus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Base64.decode(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.Executors.newCachedThreadPool(ThreadFactory)": {
        "args": [
            "ThreadFactory"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.AnnotatedElement.getDeclaredAnnotations()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDateTime.getChronology()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.Activator.activate(ActivationID, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ActivationID", 
            "boolean"
        ], 
        "@throws": [
            "ActivationException", 
            "UnknownObjectException", 
            "RemoteException"
        ], 
        "throws": [
            "ActivationException", 
            "UnknownObjectException", 
            "RemoteException"
        ]
    }, 
    "java.awt.GridLayout.setRows(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.childrenNamesSpi()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "BackingStoreException"
        ], 
        "throws": [
            "BackingStoreException"
        ]
    }, 
    "java.text.NumberFormat.getCurrencyInstance(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.containsKey(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.SignatureSpi.engineSetParameter(AlgorithmParameterSpec)": {
        "args": [
            "AlgorithmParameterSpec"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "InvalidAlgorithmParameterException"
        ], 
        "throws": [
            "InvalidAlgorithmParameterException"
        ]
    }, 
    "java.util.concurrent.ConcurrentHashMap.reduceKeysToInt(long, ToIntFunction, int, IntBinaryOperator)": {
        "args": [
            "long", 
            "ToIntFunction", 
            "int", 
            "IntBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.setCalendarType(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.nio.Buffer.flip()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.clone()": {
        "args": [
            ""
        ], 
        "@throws": [
            "CloneNotSupportedException"
        ], 
        "throws": [
            "CloneNotSupportedException"
        ]
    }, 
    "java.lang.Runtime.getLocalizedInputStream(InputStream)": {
        "args": [
            "InputStream"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.LogRecord.getResourceBundleName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Compiler.compileClasses(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.temporal.TemporalField.adjustInto(R, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "R", 
            "long"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.componentMoved(ComponentEvent)": {
        "args": [
            "ComponentEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.PageAttributes.setPrintQualityToDefault()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.compact()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.awt.AWTKeyStroke.getModifiers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.EnumMap.get(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.SimpleDateFormat.get2DigitYearStart()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.DeflaterOutputStream.write(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Hashtable.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.BitSet.xor(BitSet)": {
        "args": [
            "BitSet"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.spliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuilder.append(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextArea.minimumSize(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.ToIntFunction.applyAsInt(T)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Bidi.getBaseLevel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.System.mapLibraryName(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Label.getAccessibleContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.LongStream.average()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceContext.transferablesFlavorsChanged()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.scale()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.acl.AclEntry.setNegativePermissions()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.HashMap.containsValue(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.StringTokenizer.nextElement()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.net.URI.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ProcessBuilder.redirectError()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.ValueRange.getLargestMinimum()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsCorrelatedSubqueries()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.HttpCookie.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLInput.readObject()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.stream.IntStream.anyMatch(IntPredicate)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "IntPredicate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateBlob(String, Blob)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Blob"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.DatabaseMetaData.supportsGetGeneratedKeys()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicBoolean.lazySet(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.invalidate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.withHour(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.getMetaData()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Component.getTreeLock()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXParameters.setDate(Date)": {
        "args": [
            "Date"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.addBeanContextServicesListener(BeanContextServicesListener)": {
        "args": [
            "BeanContextServicesListener"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.net.CookieStore.getURIs()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ManagementFactory.getGarbageCollectorMXBeans()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.entering(String, String, Object[])": {
        "args": [
            "String", 
            "String", 
            "Object[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Double.isInfinite(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getPublicExponent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousServerSocketChannel.getLocalAddress()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.OffsetTime.with(TemporalAdjuster)": {
        "args": [
            "TemporalAdjuster"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.ZoneId.systemDefault()": {
        "args": [
            ""
        ], 
        "@throws": [
            "DateTimeException", 
            "ZoneRulesException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.TextFieldPeer.getMinimumSize(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.GregorianCalendar.getWeeksInWeekYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuilder.append(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URI.getScheme()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.FileChannel.read(ByteBuffer[])": {
        "args": [
            "ByteBuffer[]"
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.zone.ZoneOffsetTransitionRule.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayList.ensureCapacity(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.methodType(Class, MethodType)": {
        "args": [
            "Class", 
            "MethodType"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.Semaphore.tryAcquire(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.withOffsetSameLocal(ZoneOffset)": {
        "args": [
            "ZoneOffset"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Frame.setTitle(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.removeBeanContextServicesListener(BeanContextServicesListener)": {
        "args": [
            "BeanContextServicesListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.ServerCloneException.getCause()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.isBefore(LocalTime)": {
        "args": [
            "LocalTime"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.dropParameterTypes(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.getSampleSize()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.containsKey(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.readFields()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ClassNotFoundException", 
            "IOException", 
            "NotActiveException"
        ], 
        "throws": [
            "IOException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.awt.JobAttributes.setFileName(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeMap.replaceAll(BiFunction)": {
        "args": [
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.storesLowerCaseIdentifiers()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.event.KeyEvent.getExtendedKeyCodeForChar(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.setComponentOrientation(ComponentOrientation)": {
        "args": [
            "ComponentOrientation"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.createComponent(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getItems()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.FramePeer.setMaximizedBounds(Rectangle)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Rectangle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Checkbox.setState(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Phaser.isTerminated()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.isFlavorJavaFileListType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getWritableTile(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.DesktopPeer.print(File)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "File"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.zip.ZipEntry.setCompressedSize(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.plusMonths(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.getComponents(Object, int[], int)": {
        "args": [
            "Object", 
            "int[]", 
            "int"
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetTime.plusHours(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRLSelector.match(CRL)": {
        "args": [
            "CRL"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkRead(String, Object)": {
        "args": [
            "String", 
            "Object"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.isUserNode()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStoreSpi.engineGetCreationDate(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.getMonth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.XMLDecoder.getOwner()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PipedWriter.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Toolkit.setDesktopProperty(String, Object)": {
        "args": [
            "String", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.parse(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [
            "DateTimeParseException"
        ], 
        "throws": []
    }, 
    "java.util.stream.LongStream.asDoubleStream()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.isWeekDateSupported()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.append(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.zip.ZipEntry.setCrc(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.BitSet.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.close()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.stream.BaseStream.parallel()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationGroupDesc.getCommandOptions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.EnumSet.copyOf(EnumSet)": {
        "args": [
            "EnumSet"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.enableResolveObject(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.awt.dnd.DropTargetListener.dragOver(DropTargetDragEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DropTargetDragEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.Matcher.toMatchResult()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLOutput.writeTimestamp(Timestamp)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Timestamp"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.IDN.toUnicode(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.ServerSocket.isBound()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DirectColorModel.getRedMask()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.AnnotatedParameterizedType.getAnnotatedActualTypeArguments()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.name()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ScrollPanePeer.getHScrollbarHeight()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.acl.AclEntry.isNegative()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Hashtable.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.IsoChronology.zonedDateTime(Instant, ZoneId)": {
        "args": [
            "Instant", 
            "ZoneId"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.Collections.checkedNavigableSet(NavigableSet, Class)": {
        "args": [
            "NavigableSet", 
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextField.getActionListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.FlavorMap.getNativesForFlavors(DataFlavor[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DataFlavor[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.EventHandler.getListenerMethodName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ThreadGroup.isDaemon()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setTime(String, Time, Calendar)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Time", 
            "Calendar"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.LinkedBlockingQueue.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.exportNode(OutputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "OutputStream"
        ], 
        "@throws": [
            "IOException", 
            "BackingStoreException", 
            "IllegalStateException"
        ], 
        "throws": [
            "IOException", 
            "BackingStoreException"
        ]
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.containsValue(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Calendar.getMaximum(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URI.compareTo(URI)": {
        "args": [
            "URI"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.moveToCurrentRow()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.LookupOp.getTable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRLEntry.toString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.requestFocus(Component, boolean, boolean, long, sun.awt.CausedFocusEvent.Cause)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Component", 
            "boolean", 
            "boolean", 
            "long", 
            "sun.awt.CausedFocusEvent.Cause"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.bcsPreSerializationHook(ObjectOutputStream)": {
        "args": [
            "ObjectOutputStream"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.ProcessBuilder.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.join(CharSequence, CharSequence[])": {
        "args": [
            "CharSequence", 
            "CharSequence[]"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ShortLookupTable.lookupPixel(short[], short[])": {
        "args": [
            "short[]", 
            "short[]"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getObject(String, Class)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Class"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.cert.CertificateFactory.generateCertificate(InputStream)": {
        "args": [
            "InputStream"
        ], 
        "@throws": [
            "CertificateException"
        ], 
        "throws": [
            "CertificateException"
        ]
    }, 
    "java.beans.XMLDecoder.getExceptionListener()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.BufferedReader.ready()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.color.ICC_ColorSpace.fromRGB(float[])": {
        "args": [
            "float[]"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.net.Socket.setSendBufferSize(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "SocketException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.awt.font.GlyphMetrics.getLSB()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getCharacterStream(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.font.TextLayout.getAscent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.createNClob()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.text.DateFormatSymbols.setShortMonths(String[])": {
        "args": [
            "String[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.ValueRange.isFixed()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTKeyStroke.getAWTKeyStroke(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Handler.flush()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.MarshalledObject.get()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException", 
            "ClassNotFoundException"
        ], 
        "throws": [
            "IOException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.nio.channels.SelectableChannel.blockingLock()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.HashMap.replace(K, V)": {
        "args": [
            "K", 
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SignatureSpi.engineSetParameter(String, Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Object"
        ], 
        "@throws": [
            "InvalidParameterException"
        ], 
        "throws": [
            "InvalidParameterException"
        ]
    }, 
    "java.util.concurrent.ConcurrentHashMap.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.AnnotatedWildcardType.getAnnotatedUpperBounds()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Dictionary.elements()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDate.minus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.reduceEntriesToInt(long, ToIntFunction, int, IntBinaryOperator)": {
        "args": [
            "long", 
            "ToIntFunction", 
            "int", 
            "IntBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.atStartOfDay(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.emptyNavigableSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDate.timeLineOrder()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.getUnnormalizedComponents(float[], int, int[], int)": {
        "args": [
            "float[]", 
            "int", 
            "int[]", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalArgumentException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.MenuItem.disableEvents(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.CookieHandler.get(URI, Map)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "URI", 
            "Map"
        ], 
        "@throws": [
            "IOException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.reflect.InvocationTargetException.getTargetException()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.sorted()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingDeque.takeFirst()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.stream.LongStream.sum()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateDouble(String, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "double"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Long.getLong(String, Long)": {
        "args": [
            "String", 
            "Long"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDateTime.adjustInto(Temporal)": {
        "args": [
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.Random.ints(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinWorkerThread.run()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getSelectedIndex()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentColorModel.createCompatibleWritableRaster(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedTransferQueue.spliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BandedSampleModel.getDataElements(int, int, Object, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "Object", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Date.setYear(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.OptionalInt.orElse(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.get(String, float)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "float"
        ], 
        "@throws": [
            "IOException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.font.OpenType.getFontTable(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.canDisplayUpTo(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.getImage(URL)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "URL"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDateTime.withMinute(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.security.cert.X509CRLSelector.setCertificateChecking(X509Certificate)": {
        "args": [
            "X509Certificate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractMap.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentColorModel.getRed(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "ArrayIndexOutOfBoundsException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.firePropertyChange(String, float, float)": {
        "args": [
            "String", 
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.getNormalizedComponents(int[], int, float[], int)": {
        "args": [
            "int[]", 
            "int", 
            "float[]", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.handleEvent(AWTEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "AWTEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseEra.of(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.sql.Statement.execute(String, String[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String[]"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException", 
            "SQLTimeoutException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.MessageDigest.digest(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DigestException"
        ], 
        "throws": [
            "DigestException"
        ]
    }, 
    "java.io.StringWriter.write(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.deltaTransform(Point2D, Point2D)": {
        "args": [
            "Point2D", 
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.DelayQueue.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Short.longValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Beans.isDesignTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.empty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.DoubleBuffer.asReadOnlyBuffer()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.DesignMode.setDesignTime(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragGestureRecognizer.removeDragGestureListener(DragGestureListener)": {
        "args": [
            "DragGestureListener"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.List.getAccessibleAt(Point)": {
        "args": [
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.delItems(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.LabelPeer.setAlignment(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.readInt()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.KeyPairGenerator.getInstance(String, Provider)": {
        "args": [
            "String", 
            "Provider"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "NoSuchAlgorithmException"
        ]
    }, 
    "java.nio.file.attribute.AclFileAttributeView.getAcl()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Arrays.parallelSort(T[], int, int)": {
        "args": [
            "T[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.putLast(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException", 
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.tailMap(K)": {
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.rmi.server.RMISocketFactory.getSocketFactory()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.registerValidation(ObjectInputValidation, int)": {
        "args": [
            "ObjectInputValidation", 
            "int"
        ], 
        "@throws": [
            "NotActiveException", 
            "InvalidObjectException"
        ], 
        "throws": [
            "NotActiveException", 
            "InvalidObjectException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicLong.weakCompareAndSet(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.newInstance()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalAccessException", 
            "InstantiationException", 
            "ExceptionInInitializerError", 
            "SecurityException"
        ], 
        "throws": [
            "InstantiationException", 
            "IllegalAccessException"
        ]
    }, 
    "java.awt.geom.Arc2D.getHeight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Array.getBaseTypeName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.Rectangle2D.contains(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistDate.minus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.NavigableMap.descendingMap()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.downFocusCycle(Container)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Set.spliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.getAccessibleChild(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.MemoryImageSource.requestTopDownLeftRightResend(ImageConsumer)": {
        "args": [
            "ImageConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.LineNumberReader.read()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.text.FieldPosition.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collectors.collectingAndThen(Collector, Function)": {
        "args": [
            "Collector", 
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintWriter.println(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLXML.setCharacterStream()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Adjustable.getValue()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBuffer.getSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.containsAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.tailSet(E, boolean)": {
        "args": [
            "E", 
            "boolean"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.logging.Logger.logrb(Level, String, String, String, String, Throwable)": {
        "args": [
            "Level", 
            "String", 
            "String", 
            "String", 
            "String", 
            "Throwable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.getColorModel()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.security.Provider.getAttribute(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.BandedSampleModel.getSample(int, int, int, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Field.setChar(Object, char)": {
        "args": [
            "Object", 
            "char"
        ], 
        "@throws": [
            "IllegalAccessException", 
            "IllegalArgumentException", 
            "NullPointerException", 
            "ExceptionInInitializerError"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "IllegalAccessException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicInteger.updateAndGet(IntUnaryOperator)": {
        "args": [
            "IntUnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.removeAll()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.removeKeyListener(KeyListener)": {
        "args": [
            "KeyListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLXML.setBinaryStream()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.DataBufferByte.setElem(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendFraction(TemporalField, int, int, boolean)": {
        "args": [
            "TemporalField", 
            "int", 
            "int", 
            "boolean"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetContext.addNotify(DropTargetContextPeer)": {
        "args": [
            "DropTargetContextPeer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.NavigableSet.subSet(E, boolean, E, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E", 
            "boolean", 
            "E", 
            "boolean"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Vector.removeElement(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ScrollbarPeer.setPageIncrement(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.format(Object, StringBuffer, FieldPosition)": {
        "args": [
            "Object", 
            "StringBuffer", 
            "FieldPosition"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.getRef(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.zip.DeflaterInputStream.skip(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Toolkit.initializeDesktopProperties()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.createImage(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Image.getCapabilities(GraphicsConfiguration)": {
        "args": [
            "GraphicsConfiguration"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocketImpl.getFileDescriptor()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.enable(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.getMaxFieldSize()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.ZonedDateTime.getNano()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.ptSegDistSq(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.RoundRectangle2D.setRoundRect(double, double, double, double, double, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Process.exitValue()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalThreadStateException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.othersUpdatesAreVisible(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.zip.ZipEntry.setCreationTime(FileTime)": {
        "args": [
            "FileTime"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.setFocusTraversalKeys(int, Set)": {
        "args": [
            "int", 
            "Set"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.TreeMap.containsValue(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.Supplier.get()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.PixelGrabber.status()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.clearFocusOwner()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.sum(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Currency.getAvailableCurrencies()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setObject(int, Object, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Object", 
            "int", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.TrayIcon.isImageAutoSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.round(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.compareTo(OffsetDateTime)": {
        "args": [
            "OffsetDateTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Float.isNaN()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.offerLast(E, long, TimeUnit)": {
        "args": [
            "E", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "NullPointerException", 
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.AWTEventMulticaster.remove(AdjustmentListener, AdjustmentListener)": {
        "args": [
            "AdjustmentListener", 
            "AdjustmentListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.getOrDefault(Object, V)": {
        "args": [
            "Object", 
            "V"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.cert.CertStore.getProvider()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.ptSegDistSq(double, double, double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TimeZone.getID()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.MouseInfoPeer.fillPointWithCoords(Point)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.floatValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahDate.with(TemporalField, long)": {
        "args": [
            "TemporalField", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CheckboxMenuItem.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.isAlwaysOnTopSupported()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.classLoaderDepth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.JarURLConnection.getAttributes()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.text.Bidi.isLeftToRight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RGBImageFilter.setPixels(int, int, int, int, ColorModel, byte[], int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "ColorModel", 
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadMXBean.isThreadCpuTimeSupported()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.nextProbablePrime()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.poll(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.lang.Thread.getId()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Scrollbar.setMaximum(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.TextStyle.asNormal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.LongBuffer.wrap(long[])": {
        "args": [
            "long[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyEditor.getAsText()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Deque.removeLast()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.util.regex.MatchResult.group()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.CheckboxMenuItem.getAccessibleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.toHexString(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.startsWith(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Field.setShort(Object, short)": {
        "args": [
            "Object", 
            "short"
        ], 
        "@throws": [
            "IllegalAccessException", 
            "IllegalArgumentException", 
            "NullPointerException", 
            "ExceptionInInitializerError"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "IllegalAccessException"
        ]
    }, 
    "java.util.logging.LogManager.getLoggerNames()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.drainTo(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.GridBagLayout.removeLayoutComponent(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ScrollPanePeer.setScrollPosition(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.Matcher.start(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalStateException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.addPreferenceChangeListener(PreferenceChangeListener)": {
        "args": [
            "PreferenceChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.parseUnsignedInt(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.util.concurrent.ForkJoinTask.complete(V)": {
        "args": [
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Set.retainAll(Collection)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.getWidth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.EnumSet.of(E, E, E)": {
        "args": [
            "E", 
            "E", 
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Font.createGlyphVector(FontRenderContext, String)": {
        "args": [
            "FontRenderContext", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentColorModel.getNormalizedComponents(int[], int, float[], int)": {
        "args": [
            "int[]", 
            "int", 
            "float[]", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.file.Files.setLastModifiedTime(Path, FileTime)": {
        "args": [
            "Path", 
            "FileTime"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.channels.DatagramChannel.socket()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.getRenderedSource(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.insert(int, long)": {
        "args": [
            "int", 
            "long"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.System.setProperties(Properties)": {
        "args": [
            "Properties"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.net.HttpCookie.setComment(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.forEachEntry(long, Consumer)": {
        "args": [
            "long", 
            "Consumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Identity.identityEquals(Identity)": {
        "args": [
            "Identity"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.getPathToNames()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.getCtrlPt()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.setTransform(AffineTransform)": {
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextChildComponentProxy.getComponent()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLOutput.writeBoolean(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Number.doubleValue()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadLocalRandom.nextLong(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Button.getLabel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.WindowPeer.repositionSecurityWarning()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Hashtable.get(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceContext.getCursor()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendZoneRegionId()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ResourceBundle.getControl(List)": {
        "args": [
            "List"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.beans.XMLEncoder.close()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.ServerSocketChannel.bind(SocketAddress, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "SocketAddress", 
            "int"
        ], 
        "@throws": [
            "AlreadyBoundException", 
            "UnsupportedAddressTypeException", 
            "ClosedChannelException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.File.setExecutable(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.nio.LongBuffer.wrap(long[], int, int)": {
        "args": [
            "long[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateDouble(int, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "double"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.Reader.read(CharBuffer)": {
        "args": [
            "CharBuffer"
        ], 
        "@throws": [
            "IOException", 
            "NullPointerException", 
            "ReadOnlyBufferException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.invoke.MutableCallSite.dynamicInvoker()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getDeclaredMethods()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.lang.Float.valueOf(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndUpdate(T, LongUnaryOperator)": {
        "args": [
            "T", 
            "LongUnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.now(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongFieldUpdater.updateAndGet(T, LongUnaryOperator)": {
        "args": [
            "T", 
            "LongUnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZoneId.getAvailableZoneIds()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkPackageDefinition(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDateTime.plusDays(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.print.PrinterJob.setPrintable(Printable, PageFormat)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Printable", 
            "PageFormat"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Driver.getMinorVersion()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isJavaIdentifierPart(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTarget.dragOver(DropTargetDragEvent)": {
        "args": [
            "DropTargetDragEvent"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.print.PageFormat.getHeight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.setMinusSign(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Path.toUri()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOError", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.stream.Stream.limit(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDate.getEra()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXParameters.getCertPathCheckers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Phaser.arrive()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.io.FileInputStream.read(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Arrays.binarySearch(T[], T, Comparator)": {
        "args": [
            "T[]", 
            "T", 
            "Comparator"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.lang.ClassNotFoundException.getException()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.Era.query(TemporalQuery)": {
        "args": [
            "TemporalQuery"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.binarySearch(byte[], byte)": {
        "args": [
            "byte[]", 
            "byte"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.addMouseMotionListener(MouseMotionListener)": {
        "args": [
            "MouseMotionListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseDate.with(TemporalAdjuster)": {
        "args": [
            "TemporalAdjuster"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistEra.getValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.setTimeZone(TimeZone)": {
        "args": [
            "TimeZone"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Graphics2D.getStroke()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getRow()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.font.TextLayout.handleJustify(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.parse(String, ParsePosition)": {
        "args": [
            "String", 
            "ParsePosition"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetTime.withNano(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.beans.Introspector.getBeanInfo(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "IntrospectionException"
        ], 
        "throws": [
            "IntrospectionException"
        ]
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.getBeanContextServicesPeer()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.ECPoint.getAffineY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.FileVisitor.visitFile(T, BasicFileAttributes)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "BasicFileAttributes"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicLong.getAndAdd(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLong.getAndDecrement()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadMXBean.findMonitorDeadlockedThreads()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.time.Duration.ofMinutes(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.String.toLowerCase(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Date.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ScrollPanePeer.setValue(Adjustable, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Adjustable", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.singletonList(T)": {
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.InetAddress.isMCOrgLocal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.putAll(Map)": {
        "args": [
            "Map"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.StringCharacterIterator.last()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.atStartOfDay()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.floorDiv(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.security.cert.X509Certificate.verify(PublicKey, Provider)": {
        "args": [
            "PublicKey", 
            "Provider"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "InvalidKeyException", 
            "SignatureException", 
            "CertificateException", 
            "UnsupportedOperationException"
        ], 
        "throws": [
            "CertificateException", 
            "NoSuchAlgorithmException", 
            "InvalidKeyException", 
            "SignatureException"
        ]
    }, 
    "java.util.Collection.hashCode()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Handler.getFilter()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.CRC32.update(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.FileSystem.getUserPrincipalLookupService()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.sql.SQLInput.readRef()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.renderable.ContextualRenderedImageFactory.getProperty(ParameterBlock, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ParameterBlock", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormat.getDateTimeInstance(int, int, Locale)": {
        "args": [
            "int", 
            "int", 
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ReplicateScaleFilter.setPixels(int, int, int, int, ColorModel, int[], int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "ColorModel", 
            "int[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.DatagramChannel.disconnect()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.math.BigDecimal.signum()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.min()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayDeque.descendingIterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.processInputMethodEvent(InputMethodEvent)": {
        "args": [
            "InputMethodEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ExecutorService.invokeAll(Collection)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Collection"
        ], 
        "@throws": [
            "InterruptedException", 
            "NullPointerException", 
            "RejectedExecutionException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.lang.reflect.Field.getDeclaringClass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.MemoryImageSource.removeConsumer(ImageConsumer)": {
        "args": [
            "ImageConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.getPrintJob(Frame, String, JobAttributes, PageAttributes)": {
        "args": [
            "Frame", 
            "String", 
            "JobAttributes", 
            "PageAttributes"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.BitSet.cardinality()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Inet4Address.isMCGlobal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.LineNumberInputStream.reset()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.beans.XMLEncoder.setOwner(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.getCatalog()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.CharArrayWriter.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.DelayQueue.offer(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CountedCompleter.setPendingCount(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SignatureSpi.engineInitSign(PrivateKey, SecureRandom)": {
        "args": [
            "PrivateKey", 
            "SecureRandom"
        ], 
        "@throws": [
            "InvalidKeyException"
        ], 
        "throws": [
            "InvalidKeyException"
        ]
    }, 
    "java.util.TreeSet.floor(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.removeBeanContextMembershipListener(BeanContextMembershipListener)": {
        "args": [
            "BeanContextMembershipListener"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.Ref.getObject(Map)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Map"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.event.InputMethodListener.inputMethodTextChanged(InputMethodEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "InputMethodEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLInput.readTimestamp()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(int, long)": {
        "args": [
            "int", 
            "long"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.time.temporal.ValueRange.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Formattable.formatTo(Formatter, int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Formatter", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalFormatException"
        ], 
        "throws": []
    }, 
    "java.awt.Graphics2D.drawString(String, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.MenuComponent.setForeground(Color)": {
        "args": [
            "Color"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneOffsetTransition.getInstant()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Dimension2D.setSize(Dimension2D)": {
        "args": [
            "Dimension2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SplittableRandom.longs(long, long, long)": {
        "args": [
            "long", 
            "long", 
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImage.getPropertyNames()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Identity.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.ServerSocketChannel.accept()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ClosedChannelException", 
            "AsynchronousCloseException", 
            "ClosedByInterruptException", 
            "NotYetBoundException", 
            "SecurityException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.PropertyResourceBundle.handleGetObject(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.BitSet.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getDriverName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.Arc2D.containsAngle(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.XMLDecoder.close()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.acos(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.copyOf(T[], int)": {
        "args": [
            "T[]", 
            "int"
        ], 
        "@throws": [
            "NegativeArraySizeException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Graphics2D.drawImage(Image, AffineTransform, ImageObserver)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Image", 
            "AffineTransform", 
            "ImageObserver"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.getHeight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.NumberFormat.getNumberInstance()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ScheduledThreadPoolExecutor.shutdown()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getSystemFunctions()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.StringBuilder.insert(int, double)": {
        "args": [
            "int", 
            "double"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.text.StringCharacterIterator.getBeginIndex()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayDeque.pollLast()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.setEnabled(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Area.getPathIterator(AffineTransform)": {
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.HashMap.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GridLayout.addLayoutComponent(String, Component)": {
        "args": [
            "String", 
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLStreamHandler.hostsEqual(URL, URL)": {
        "args": [
            "URL", 
            "URL"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Method.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.Matcher.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormat.setTimeZone(TimeZone)": {
        "args": [
            "TimeZone"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.EnumSet.allOf(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.isAlphaPremultiplied()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendOffsetId()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.isPoolable()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.CompletionStage.applyToEitherAsync(CompletionStage, Function, Executor)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CompletionStage", 
            "Function", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.FontRenderContext.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URI.getRawQuery()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Signature.getInstance(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "NoSuchProviderException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "NoSuchAlgorithmException", 
            "NoSuchProviderException"
        ]
    }, 
    "java.beans.beancontext.BeanContextMembershipEvent.contains(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.ulp()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.PriorityBlockingQueue.offer(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.contains(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.DosFileAttributes.isHidden()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayList.sort(Comparator)": {
        "args": [
            "Comparator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.InputContext.dispatchEvent(AWTEvent)": {
        "args": [
            "AWTEvent"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.LocalTime.withHour(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateAsciiStream(String, InputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "InputStream"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.Raster.createInterleavedRaster(DataBuffer, int, int, int, int, int[], Point)": {
        "args": [
            "DataBuffer", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]", 
            "Point"
        ], 
        "@throws": [
            "RasterFormatException", 
            "IllegalArgumentException", 
            "RasterFormatException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.logging.Logger.exiting(String, String, Object)": {
        "args": [
            "String", 
            "String", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BandCombineOp.getRenderingHints()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalAdjusters.firstDayOfNextYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterators.spliteratorUnknownSize(OfInt, int)": {
        "args": [
            "OfInt", 
            "int"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.RobotPeer.getRGBPixels(Rectangle)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Rectangle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.Certificate.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Array.newInstance(Class, int[])": {
        "args": [
            "Class", 
            "int[]"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "NegativeArraySizeException"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "NegativeArraySizeException"
        ]
    }, 
    "java.awt.TextField.getListeners(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.awt.image.MultiPixelPackedSampleModel.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Phaser.getPhase()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ArrayBlockingQueue.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ScrollbarPeer.setLineIncrement(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.FileSystem.getRootDirectories()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.BreakIterator.last()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Policy.getType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertPathBuilder.getInstance(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "NoSuchProviderException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "NoSuchAlgorithmException", 
            "NoSuchProviderException"
        ]
    }, 
    "java.security.IdentityScope.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Arc2D.setArcByCenter(double, double, double, double, double, int)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.PageAttributes.setOrientationRequestedToDefault()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.highSurrogate(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.list()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.security.spec.ECFieldFp.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.append(DateTimeFormatter)": {
        "args": [
            "DateTimeFormatter"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.BufferedReader.close()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.charset.spi.CharsetProvider.charsets()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.allOf(CompletableFuture[])": {
        "args": [
            "CompletableFuture[]"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicMarkableReference.compareAndSet(V, V, boolean, boolean)": {
        "args": [
            "V", 
            "V", 
            "boolean", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Introspector.getBeanInfo(Class, Class)": {
        "args": [
            "Class", 
            "Class"
        ], 
        "@throws": [
            "IntrospectionException"
        ], 
        "throws": [
            "IntrospectionException"
        ]
    }, 
    "java.awt.image.renderable.ContextualRenderedImageFactory.getBounds2D(ParameterBlock)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ParameterBlock"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.spi.InputMethodContext.dispatchInputMethodEvent(int, AttributedCharacterIterator, int, TextHitInfo, TextHitInfo)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "AttributedCharacterIterator", 
            "int", 
            "TextHitInfo", 
            "TextHitInfo"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Area.intersects(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadMXBean.getThreadInfo(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.paint(Graphics)": {
        "args": [
            "Graphics"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Date.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ListIterator.set(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.sql.CallableStatement.registerOutParameter(String, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.Inet6Address.getByAddress(String, byte[], NetworkInterface)": {
        "args": [
            "String", 
            "byte[]", 
            "NetworkInterface"
        ], 
        "@throws": [
            "UnknownHostException"
        ], 
        "throws": [
            "UnknownHostException"
        ]
    }, 
    "java.awt.image.BufferedImage.getRGB(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.forName(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "LinkageError", 
            "ExceptionInInitializerError", 
            "ClassNotFoundException"
        ], 
        "throws": [
            "ClassNotFoundException"
        ]
    }, 
    "java.awt.Toolkit.createPopupMenu(PopupMenu)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "PopupMenu"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.nio.channels.AsynchronousSocketChannel.read(ByteBuffer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ReadPendingException", 
            "NotYetConnectedException"
        ], 
        "throws": []
    }, 
    "java.nio.file.Files.write(Path, byte[], OpenOption[])": {
        "args": [
            "Path", 
            "byte[]", 
            "OpenOption[]"
        ], 
        "@throws": [
            "IOException", 
            "UnsupportedOperationException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.ScheduledExecutorService.schedule(Callable, long, TimeUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Callable", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "RejectedExecutionException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.math.BigInteger.and(BigInteger)": {
        "args": [
            "BigInteger"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractMap.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.asReadOnlyBuffer()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CardLayout.last(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Blob.setBinaryStream(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Window.setMinimumSize(Dimension)": {
        "args": [
            "Dimension"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.tryLock(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException", 
            "NullPointerException", 
            "InterruptedException", 
            "NullPointerException"
        ], 
        "throws": [
            "InterruptedException", 
            "InterruptedException"
        ]
    }, 
    "java.lang.reflect.Field.setLong(Object, long)": {
        "args": [
            "Object", 
            "long"
        ], 
        "@throws": [
            "IllegalAccessException", 
            "IllegalArgumentException", 
            "NullPointerException", 
            "ExceptionInInitializerError"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "IllegalAccessException"
        ]
    }, 
    "java.nio.charset.CharsetDecoder.replaceWith(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.io.DataInputStream.readFloat()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.OffsetTime.minus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.putSpi(String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayList.remove(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.spreadInvoker(MethodType, int)": {
        "args": [
            "MethodType", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.isValid(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.createFrame(Frame)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Frame"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.awt.GridBagLayout.layoutContainer(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.thenAccept(Consumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Consumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadLocalRandom.longs(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.color.ICC_ProfileRGB.getTRC(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ProfileDataException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsOpenCursorsAcrossRollback()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.Point2D.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.bitCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Throwable.printStackTrace(PrintStream)": {
        "args": [
            "PrintStream"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.WatchKey.watchable()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.internalGet(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics2D.draw3DRect(int, int, int, int, boolean)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Beans.setDesignTime(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.awt.image.RenderedImage.getTileGridXOffset()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Bidi.getRunLevel(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.toLowerCase()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.getNextRightHit(int, CaretPolicy)": {
        "args": [
            "int", 
            "CaretPolicy"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.prepareStatement(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Long.toUnsignedString(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DirectColorModel.getAlphaMask()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.JobAttributes.setSides(SidesType)": {
        "args": [
            "SidesType"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.Integer.compareTo(Integer)": {
        "args": [
            "Integer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahDate.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.indexOf(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahChronology.dateEpochDay(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.Window.getShape()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.spi.SelectorProvider.openServerSocketChannel()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.management.MemoryType.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.HierarchyBoundsListener.ancestorMoved(HierarchyEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "HierarchyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.getSampleModelTranslateX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.CharArrayReader.read(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.rmi.server.ServerRef.exportObject(Remote, Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Remote", 
            "Object"
        ], 
        "@throws": [
            "RemoteException"
        ], 
        "throws": [
            "RemoteException"
        ]
    }, 
    "java.beans.beancontext.BeanContextSupport.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationGroupDesc.getCommandPath()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Inet6Address.getHostAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Point2D.setLocation(double, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RMIClassLoader.loadClass(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "MalformedURLException", 
            "ClassNotFoundException"
        ], 
        "throws": [
            "MalformedURLException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.awt.Component.destroyBuffers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadMXBean.isCurrentThreadCpuTimeSupported()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStoreSpi.engineStore(LoadStoreParameter)": {
        "args": [
            "LoadStoreParameter"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IOException", 
            "NoSuchAlgorithmException", 
            "CertificateException"
        ], 
        "throws": [
            "IOException", 
            "NoSuchAlgorithmException", 
            "CertificateException"
        ]
    }, 
    "java.awt.Component.addPropertyChangeListener(String, PropertyChangeListener)": {
        "args": [
            "String", 
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GridBagLayout.getLayoutInfo(Container, int)": {
        "args": [
            "Container", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.isVisible()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentColorModel.getDataElement(int[], int)": {
        "args": [
            "int[]", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.PropertyPermission.implies(Permission)": {
        "args": [
            "Permission"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collectors.groupingBy(Function, Supplier, Collector)": {
        "args": [
            "Function", 
            "Supplier", 
            "Collector"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ListIterator.nextIndex()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.AreaAveragingScaleFilter.setPixels(int, int, int, int, ColorModel, byte[], int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "ColorModel", 
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Comparator.nullsLast(Comparator)": {
        "args": [
            "Comparator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.toOffsetTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferUShort.setElem(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.SynchronousQueue.retainAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.toFormat()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.FileVisitor.postVisitDirectory(T, IOException)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "IOException"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Frame.getExtendedState()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.ImageGraphicAttribute.getAdvance()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.ImageGraphicAttribute.equals(ImageGraphicAttribute)": {
        "args": [
            "ImageGraphicAttribute"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Observable.setChanged()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.PageFormat.setOrientation(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": [
            "IllegalArgumentException"
        ]
    }, 
    "java.awt.Dialog.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Menu.insertSeparator(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.interfaces.RSAPrivateCrtKey.getPrimeP()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Method.getModifiers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationSystem.setActivationDesc(ActivationID, ActivationDesc)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ActivationID", 
            "ActivationDesc"
        ], 
        "@throws": [
            "UnknownGroupException", 
            "UnknownObjectException", 
            "ActivationException", 
            "RemoteException"
        ], 
        "throws": [
            "ActivationException", 
            "UnknownObjectException", 
            "UnknownGroupException", 
            "RemoteException"
        ]
    }, 
    "java.awt.KeyboardFocusManager.getGlobalCurrentFocusCycleRoot()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.lang.reflect.Executable.getAnnotatedExceptionTypes()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.EventQueue.createSecondaryLoop()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.getAbsoluteFile()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.nio.IntBuffer.get(int[])": {
        "args": [
            "int[]"
        ], 
        "@throws": [
            "BufferUnderflowException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.DoubleAdder.sumThenReset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.compareTo(ByteBuffer)": {
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragGestureRecognizer.setSourceActions(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Inflater.setInput(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Checkbox.addNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.average()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocket.bind(SocketAddress)": {
        "args": [
            "SocketAddress"
        ], 
        "@throws": [
            "SocketException", 
            "SecurityException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.getAndSet(T, V)": {
        "args": [
            "T", 
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.getTrustedCertificate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.getFloatParameter(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.nio.file.attribute.AclEntryType.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.modInverse(BigInteger)": {
        "args": [
            "BigInteger"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.add(PopupMenu)": {
        "args": [
            "PopupMenu"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Ellipse2D.getPathIterator(AffineTransform)": {
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getTimestamp(String, Calendar)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Calendar"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.Path2D.quadTo(double, double, double, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ThreadGroup.setMaxPriority(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.image.Kernel.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Properties.loadFromXML(InputStream)": {
        "args": [
            "InputStream"
        ], 
        "@throws": [
            "IOException", 
            "UnsupportedEncodingException", 
            "InvalidPropertiesFormatException", 
            "NullPointerException"
        ], 
        "throws": [
            "IOException", 
            "InvalidPropertiesFormatException"
        ]
    }, 
    "java.net.URI.getRawFragment()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterators.iterator(Spliterator)": {
        "args": [
            "Spliterator"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.AbstractList.removeRange(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.removeLastOccurrence(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.asFloatBuffer()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.format(Locale, String, Object[])": {
        "args": [
            "Locale", 
            "String", 
            "Object[]"
        ], 
        "@throws": [
            "IllegalFormatException"
        ], 
        "throws": []
    }, 
    "java.nio.file.Files.getPosixFilePermissions(Path, LinkOption[])": {
        "args": [
            "Path", 
            "LinkOption[]"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.applet.Applet.stop()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PushbackReader.unread(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.ZonedDateTime.ofInstant(LocalDateTime, ZoneOffset, ZoneId)": {
        "args": [
            "LocalDateTime", 
            "ZoneOffset", 
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.refreshRow()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.ArrayDeque.offerFirst(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.PopupMenu.getAccessibleContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuilder.append(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Dialog.getAccessibleRole()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GridBagLayout.getLayoutAlignmentY(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.IntBuffer.allocate(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.font.GlyphVector.getGlyphPositions(int, int, float[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "float[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IndexOutOfBoundsException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getResultSetHoldability()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.URI.isOpaque()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PolicyQualifierInfo.getPolicyQualifier()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationGroup.createGroup(ActivationGroupID, ActivationGroupDesc, long)": {
        "args": [
            "ActivationGroupID", 
            "ActivationGroupDesc", 
            "long"
        ], 
        "@throws": [
            "ActivationException", 
            "SecurityException", 
            "UnsupportedOperationException"
        ], 
        "throws": [
            "ActivationException"
        ]
    }, 
    "java.lang.Double.doubleToLongBits(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseEra.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.LongAdder.increment()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Month.length(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PipedWriter.flush()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Character.toString(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setBinaryStream(int, InputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "InputStream"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquire(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalMonitorStateException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.AbstractCollection.add(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.binarySearch(long[], long)": {
        "args": [
            "long[]", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.insertParameterTypes(int, Class[])": {
        "args": [
            "int", 
            "Class[]"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.net.URLClassLoader.getURLs()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.getInteger(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.security.interfaces.RSAMultiPrimePrivateCrtKey.getPrimeP()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getMinTileY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AlphaComposite.getInstance(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ScheduledThreadPoolExecutor.schedule(Runnable, long, TimeUnit)": {
        "args": [
            "Runnable", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "RejectedExecutionException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Base64.encode(byte[], byte[])": {
        "args": [
            "byte[]", 
            "byte[]"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.math.BigDecimal.remainder(BigDecimal, MathContext)": {
        "args": [
            "BigDecimal", 
            "MathContext"
        ], 
        "@throws": [
            "ArithmeticException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetTime.truncatedTo(TemporalUnit)": {
        "args": [
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.lang.StringBuffer.insert(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.floorEntry(K)": {
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.spec.ECFieldFp.getP()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.now(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.GregorianCalendar.getActualMaximum(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.Console.readLine(String, Object[])": {
        "args": [
            "String", 
            "Object[]"
        ], 
        "@throws": [
            "IllegalFormatException", 
            "IOError"
        ], 
        "throws": []
    }, 
    "java.awt.im.spi.InputMethod.deactivate(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Field.setDouble(Object, double)": {
        "args": [
            "Object", 
            "double"
        ], 
        "@throws": [
            "IllegalAccessException", 
            "IllegalArgumentException", 
            "NullPointerException", 
            "ExceptionInInitializerError"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "IllegalAccessException"
        ]
    }, 
    "java.util.stream.Stream.accept(T)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.setCurve(Point2D[], int)": {
        "args": [
            "Point2D[]", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.ImageGraphicAttribute.getBounds()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.awaitTermination(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.beans.beancontext.BeanContextChildSupport.removePropertyChangeListener(String, PropertyChangeListener)": {
        "args": [
            "String", 
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.setCurve(double[], int)": {
        "args": [
            "double[]", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.delimiter()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.addKeyListener(KeyListener)": {
        "args": [
            "KeyListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getTime(String, Calendar)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Calendar"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.file.Path.resolveSibling(Path)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Path"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.fine(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRL.getRevokedCertificates()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.toChars(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.spec.RSAPublicKeySpec.getPublicExponent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXCertPathBuilderResult.getCertPath()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.IsoChronology.date(Era, int, int, int)": {
        "args": [
            "Era", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.setKeepAliveTime(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.io.Closeable.close()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Hashtable.containsKey(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.event.InputMethodEvent.consume()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.SimpleDateFormat.set2DigitYearStart(Date)": {
        "args": [
            "Date"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLPermission.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Period.plusYears(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.Collections.synchronizedCollection(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.isAfter(ChronoLocalDateTime)": {
        "args": [
            "ChronoLocalDateTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Semaphore.getQueueLength()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Method.getExceptionTypes()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FileDialog.getFile()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Path.toString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.BreakIterator.next(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.RuleBasedCollator.getCollationElementIterator(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Checkbox.getAccessibleRole()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.disjoint(Collection, Collection)": {
        "args": [
            "Collection", 
            "Collection"
        ], 
        "@throws": [
            "NullPointerException", 
            "NullPointerException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.net.InetAddress.isMCLinkLocal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.childSpi(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.forEachKey(long, Function, Consumer)": {
        "args": [
            "long", 
            "Function", 
            "Consumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeSet.contains(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.TextComponent.addNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.Book.append(Printable, PageFormat)": {
        "args": [
            "Printable", 
            "PageFormat"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Polygon.contains(Rectangle2D)": {
        "args": [
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.NavigableMap.headMap(K, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K", 
            "boolean"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.ListPeer.removeAll()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterator.tryAdvance(Consumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Consumer"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.requestFocusInWindow(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.ProtectionDomain.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.getByteArray(String, byte[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "byte[]"
        ], 
        "@throws": [
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.text.DateFormat.getTimeInstance()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.SystemTray.remove(TrayIcon)": {
        "args": [
            "TrayIcon"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerArray.getAndSet(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.OptionalDouble.of(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.coalescePaintEvent(PaintEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "PaintEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getInt(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.Instant.with(TemporalField, long)": {
        "args": [
            "TemporalField", 
            "long"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.Short.parseShort(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.awt.List.addNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Map.comparingByValue(Comparator)": {
        "args": [
            "Comparator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.Console.readPassword(String, Object[])": {
        "args": [
            "String", 
            "Object[]"
        ], 
        "@throws": [
            "IllegalFormatException", 
            "IOError"
        ], 
        "throws": []
    }, 
    "java.util.zip.Deflater.getTotalIn()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormat.getCalendarField()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeMap.replace(K, V, V)": {
        "args": [
            "K", 
            "V", 
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Optional.ifPresent(Consumer)": {
        "args": [
            "Consumer"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.math.MathContext.getPrecision()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractSet.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.DelayQueue.remainingCapacity()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.mouseReleased(MouseEvent)": {
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RemoteObject.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.IdentityScope.addIdentity(Identity)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Identity"
        ], 
        "@throws": [
            "KeyManagementException"
        ], 
        "throws": [
            "KeyManagementException"
        ]
    }, 
    "java.net.URLConnection.setReadTimeout(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.net.ServerSocket.setReceiveBufferSize(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "SocketException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.awt.TrayIcon.setPopupMenu(PopupMenu)": {
        "args": [
            "PopupMenu"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.fill(char[], char)": {
        "args": [
            "char[]", 
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.skip(Pattern)": {
        "args": [
            "Pattern"
        ], 
        "@throws": [
            "NoSuchElementException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.Hashtable.keys()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.NumericShaper.shape(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.file.FileVisitResult.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.not()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SocketChannel.open(SocketAddress)": {
        "args": [
            "SocketAddress"
        ], 
        "@throws": [
            "AsynchronousCloseException", 
            "ClosedByInterruptException", 
            "UnresolvedAddressException", 
            "UnsupportedAddressTypeException", 
            "SecurityException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Font.getStringBounds(char[], int, int, FontRenderContext)": {
        "args": [
            "char[]", 
            "int", 
            "int", 
            "FontRenderContext"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.Character.toCodePoint(char, char)": {
        "args": [
            "char", 
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DriverManager.getConnection(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLTimeoutException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.URLConnection.setDefaultUseCaches(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Objects.deepEquals(Object, Object)": {
        "args": [
            "Object", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Desktop.browse(URI)": {
        "args": [
            "URI"
        ], 
        "@throws": [
            "NullPointerException", 
            "UnsupportedOperationException", 
            "IOException", 
            "SecurityException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.ResultSet.getBytes(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.reflect.WildcardType.getUpperBounds()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "TypeNotPresentException", 
            "MalformedParameterizedTypeException"
        ], 
        "throws": []
    }, 
    "java.util.function.DoubleUnaryOperator.identity()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractList.remove(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.io.PipedInputStream.connect(PipedOutputStream)": {
        "args": [
            "PipedOutputStream"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Component.imageUpdate(Image, int, int, int, int, int)": {
        "args": [
            "Image", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Menu.getItem(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalAdjusters.previousOrSame(DayOfWeek)": {
        "args": [
            "DayOfWeek"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Constructor.getExceptionTypes()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.CharArrayWriter.writeTo(Writer)": {
        "args": [
            "Writer"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.IndexColorModel.getValidPixels()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.DoubleBuffer.compact()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.util.BitSet.valueOf(ByteBuffer)": {
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.StampedLock.tryConvertToOptimisticRead(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.createImage(ImageProducer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ImageProducer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.getNextLeftHit(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.setTimeInMillis(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Boolean.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ButtonPeer.setLabel(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.getNumBands()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.lowestOneBit(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.log(Level, Supplier)": {
        "args": [
            "Level", 
            "Supplier"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.Charset.displayName(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.cancel(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.testBit(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.runAfterBothAsync(CompletionStage, Runnable, Executor)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CompletionStage", 
            "Runnable", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeSet.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.ReadableByteChannel.read(ByteBuffer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [
            "NonReadableChannelException", 
            "ClosedChannelException", 
            "AsynchronousCloseException", 
            "ClosedByInterruptException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.FileDialog.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.LogRecord.setThrown(Throwable)": {
        "args": [
            "Throwable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics2D.drawString(AttributedCharacterIterator, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "AttributedCharacterIterator", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.net.HttpCookie.getPath()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Rectangle.getHeight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsConfiguration.getBounds()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.OperatingSystemMXBean.getAvailableProcessors()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.removeLast()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.lang.String.valueOf(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContext.getResourceAsStream(String, BeanContextChild)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "BeanContextChild"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": [
            "IllegalArgumentException"
        ]
    }, 
    "java.awt.event.ActionEvent.getActionCommand()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.setConnectTimeout(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.getByte(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.reflect.AnnotatedType.getType()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MediaTracker.checkID(int, boolean)": {
        "args": [
            "int", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.list(PrintStream)": {
        "args": [
            "PrintStream"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DragGestureEvent.toArray(Object[])": {
        "args": [
            "Object[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateDate(int, Date)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Date"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.ByteBuffer.putDouble(int, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "double"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.net.URLConnection.getIfModifiedSince()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.addTo(Temporal)": {
        "args": [
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.RectangularShape.getMinY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.AclEntryType.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.instrument.ClassDefinition.getDefinitionClassFile()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceDragEvent.getGestureModifiers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLClassLoader.findResources(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicReferenceArray.compareAndSet(int, E, E)": {
        "args": [
            "int", 
            "E", 
            "E"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.deriveFont(AffineTransform)": {
        "args": [
            "AffineTransform"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.cert.X509CRL.getIssuerDN()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.PrinterJob.getUserName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ByteLookupTable.lookupPixel(int[], int[])": {
        "args": [
            "int[]", 
            "int[]"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.setToScale(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.Paper.setSize(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MultipleGradientPaint.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.TextComponentPeer.setEditable(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Arc2D.setAngles(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Identity.getInfo()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.spi.SelectorProvider.inheritedChannel()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.zip.ZipFile.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.DisplayMode.getRefreshRate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneOffsetTransitionRule.getOffsetBefore()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendText(TemporalField, Map)": {
        "args": [
            "TemporalField", 
            "Map"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Rectangle2D.createUnion(Rectangle2D)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CharsetDecoder.isAutoDetecting()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.hasUniformLineMetrics()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.remove(WindowListener, WindowListener)": {
        "args": [
            "WindowListener", 
            "WindowListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Semaphore.release(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousByteChannel.read(ByteBuffer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ReadPendingException"
        ], 
        "throws": []
    }, 
    "java.util.Deque.pollFirst()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXCertPathValidatorResult.getPublicKey()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.MemoryHandler.getPushLevel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceContext.dragOver(DragSourceDragEvent)": {
        "args": [
            "DragSourceDragEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.subSet(E, boolean, E, boolean)": {
        "args": [
            "E", 
            "boolean", 
            "E", 
            "boolean"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.zone.ZoneOffsetTransitionRule.getTimeDefinition()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Package.isSealed(URL)": {
        "args": [
            "URL"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLong.set(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.peer.DropTargetContextPeer.acceptDrop(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URI.getPath()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Double.doubleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.firePropertyChange(String, Object, Object)": {
        "args": [
            "String", 
            "Object", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TimeZone.getTimeZone(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.Selector.selectedKeys()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ClosedSelectorException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.spi.AbstractInterruptibleChannel.end(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "AsynchronousCloseException", 
            "ClosedByInterruptException"
        ], 
        "throws": [
            "AsynchronousCloseException"
        ]
    }, 
    "java.awt.CheckboxMenuItem.processEvent(AWTEvent)": {
        "args": [
            "AWTEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.createImage(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CardLayout.getVgap()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.NumberFormat.setMinimumIntegerDigits(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.of(int, Month)": {
        "args": [
            "int", 
            "Month"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DragSource.createDefaultDragGestureRecognizer(Component, int, DragGestureListener)": {
        "args": [
            "Component", 
            "int", 
            "DragGestureListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Point.getX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CharsetDecoder.maxCharsPerByte()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsCatalogsInDataManipulation()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.DatabaseMetaData.supportsSchemasInPrivilegeDefinitions()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.CallableStatement.setBlob(String, Blob)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Blob"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Arrays.parallelPrefix(T[], int, int, BinaryOperator)": {
        "args": [
            "T[]", 
            "int", 
            "int", 
            "BinaryOperator"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.im.spi.InputMethod.notifyClientWindowChange(Rectangle)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Rectangle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.EventQueue.getNextEvent()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.net.CookieHandler.getDefault()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.FocusTraversalPolicy.getComponentBefore(Container, Component)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Container", 
            "Component"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.cert.CertStore.getCRLs(CRLSelector)": {
        "args": [
            "CRLSelector"
        ], 
        "@throws": [
            "CertStoreException"
        ], 
        "throws": [
            "CertStoreException"
        ]
    }, 
    "java.lang.reflect.Modifier.isProtected(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistChronology.dateNow(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PipedOutputStream.write(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getWaitQueueLength(ConditionObject)": {
        "args": [
            "ConditionObject"
        ], 
        "@throws": [
            "IllegalMonitorStateException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.beans.PropertyDescriptor.isBound()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Enum.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "CloneNotSupportedException"
        ]
    }, 
    "java.io.LineNumberReader.read(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.file.FileSystem.getSeparator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintStream.printf(Locale, String, Object[])": {
        "args": [
            "Locale", 
            "String", 
            "Object[]"
        ], 
        "@throws": [
            "IllegalFormatException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.net.DatagramSocket.isBound()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SecureRandom.setSeed(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Byte.decode(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.sql.CallableStatement.registerOutParameter(String, int, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int", 
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.reflect.Modifier.isPublic(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.EventHandler.getTarget()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTKeyStroke.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.swap(List, int, int)": {
        "args": [
            "List", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Window.setOpacity(float)": {
        "args": [
            "float"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalComponentStateException", 
            "IllegalComponentStateException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.DoubleSummaryStatistics.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.getBackBuffer()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.of(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.sort(int[])": {
        "args": [
            "int[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.FileLock.overlaps(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StringReader.ready()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.LinkedBlockingDeque.addLast(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.net.URLConnection.setContentHandlerFactory(ContentHandlerFactory)": {
        "args": [
            "ContentHandlerFactory"
        ], 
        "@throws": [
            "Error", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.retainAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongFieldUpdater.weakCompareAndSet(T, long, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "long", 
            "long"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.awt.Checkbox.getItemListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getAccessibleChildrenCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.XMLDecoder.setOwner(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.DuplicateFormatFlagsException.getFlags()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingDeque.addFirst(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "IllegalStateException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.StringBuffer.charAt(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.StringJoiner.length()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.format(DateTimeFormatter)": {
        "args": [
            "DateTimeFormatter"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.IsoEra.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.StringSelection.isDataFlavorSupported(DataFlavor)": {
        "args": [
            "DataFlavor"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Label.setText(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.getAccessibleAt(Point)": {
        "args": [
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXBuilderParameters.setMaxPathLength(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "InvalidParameterException"
        ], 
        "throws": []
    }, 
    "java.lang.Math.subtractExact(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateClob(int, Clob)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Clob"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.beans.PropertyEditorSupport.getCustomEditor()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.getPixels(int, int, int, int, int[])": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.image.Raster.getPixel(int, int, double[])": {
        "args": [
            "int", 
            "int", 
            "double[]"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.time.LocalTime.with(TemporalField, long)": {
        "args": [
            "TemporalField", 
            "long"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.ScrollbarPeer.setValues(int, int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuilder.lastIndexOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Polygon.getBounds()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.Selector.selectNow()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException", 
            "ClosedSelectorException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.CallableStatement.getTime(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.temporal.ChronoField.isTimeBased()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.PackedColorModel.getAlphaRaster(WritableRaster)": {
        "args": [
            "WritableRaster"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.PrinterJob.defaultPage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndDecrement(T)": {
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Timestamp.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Map.isEmpty()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZoneId.normalized()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsANSI92EntryLevelSQL()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.Line2D.ptSegDist(double, double, double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getFont()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.repaint(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.Matcher.group(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalStateException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.runAfterEither(CompletionStage, Runnable)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CompletionStage", 
            "Runnable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.acl.AclEntry.checkPermission(Permission)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Permission"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.getVisualHighlightShape(TextHitInfo, TextHitInfo, Rectangle2D)": {
        "args": [
            "TextHitInfo", 
            "TextHitInfo", 
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Clock.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentNavigableMap.descendingMap()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorConvertOp.getPoint2D(Point2D, Point2D)": {
        "args": [
            "Point2D", 
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.addUnicodeLocaleAttribute(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllformedLocaleException"
        ], 
        "throws": []
    }, 
    "java.time.zone.ZoneRulesProvider.provideVersions(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "ZoneRulesException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.bcsPreDeserializationHook(ObjectInputStream)": {
        "args": [
            "ObjectInputStream"
        ], 
        "@throws": [], 
        "throws": [
            "IOException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.awt.EventQueue.postEvent(AWTEvent)": {
        "args": [
            "AWTEvent"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Toolkit.createDragGestureRecognizer(Class, DragSource, Component, int, DragGestureListener)": {
        "args": [
            "Class", 
            "DragSource", 
            "Component", 
            "int", 
            "DragGestureListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.isValidateRoot()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.firePropertyChange(String, byte, byte)": {
        "args": [
            "String", 
            "byte", 
            "byte"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.thenAcceptBoth(CompletionStage, BiConsumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CompletionStage", 
            "BiConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadInfo.getThreadId()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.getMenuShortcutKeyMask()": {
        "args": [
            ""
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.sql.Timestamp.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneOffsetTransitionRule.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RMISocketFactory.getDefaultSocketFactory()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.BitSet.set(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.beans.Expression.execute()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NullPointerException", 
            "NoSuchMethodException", 
            "SecurityException", 
            "Exception"
        ], 
        "throws": [
            "Exception"
        ]
    }, 
    "java.awt.image.DataBufferFloat.getElem(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isLowSurrogate(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PushbackReader.skip(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.beans.beancontext.BeanContextChildSupport.releaseBeanContextResources()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionService.submit(Runnable, V)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Runnable", 
            "V"
        ], 
        "@throws": [
            "RejectedExecutionException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.setCurve(CubicCurve2D)": {
        "args": [
            "CubicCurve2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FileOutputStream.finalize()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Graphics2D.setStroke(Stroke)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Stroke"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.setDefaultUncaughtExceptionHandler(UncaughtExceptionHandler)": {
        "args": [
            "UncaughtExceptionHandler"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.lang.StrictMath.sqrt(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintWriter.println()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLWarning.setNextWarning(SQLWarning)": {
        "args": [
            "SQLWarning"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SimpleTimeZone.setStartYear(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantLock.getQueueLength()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.LockSupport.parkNanos(Object, long)": {
        "args": [
            "Object", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.replaceAll(BiFunction)": {
        "args": [
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Formatter.close()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.isAssignableFrom(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.AccessController.doPrivileged(PrivilegedExceptionAction, AccessControlContext, Permission[])": {
        "args": [
            "PrivilegedExceptionAction", 
            "AccessControlContext", 
            "Permission[]"
        ], 
        "@throws": [
            "PrivilegedActionException", 
            "NullPointerException"
        ], 
        "throws": [
            "PrivilegedActionException"
        ]
    }, 
    "java.lang.Character.isLetterOrDigit(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.removeItemListener(ItemListener)": {
        "args": [
            "ItemListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.AclEntryPermission.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.LogRecord.getLoggerName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalAmount.addTo(Temporal)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationID.activate(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "ActivationException", 
            "UnknownObjectException", 
            "RemoteException"
        ], 
        "throws": [
            "ActivationException", 
            "UnknownObjectException", 
            "RemoteException"
        ]
    }, 
    "java.util.zip.Deflater.setDictionary(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.RadialGradientPaint.getCenterPoint()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.getAccessibleIndexInParent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertificateFactorySpi.engineGetCertPathEncodings()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ScheduledThreadPoolExecutor.getContinueExistingPeriodicTasksAfterShutdownPolicy()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.of(LocalDateTime, ZoneId)": {
        "args": [
            "LocalDateTime", 
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.entrySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.GregorianCalendar.computeTime()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.sql.Clob.position(Clob, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Clob", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.KeyStore.isKeyEntry(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "KeyStoreException"
        ], 
        "throws": [
            "KeyStoreException"
        ]
    }, 
    "java.sql.ResultSet.getSQLXML(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.zone.ZoneOffsetTransitionRule.getLocalTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.getLong(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.Double.min(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.WeekFields.of(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormat.getTimeZone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.setCurve(float, float, float, float, float, float, float, float)": {
        "args": [
            "float", 
            "float", 
            "float", 
            "float", 
            "float", 
            "float", 
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLData.writeSQL(SQLOutput)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "SQLOutput"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.CardLayout.setVgap(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.SequenceInputStream.read()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.DoubleBuffer.isDirect()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BandedSampleModel.createSubsetSampleModel(int[])": {
        "args": [
            "int[]"
        ], 
        "@throws": [
            "RasterFormatException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.file.Files.newByteChannel(Path, Set, FileAttribute[])": {
        "args": [
            "Path", 
            "Set", 
            "FileAttribute[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "FileAlreadyExistsException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.CardLayout.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Stream.toArray(IntFunction)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "IntFunction"
        ], 
        "@throws": [
            "ArrayStoreException"
        ], 
        "throws": []
    }, 
    "java.net.JarURLConnection.getJarFileURL()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipEntry.isDirectory()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoPeriod.negated()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.getInputMethodListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.divide(BigDecimal, int)": {
        "args": [
            "BigDecimal", 
            "int"
        ], 
        "@throws": [
            "ArithmeticException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Scanner.reset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.awt.TextField.processActionEvent(ActionEvent)": {
        "args": [
            "ActionEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.spi.AbstractSelectableChannel.isBlocking()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadInfo.getLockOwnerId()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.CharBuffer.isDirect()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collector.supplier()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.InputStreamReader.getEncoding()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.setPositiveSuffix(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectStreamField.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRLSelector.addIssuerName(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.TimeZone.setID(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Hashtable.elements()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDate.lengthOfYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.pollFirst()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.now(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicBoolean.set(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SecureClassLoader.getPermissions(CodeSource)": {
        "args": [
            "CodeSource"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.DoubleSummaryStatistics.accept(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextField.getMinimumSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.PrimitiveIterator.nextDouble()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.security.cert.PolicyNode.getPolicyQualifiers()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.handleEvent(Event)": {
        "args": [
            "Event"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.LogRecord.setSourceMethodName(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.getCharParameter(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Scrollbar.getValueIsAdjusting()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.getFlatness(double, double, double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadInfo.getLockName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Random.next(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramPacket.getAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.flush()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "BackingStoreException"
        ], 
        "throws": [
            "BackingStoreException"
        ]
    }, 
    "java.nio.channels.spi.AbstractSelectableChannel.keyFor(Selector)": {
        "args": [
            "Selector"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Field.setBoolean(Object, boolean)": {
        "args": [
            "Object", 
            "boolean"
        ], 
        "@throws": [
            "IllegalAccessException", 
            "IllegalArgumentException", 
            "NullPointerException", 
            "ExceptionInInitializerError"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "IllegalAccessException"
        ]
    }, 
    "java.io.PrintWriter.println(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedTransferQueue.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.FileChannel.transferTo(long, long, WritableByteChannel)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "long", 
            "WritableByteChannel"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NonReadableChannelException", 
            "NonWritableChannelException", 
            "ClosedChannelException", 
            "AsynchronousCloseException", 
            "ClosedByInterruptException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.stream.LongStream.of(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.SocketOptions.setOption(int, Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Object"
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.getWaitQueueLength()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalMonitorStateException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.transferFocusUpCycle()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Phaser.arriveAndDeregister()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandleInfo.getModifiers()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.toString(boolean[])": {
        "args": [
            "boolean[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyEditorManager.setEditorSearchPath(String[])": {
        "args": [
            "String[]"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.image.WritableRenderedImage.removeTileObserver(TileObserver)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "TileObserver"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.addFirst(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.getDouble(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.Duration.isNegative()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Double.isInfinite()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.RSAOtherPrimeInfo.getPrime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.CodeSigner.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.toOctalString(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateCharacterStream(String, Reader, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Reader", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.PreparedStatement.setObject(int, Object, SQLType, int)": {
        "args": [
            "int", 
            "Object", 
            "SQLType", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.font.ImageGraphicAttribute.getAscent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateTime(int, Time)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Time"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.TextComponent.enableInputMethods(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeSet.lower(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.function.Predicate.or(Predicate)": {
        "args": [
            "Predicate"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.StrictMath.signum(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Rectangle2D.getY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.setCursor(Cursor)": {
        "args": [
            "Cursor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.getColor()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateObject(int, Object, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Object", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.renderable.ParameterBlock.set(double, int)": {
        "args": [
            "double", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.SystemColor.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SinglePixelPackedSampleModel.getOffset(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Button.removeActionListener(ActionListener)": {
        "args": [
            "ActionListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getCrossReference(String, String, String, String, String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String", 
            "String", 
            "String", 
            "String", 
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.PriorityQueue.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.getCertificate(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "KeyStoreException"
        ], 
        "throws": [
            "KeyStoreException"
        ]
    }, 
    "java.lang.management.ThreadMXBean.getThreadInfo(long, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalArgumentException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.List.select(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.FileSystems.getDefault()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.spi.DateFormatProvider.getDateInstance(int, Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Locale"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.keySet(V)": {
        "args": [
            "V"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.font.OpenType.getFontTableSize(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FontMetrics.getMaxAscent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.processEvent(AWTEvent)": {
        "args": [
            "AWTEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.RSAKeyGenParameterSpec.getPublicExponent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.LookupOp.createCompatibleDestImage(BufferedImage, ColorModel)": {
        "args": [
            "BufferedImage", 
            "ColorModel"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getEnclosingMethod()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.time.chrono.ThaiBuddhistDate.getChronology()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.DoubleBuffer.put(int, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "double"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.util.Calendar.getActualMaximum(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.UUID.randomUUID()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MediaTracker.isErrorID(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.TextComponentPeer.getInputMethodRequests()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInput.read(byte[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.Instant.adjustInto(Temporal)": {
        "args": [
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.Long.floatValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.setCurve(Point2D, Point2D, Point2D, Point2D)": {
        "args": [
            "Point2D", 
            "Point2D", 
            "Point2D", 
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.Naming.bind(String, Remote)": {
        "args": [
            "String", 
            "Remote"
        ], 
        "@throws": [
            "AlreadyBoundException", 
            "MalformedURLException", 
            "RemoteException", 
            "AccessException"
        ], 
        "throws": [
            "AlreadyBoundException", 
            "MalformedURLException", 
            "RemoteException"
        ]
    }, 
    "java.util.BitSet.valueOf(LongBuffer)": {
        "args": [
            "LongBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.setMatchAllSubjectAltNames(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getMaxBinaryLiteralLength()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.text.AttributedCharacterIterator.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getExportedKeys(String, String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String", 
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.PreparedStatement.setObject(int, Object, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Object", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.math.BigDecimal.toBigIntegerExact()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.MonthDay.now(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedHashMap.containsValue(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SimpleTimeZone.hasSameRules(TimeZone)": {
        "args": [
            "TimeZone"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Dimension.getWidth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.getDouble(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.security.IdentityScope.getSystemScope()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.CharBuffer.wrap(char[])": {
        "args": [
            "char[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.keysSpi()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "BackingStoreException"
        ], 
        "throws": [
            "BackingStoreException"
        ]
    }, 
    "java.awt.TextField.getMinimumSize(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.readClassDescriptor()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException", 
            "ClassNotFoundException"
        ], 
        "throws": [
            "IOException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.io.File.canWrite()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImage.createRendering(RenderContext)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "RenderContext"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.DSAParameterSpec.getG()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RemoteObject.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ImageCapabilities.isAccelerated()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ClassLoader.clearAssertionStatus()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ExecutorService.submit(Callable)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Callable"
        ], 
        "@throws": [
            "RejectedExecutionException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.createBuffers(int, BufferCapabilities)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "BufferCapabilities"
        ], 
        "@throws": [
            "AWTException"
        ], 
        "throws": [
            "AWTException"
        ]
    }, 
    "java.awt.Toolkit.createImage(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkRead(FileDescriptor)": {
        "args": [
            "FileDescriptor"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.ScrollPaneAdjustable.setUnitIncrement(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationGroup.inactiveGroup()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnknownGroupException", 
            "RemoteException"
        ], 
        "throws": [
            "UnknownGroupException", 
            "RemoteException"
        ]
    }, 
    "java.awt.Canvas.createBufferStrategy(int, BufferCapabilities)": {
        "args": [
            "int", 
            "BufferCapabilities"
        ], 
        "@throws": [
            "AWTException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "AWTException"
        ]
    }, 
    "java.time.format.DecimalStyle.withDecimalSeparator(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.instrument.Instrumentation.setNativeMethodPrefix(ClassFileTransformer, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ClassFileTransformer", 
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "UnsupportedOperationException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.SystemTray.addPropertyChangeListener(String, PropertyChangeListener)": {
        "args": [
            "String", 
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.WritableRaster.setPixels(int, int, int, int, int[])": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.security.AccessControlContext.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.PosixFilePermissions.asFileAttribute(Set)": {
        "args": [
            "Set"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.awt.image.DataBufferUShort.setElem(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FileDialog.setFilenameFilter(FilenameFilter)": {
        "args": [
            "FilenameFilter"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.contains(Point2D)": {
        "args": [
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.ofPattern(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.temporal.TemporalField.getRangeUnit()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.writeChars(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.beans.PropertyChangeEvent.setPropagationId(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.LineMetrics.getUnderlineOffset()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Date.setTime(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.deleteOnExit()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.image.DataBufferByte.getData()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.MessageFormat.getFormats()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Authenticator.getRequestingPort()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Throwable.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CountedCompleter.decrementPendingCountUnlessZero()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.NavigableSet.higher(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.FilterWriter.write(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Arrays.copyOf(int[], int)": {
        "args": [
            "int[]", 
            "int"
        ], 
        "@throws": [
            "NegativeArraySizeException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.createBCSSServiceProvider(Class, BeanContextServiceProvider)": {
        "args": [
            "Class", 
            "BeanContextServiceProvider"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.UUID.fromString(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderedImageFactory.create(ParameterBlock, RenderingHints)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ParameterBlock", 
            "RenderingHints"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Time.toLocalTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.getReds(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setNString(int, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.stream.DoubleStream.allMatch(DoublePredicate)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DoublePredicate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXParameters.getTrustAnchors()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Signer.setKeyPair(KeyPair)": {
        "args": [
            "KeyPair"
        ], 
        "@throws": [
            "InvalidParameterException", 
            "KeyException", 
            "SecurityException"
        ], 
        "throws": [
            "InvalidParameterException", 
            "KeyException"
        ]
    }, 
    "java.util.concurrent.ForkJoinPool.invoke(ForkJoinTask)": {
        "args": [
            "ForkJoinTask"
        ], 
        "@throws": [
            "NullPointerException", 
            "RejectedExecutionException"
        ], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.getChannel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.ServerSocket.bind(SocketAddress)": {
        "args": [
            "SocketAddress"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.spec.PSSParameterSpec.getDigestAlgorithm()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.multiplyExact(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.font.GlyphVector.getGlyphPosition(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.security.Identity.setPublicKey(PublicKey)": {
        "args": [
            "PublicKey"
        ], 
        "@throws": [
            "KeyManagementException", 
            "SecurityException"
        ], 
        "throws": [
            "KeyManagementException"
        ]
    }, 
    "java.awt.Container.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CompositeContext.compose(Raster, Raster, WritableRaster)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Raster", 
            "Raster", 
            "WritableRaster"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractSequentialList.listIterator(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Modifier.toString(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceEvent.getDragSourceContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Rectangle2D.getBounds2D()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.finer(Supplier)": {
        "args": [
            "Supplier"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.nextAfter(float, double)": {
        "args": [
            "float", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramPacket.getData()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.setScale(int, RoundingMode)": {
        "args": [
            "int", 
            "RoundingMode"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.text.ChoiceFormat.toPattern()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBuffer.getDataTypeSize(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Dialog.setBackground(Color)": {
        "args": [
            "Color"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.getPropertyChangeListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getClob(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.charset.CoderResult.unmappableForLength(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.spi.FileSystemProvider.copy(Path, Path, CopyOption[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Path", 
            "Path", 
            "CopyOption[]"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "FileAlreadyExistsException", 
            "DirectoryNotEmptyException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.SynchronousQueue.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.setToTranslation(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.getGraphicsConfiguration()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.clearRect(int, int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormat.getNumberFormat()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandle.asType(MethodType)": {
        "args": [
            "MethodType"
        ], 
        "@throws": [
            "NullPointerException", 
            "WrongMethodTypeException"
        ], 
        "throws": []
    }, 
    "java.nio.file.spi.FileSystemProvider.createLink(Path, Path)": {
        "args": [
            "Path", 
            "Path"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "FileAlreadyExistsException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.renderable.ParameterBlock.set(float, int)": {
        "args": [
            "float", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.deserialize(ObjectInputStream, Collection)": {
        "args": [
            "ObjectInputStream", 
            "Collection"
        ], 
        "@throws": [
            "IOException", 
            "ClassNotFoundException"
        ], 
        "throws": [
            "IOException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.awt.print.PageFormat.getImageableHeight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Timestamp.toLocalDateTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.valueOf(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Inflater.end()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayDeque.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.thenCombineAsync(CompletionStage, BiFunction)": {
        "args": [
            "CompletionStage", 
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocket.getBroadcast()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.nio.file.spi.FileSystemProvider.delete(Path)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Path"
        ], 
        "@throws": [
            "NoSuchFileException", 
            "DirectoryNotEmptyException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.InputStream.read(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "IOException", 
            "NullPointerException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.IllformedLocaleException.getErrorIndex()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Period.negated()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Modifier.parameterModifiers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectStreamField.getOffset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.PriorityBlockingQueue.spliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.WritableRaster.getWritableParent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Float.parseFloat(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.util.jar.Attributes.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.ConstantCallSite.setTarget(MethodHandle)": {
        "args": [
            "MethodHandle"
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.ScrollPane.getHAdjustable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Stream.sorted()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterators.spliteratorUnknownSize(Iterator, int)": {
        "args": [
            "Iterator", 
            "int"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.ByteArrayOutputStream.toString(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collectors.toConcurrentMap(Function, Function, BinaryOperator, Supplier)": {
        "args": [
            "Function", 
            "Function", 
            "BinaryOperator", 
            "Supplier"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.BreakIterator.getAvailableLocales()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509Extension.getNonCriticalExtensionOIDs()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.Matcher.group(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalStateException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.nio.ShortBuffer.compareTo(ShortBuffer)": {
        "args": [
            "ShortBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedQueue.peek()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.isPlain()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.windowIconified(WindowEvent)": {
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedTransferQueue.put(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.accept(double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.datatransfer.Clipboard.isDataFlavorAvailable(DataFlavor)": {
        "args": [
            "DataFlavor"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.text.DateFormatSymbols.setAmPmStrings(String[])": {
        "args": [
            "String[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSetMetaData.isSigned(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.spi.TimeZoneNameProvider.getGenericDisplayName(String, int, Locale)": {
        "args": [
            "String", 
            "int", 
            "Locale"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.net.URLConnection.addRequestProperty(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.Autoscroll.autoscroll(Point)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.logp(Level, String, String, Throwable, Supplier)": {
        "args": [
            "Level", 
            "String", 
            "String", 
            "Throwable", 
            "Supplier"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.getLocalizedDateTimePattern(FormatStyle, FormatStyle, Chronology, Locale)": {
        "args": [
            "FormatStyle", 
            "FormatStyle", 
            "Chronology", 
            "Locale"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.beans.VetoableChangeSupport.fireVetoableChange(String, Object, Object)": {
        "args": [
            "String", 
            "Object", 
            "Object"
        ], 
        "@throws": [
            "PropertyVetoException"
        ], 
        "throws": [
            "PropertyVetoException"
        ]
    }, 
    "java.text.NumberFormat.getInstance(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.MemoryMXBean.getObjectPendingFinalizationCount()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.Attributes.getValue(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.image.BandCombineOp.filter(Raster, WritableRaster)": {
        "args": [
            "Raster", 
            "WritableRaster"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.net.Socket.getOutputStream()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.color.ICC_ColorSpace.getMaxValue(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.Byte.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CountDownLatch.getCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StringWriter.append(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getOtherPrimeInfo()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.removePropertyChangeListener(PropertyChangeListener)": {
        "args": [
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.acl.Permission.equals(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.contains(Point2D)": {
        "args": [
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.PriorityBlockingQueue.put(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDateTime.toLocalTime()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.add(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.event.ContainerEvent.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.ServerRef.getClientHost()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ServerNotActiveException"
        ], 
        "throws": [
            "ServerNotActiveException"
        ]
    }, 
    "java.lang.invoke.MethodHandleProxies.asInterfaceInstance(Class, MethodHandle)": {
        "args": [
            "Class", 
            "MethodHandle"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "WrongMethodTypeException"
        ], 
        "throws": []
    }, 
    "java.awt.event.MouseAdapter.mouseDragged(MouseEvent)": {
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.CompilationMXBean.isCompilationTimeMonitoringSupported()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.DoubleAccumulator.doubleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StringReader.reset()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.text.CharacterIterator.getEndIndex()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.FontRenderContext.getAntiAliasingHint()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Boolean.compareTo(Boolean)": {
        "args": [
            "Boolean"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.cert.Certificate.getType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.floorMod(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.io.LineNumberInputStream.mark(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Hashtable.replace(K, V, V)": {
        "args": [
            "K", 
            "V", 
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.HashMap.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.getCtrlP1()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXParameters.getTargetCertConstraints()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.interfaces.RSAMultiPrimePrivateCrtKey.getPrimeExponentQ()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.ECParameterSpec.getCofactor()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getSQLXML(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.beans.beancontext.BeanContext.getResource(String, BeanContextChild)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "BeanContextChild"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": [
            "IllegalArgumentException"
        ]
    }, 
    "java.util.concurrent.locks.ReentrantLock.newCondition()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateRow()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.SQLOutput.writeURL(URL)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "URL"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.stream.DoubleStream.build()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.stream.LongStream.add(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.image.RGBImageFilter.filterIndexColorModel(IndexColorModel)": {
        "args": [
            "IndexColorModel"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.beans.PropertyChangeSupport.hasListeners(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.replaceObject(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendPattern(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.StringBuffer.insert(int, float)": {
        "args": [
            "int", 
            "float"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextMembershipEvent.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndUpdate(T, IntUnaryOperator)": {
        "args": [
            "T", 
            "IntUnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Rectangle2D.getWidth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Runnable.run()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.DisplayMode.equals(DisplayMode)": {
        "args": [
            "DisplayMode"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.getSecond()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.removeMouseListener(MouseListener)": {
        "args": [
            "MouseListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Handler.setFilter(Filter)": {
        "args": [
            "Filter"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.nio.CharBuffer.wrap(CharSequence, int, int)": {
        "args": [
            "CharSequence", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.GraphicsDevice.setDisplayMode(DisplayMode)": {
        "args": [
            "DisplayMode"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.lang.management.MemoryMXBean.getHeapMemoryUsage()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MediaTracker.checkAll(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.scalb(double, int)": {
        "args": [
            "double", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextHitInfo.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.toLowerCase(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Statement.getMethodName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Rectangle.getBounds2D()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.DoubleAdder.sum()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.hashCode(int[])": {
        "args": [
            "int[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Month.firstMonthOfQuarter()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.IdentityHashMap.entrySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateNClob(int, Reader, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Reader", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.BorderLayout.getLayoutAlignmentX(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.getQueue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.getMinute()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Menu.getAccessibleContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getPropertyNames()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.BitSet.set(int, int, boolean)": {
        "args": [
            "int", 
            "int", 
            "boolean"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.time.format.TextStyle.asStandalone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.getComponents(int, int[], int)": {
        "args": [
            "int", 
            "int[]", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.MenuPeer.delItem(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Short.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.rotateRight(long, int)": {
        "args": [
            "long", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.FontRenderContext.usesFractionalMetrics()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Hashtable.forEach(BiConsumer)": {
        "args": [
            "BiConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.getX1()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractList.indexOf(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.stream.LongStream.collect(Supplier, ObjLongConsumer, BiConsumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Supplier", 
            "ObjLongConsumer", 
            "BiConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoEra.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.findFirst()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.getMatrix(double[])": {
        "args": [
            "double[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXCertPathValidatorResult.getPolicyTree()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RenderedImage.getTileWidth()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferByte.getElem(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StackTraceElement.getFileName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.MessageDigestSpi.clone()": {
        "args": [
            ""
        ], 
        "@throws": [
            "CloneNotSupportedException"
        ], 
        "throws": [
            "CloneNotSupportedException"
        ]
    }, 
    "java.net.URLConnection.getContentLength()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXRevocationChecker.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.DoubleBuffer.put(double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.util.stream.Stream.forEachOrdered(Consumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Consumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.XMLDecoder.createHandler(Object, ExceptionListener, ClassLoader)": {
        "args": [
            "Object", 
            "ExceptionListener", 
            "ClassLoader"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Parameter.getDeclaredAnnotations()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.FileSystemException.getReason()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.listIterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.binarySearch(short[], short)": {
        "args": [
            "short[]", 
            "short"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.getComponents()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousServerSocketChannel.bind(SocketAddress, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "SocketAddress", 
            "int"
        ], 
        "@throws": [
            "AlreadyBoundException", 
            "UnsupportedAddressTypeException", 
            "SecurityException", 
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicIntegerArray.set(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FontMetrics.getWidths()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.DatagramChannel.write(ByteBuffer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [
            "NotYetConnectedException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.reflect.Field.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.FutureTask.get()": {
        "args": [
            ""
        ], 
        "@throws": [
            "CancellationException"
        ], 
        "throws": [
            "InterruptedException", 
            "ExecutionException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndSet(T, int)": {
        "args": [
            "T", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.truncatedTo(TemporalUnit)": {
        "args": [
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.lang.StringBuffer.substring(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.logging.Filter.isLoggable(LogRecord)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "LogRecord"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistChronology.getCalendarType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SeekableByteChannel.position(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "ClosedChannelException", 
            "IllegalArgumentException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.SampleModel.setSample(int, int, int, float, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "float", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.List.setForeground(Color)": {
        "args": [
            "Color"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.BitSet.intersects(BitSet)": {
        "args": [
            "BitSet"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.setName(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.nio.LongBuffer.get()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "BufferUnderflowException"
        ], 
        "throws": []
    }, 
    "java.nio.file.Files.lines(Path)": {
        "args": [
            "Path"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.MenuBar.shortcuts()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.LayoutManager.layoutContainer(Container)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoDate.range(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FilterReader.markSupported()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Frame.removeNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.IEEEremainder(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.parallelSetAll(long[], IntToLongFunction)": {
        "args": [
            "long[]", 
            "IntToLongFunction"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImage.getWidth()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.EnumMap.containsKey(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.getType(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.Operation.getOperation()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.split(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "PatternSyntaxException"
        ], 
        "throws": []
    }, 
    "java.time.temporal.Temporal.until(Temporal, TemporalUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Temporal", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.JobAttributes.getToPage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.ofEpochDay(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.net.URL.toExternalForm()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Inflater.inflate(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "DataFormatException"
        ], 
        "throws": [
            "DataFormatException"
        ]
    }, 
    "java.time.LocalDate.withDayOfMonth(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.getComponents(int, int[], int)": {
        "args": [
            "int", 
            "int[]", 
            "int"
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.Chronology.dateNow(Clock)": {
        "args": [
            "Clock"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.beans.BeanDescriptor.getCustomizerClass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateObject(int, Object, SQLType)": {
        "args": [
            "int", 
            "Object", 
            "SQLType"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.locks.Lock.tryLock(long, TimeUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.FlowLayout.getAlignOnBaseline()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Method.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.endsWith(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXParameters.isPolicyMappingInhibited()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.setFont(Font)": {
        "args": [
            "Font"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.keySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FlowLayout.removeLayoutComponent(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.sync()": {
        "args": [
            ""
        ], 
        "@throws": [
            "BackingStoreException", 
            "IllegalStateException"
        ], 
        "throws": [
            "BackingStoreException"
        ]
    }, 
    "java.security.cert.X509CRL.getThisUpdate()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.StandardProtocolFamily.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.anyOf(CompletableFuture[])": {
        "args": [
            "CompletableFuture[]"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.withSecond(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.security.cert.X509Certificate.getNotAfter()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormat.getDateInstance(int, Locale)": {
        "args": [
            "int", 
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.getScreenInsets(GraphicsConfiguration)": {
        "args": [
            "GraphicsConfiguration"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.awt.dnd.DragSourceMotionListener.dragMouseMoved(DragSourceDragEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DragSourceDragEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.getMonthValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormat.parse(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "ParseException"
        ], 
        "throws": [
            "ParseException"
        ]
    }, 
    "java.lang.Thread.start()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalThreadStateException"
        ], 
        "throws": []
    }, 
    "java.awt.event.AWTEventListener.eventDispatched(AWTEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "AWTEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.nextShort()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InputMismatchException", 
            "NoSuchElementException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.security.spec.ECPrivateKeySpec.getS()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.substring(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.ArrayDeque.poll()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImageOp.setParameterBlock(ParameterBlock)": {
        "args": [
            "ParameterBlock"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationMonitor.inactiveGroup(ActivationGroupID, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ActivationGroupID", 
            "long"
        ], 
        "@throws": [
            "UnknownGroupException", 
            "RemoteException"
        ], 
        "throws": [
            "UnknownGroupException", 
            "RemoteException"
        ]
    }, 
    "java.applet.AppletContext.getStream(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingDeque.putFirst(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "InterruptedException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.math.BigInteger.pow(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.sql.Time.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getPreferredSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.plus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.getP1()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setNull(String, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.CopyOnWriteArraySet.toArray(T[])": {
        "args": [
            "T[]"
        ], 
        "@throws": [
            "ArrayStoreException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.TrayIcon.getMouseMotionListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.SynchronousQueue.drainTo(Collection, int)": {
        "args": [
            "Collection", 
            "int"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.acl.Acl.getName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.awaitUninterruptibly()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.GarbageCollectorMXBean.getCollectionCount()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingQueue.remainingCapacity()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.OptionalDouble.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.addPropertyChangeListener(PropertyChangeListener)": {
        "args": [
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentSampleModel.getPixelStride()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.methodType(Class, Class[])": {
        "args": [
            "Class", 
            "Class[]"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.KeyStoreSpi.engineGetCertificateChain(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.ptLineDist(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CharsetDecoder.isCharsetDetected()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.getBasicConstraints()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadLocalRandom.longs()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.getContentLengthLong()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getStatement()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.print.Paper.getImageableHeight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousFileChannel.open(Path, OpenOption[])": {
        "args": [
            "Path", 
            "OpenOption[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.AWTEventMulticaster.windowLostFocus(WindowEvent)": {
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.color.ColorSpace.getName(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.reset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.setSocketImplFactory(SocketImplFactory)": {
        "args": [
            "SocketImplFactory"
        ], 
        "@throws": [
            "IOException", 
            "SocketException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.font.GlyphVector.getOutline(float, float)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.parse(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [
            "DateTimeParseException"
        ], 
        "throws": []
    }, 
    "java.awt.Graphics2D.fill(Shape)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Shape"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.min(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsEnvironment.preferLocaleFonts()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getActionListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.fill(long[], long)": {
        "args": [
            "long[]", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.getMoreResults(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.chrono.Chronology.dateNow()": {
        "args": [
            ""
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.show()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StreamTokenizer.eolIsSignificant(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.newTaskFor(Runnable, T)": {
        "args": [
            "Runnable", 
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.decrementAndGet(T)": {
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.getDefaultAllowUserInteraction()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintWriter.print(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Adjustable.setUnitIncrement(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.paintComponents(Graphics)": {
        "args": [
            "Graphics"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.readAllLines(Path, Charset)": {
        "args": [
            "Path", 
            "Charset"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.beans.PropertyChangeSupport.fireIndexedPropertyChange(String, int, Object, Object)": {
        "args": [
            "String", 
            "int", 
            "Object", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.getLong(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.setZOrder(ComponentPeer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ComponentPeer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.FeatureDescriptor.getDisplayName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Array.getByte(Object, int)": {
        "args": [
            "Object", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ]
    }, 
    "java.net.Inet6Address.isMCSiteLocal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.StringTokenizer.hasMoreTokens()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.minusDays(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.beans.Introspector.flushCaches()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Handler.getEncoding()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractCollection.retainAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Calendar.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoPeriod.getUnits()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintStream.print(char[])": {
        "args": [
            "char[]"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.net.MulticastSocket.setInterface(InetAddress)": {
        "args": [
            "InetAddress"
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.util.DoubleSummaryStatistics.getMax()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.MemoryHandler.setPushLevel(Level)": {
        "args": [
            "Level"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.security.PermissionCollection.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.UID.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Encoder.setExceptionListener(ExceptionListener)": {
        "args": [
            "ExceptionListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedHashMap.getOrDefault(Object, V)": {
        "args": [
            "Object", 
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Struct.getSQLTypeName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.reflect.Constructor.isSynthetic()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Process.destroy()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.setAll(int[], IntUnaryOperator)": {
        "args": [
            "int[]", 
            "IntUnaryOperator"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Window.createBufferStrategy(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.function.IntConsumer.andThen(IntConsumer)": {
        "args": [
            "IntConsumer"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.add(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Principal.hashCode()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StringWriter.write(String, int, int)": {
        "args": [
            "String", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.InetAddress.isLoopbackAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getBlob(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.Kernel.getXOrigin()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SocketChannel.write(ByteBuffer[])": {
        "args": [
            "ByteBuffer[]"
        ], 
        "@throws": [
            "NotYetConnectedException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.file.SecureDirectoryStream.newByteChannel(T, Set, FileAttribute[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "Set", 
            "FileAttribute[]"
        ], 
        "@throws": [
            "ClosedDirectoryStreamException", 
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "FileAlreadyExistsException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Character.isUnicodeIdentifierStart(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getMaxStatements()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.acl.AclEntry.removePermission(Permission)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Permission"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.getCreationDate(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "KeyStoreException"
        ], 
        "throws": [
            "KeyStoreException"
        ]
    }, 
    "java.lang.Short.shortValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SignedObject.verify(PublicKey, Signature)": {
        "args": [
            "PublicKey", 
            "Signature"
        ], 
        "@throws": [
            "SignatureException", 
            "InvalidKeyException"
        ], 
        "throws": [
            "InvalidKeyException", 
            "SignatureException"
        ]
    }, 
    "java.time.LocalTime.toSecondOfDay()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.map(IntUnaryOperator)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "IntUnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.PixelGrabber.setPixels(int, int, int, int, ColorModel, byte[], int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "ColorModel", 
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TrayIcon.removeMouseMotionListener(MouseMotionListener)": {
        "args": [
            "MouseMotionListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setTime(String, Time)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Time"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Window.getInputContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.executeLargeBatch()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLTimeoutException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.BlockingDeque.contains(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.FileOutputStream.write(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.BlockingQueue.remove(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.hashCode(float[])": {
        "args": [
            "float[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.nextInt(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "InputMismatchException", 
            "NoSuchElementException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.getChronology()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setBinaryStream(String, InputStream, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "InputStream", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.Point2D.setLocation(Point2D)": {
        "args": [
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeMap.pollFirstEntry()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.collect(Supplier, ObjDoubleConsumer, BiConsumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Supplier", 
            "ObjDoubleConsumer", 
            "BiConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.min(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.SimpleFileVisitor.postVisitDirectory(T, IOException)": {
        "args": [
            "T", 
            "IOException"
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.ZoneOffset.ofTotalSeconds(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.Window.setBounds(Rectangle)": {
        "args": [
            "Rectangle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterators.emptyLongSpliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Clob.length()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.temporal.TemporalQueries.offset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.spi.AsynchronousChannelProvider.openAsynchronousChannelGroup(int, ThreadFactory)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "ThreadFactory"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.CompletionStage.acceptEither(CompletionStage, Consumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CompletionStage", 
            "Consumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.setSubject(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.OffsetDateTime.now(Clock)": {
        "args": [
            "Clock"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.round(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Point.setLocation(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ImageConsumer.setColorModel(ColorModel)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ColorModel"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MediaTracker.getErrorsID(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedTransferQueue.peek()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ParameterMetaData.getParameterMode(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.SinglePixelPackedSampleModel.setPixel(int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509Certificate.getExtendedKeyUsage()": {
        "args": [
            ""
        ], 
        "@throws": [
            "CertificateParsingException"
        ], 
        "throws": [
            "CertificateParsingException"
        ]
    }, 
    "java.text.NumberFormat.getIntegerInstance(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.forEachOrdered(IntConsumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "IntConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.floor(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.isVisible()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImageOp.createScaledRendering(int, int, RenderingHints)": {
        "args": [
            "int", 
            "int", 
            "RenderingHints"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Arc2D.setArcByTangent(Point2D, Point2D, Point2D, double)": {
        "args": [
            "Point2D", 
            "Point2D", 
            "Point2D", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Arc2D.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.SimpleBeanInfo.getIcon(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPaneAdjustable.setValueIsAdjusting(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.reduceEntriesToDouble(long, ToDoubleFunction, double, DoubleBinaryOperator)": {
        "args": [
            "long", 
            "ToDoubleFunction", 
            "double", 
            "DoubleBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getCatalogTerm()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.stream.Collectors.toSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.whenComplete(BiConsumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BiConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.MonthDay.getDayOfMonth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.RuntimeMXBean.getUptime()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.createBCSChild(Object, Object)": {
        "args": [
            "Object", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeSet.tailSet(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.stream(T[])": {
        "args": [
            "T[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocketImpl.setTimeToLive(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.stream.LongStream.iterate(long, LongUnaryOperator)": {
        "args": [
            "long", 
            "LongUnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics2D.drawGlyphVector(GlyphVector, float, float)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "GlyphVector", 
            "float", 
            "float"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.text.StringCharacterIterator.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.atDate(LocalDate)": {
        "args": [
            "LocalDate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.isSerializing()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextArea.getMinimumSize(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FontMetrics.charsWidth(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.security.Provider.removeService(Service)": {
        "args": [
            "Service"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.net.HttpCookie.getDiscard()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.setQueryTimeout(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.AWTEvent.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.peer.DropTargetContextPeer.isTransferableJVMLocal()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.Console.writer()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferFloat.getElemDouble(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.setToRotation(double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Executable.getDeclaringClass()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormatSymbols.getAvailableLocales()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.intersectsLine(Line2D)": {
        "args": [
            "Line2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorConvertOp.getBounds2D(BufferedImage)": {
        "args": [
            "BufferedImage"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.removeMouseWheelListener(MouseWheelListener)": {
        "args": [
            "MouseWheelListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.LongStream.mapToObj(LongFunction)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "LongFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextField.addActionListener(ActionListener)": {
        "args": [
            "ActionListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.FileStore.type()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkExec(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandleInfo.toString(int, Class, String, MethodType)": {
        "args": [
            "int", 
            "Class", 
            "String", 
            "MethodType"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.charset.Charset.newEncoder()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.net.URL.getContent()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.text.DecimalFormat.getNegativePrefix()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Key.getAlgorithm()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Adjustable.getUnitIncrement()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.intersects(PathIterator, double, double, double, double)": {
        "args": [
            "PathIterator", 
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.getReadHoldCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkListen(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.MinguoChronology.isLeapYear(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneOffsetTransition.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.paint(Graphics)": {
        "args": [
            "Graphics"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahChronology.getId()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLXML.setResult(Class)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Class"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.channels.MembershipKey.block(InetAddress)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "InetAddress"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalStateException", 
            "UnsupportedOperationException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.ScrollPane.processMouseWheelEvent(MouseWheelEvent)": {
        "args": [
            "MouseWheelEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TrayIcon.displayMessage(String, String, MessageType)": {
        "args": [
            "String", 
            "String", 
            "MessageType"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.putDouble(String, double)": {
        "args": [
            "String", 
            "double"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.getMonthValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectStreamField.compareTo(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.getCalendarType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.from(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.io.FilterReader.skip(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.CallableStatement.getNClob(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.beans.PropertyEditorManager.getEditorSearchPath()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.getShearX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationDesc.getRestartMode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.IdentityHashMap.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Dialog.getAccessibleContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AllPermission.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.format(DateTimeFormatter)": {
        "args": [
            "DateTimeFormatter"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.FileLock.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.allowsMultipleSelections()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.range(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.net.HttpURLConnection.getPermission()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.MenuComponent.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GridBagLayout.preferredLayoutSize(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.ServerSocket.implAccept(Socket)": {
        "args": [
            "Socket"
        ], 
        "@throws": [
            "IllegalBlockingModeException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.format.DateTimeFormatter.getZone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collectors.toConcurrentMap(Function, Function, BinaryOperator)": {
        "args": [
            "Function", 
            "Function", 
            "BinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.WritableRenderedImage.getWritableTile(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getClientInfoProperties()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.chrono.ChronoLocalDateTime.hashCode()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.DayOfWeek.getDisplayName(TextStyle, Locale)": {
        "args": [
            "TextStyle", 
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkCreateClassLoader()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.flatMap(DoubleFunction)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DoubleFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.setDecimalSeparatorAlwaysShown(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.asShortBuffer()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.writeFloat(float)": {
        "args": [
            "float"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.MonthDay.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getMouseListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.PropertyPermission.newPermissionCollection()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Ref.getObject()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.CallableStatement.getArray(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.beans.VetoableChangeListenerProxy.getPropertyName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.BasicStroke.getLineJoin()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.toArray(T[])": {
        "args": [
            "T[]"
        ], 
        "@throws": [
            "ArrayStoreException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.KeyPairGenerator.getAlgorithm()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CharsetEncoder.implReplaceWith(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyEditorSupport.firePropertyChange()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.deltaTransform(double[], int, double[], int, int)": {
        "args": [
            "double[]", 
            "int", 
            "double[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.unreflect(Method)": {
        "args": [
            "Method"
        ], 
        "@throws": [
            "IllegalAccessException", 
            "NullPointerException"
        ], 
        "throws": [
            "IllegalAccessException"
        ]
    }, 
    "java.security.KeyPairGeneratorSpi.initialize(AlgorithmParameterSpec, SecureRandom)": {
        "args": [
            "AlgorithmParameterSpec", 
            "SecureRandom"
        ], 
        "@throws": [
            "InvalidAlgorithmParameterException"
        ], 
        "throws": [
            "InvalidAlgorithmParameterException"
        ]
    }, 
    "java.lang.Thread.resume()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.Calendar.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MutableCallSite.getTarget()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.AccessMode.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferFloat.setElem(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StreamTokenizer.ordinaryChar(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.GregorianCalendar.getActualMinimum(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getSelectedIndexes()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.getCurrentPoint()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLDecoder.decode(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.annotation.Annotation.equals(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SimpleTimeZone.observesDaylightTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistChronology.dateNow(Clock)": {
        "args": [
            "Clock"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Deflater.reset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeMap.descendingKeySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRLSelector.setIssuerNames(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.prefs.AbstractPreferences.getFloat(String, float)": {
        "args": [
            "String", 
            "float"
        ], 
        "@throws": [
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.AlgorithmParameters.getInstance(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NoSuchAlgorithmException"
        ], 
        "throws": [
            "NoSuchAlgorithmException"
        ]
    }, 
    "java.time.chrono.ChronoLocalDateTime.toEpochSecond(ZoneOffset)": {
        "args": [
            "ZoneOffset"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.allocateDirect(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.KeyStore.setKeyEntry(String, byte[], Certificate[])": {
        "args": [
            "String", 
            "byte[]", 
            "Certificate[]"
        ], 
        "@throws": [
            "KeyStoreException"
        ], 
        "throws": [
            "KeyStoreException"
        ]
    }, 
    "java.time.LocalDateTime.getSecond()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.spi.DecimalFormatSymbolsProvider.getInstance(Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.text.NumberFormat.setMinimumFractionDigits(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerArray.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Set.addAll(Collection)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.io.DataOutput.write(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.File.delete()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDate.atTime(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.im.InputMethodRequests.getCommittedText(int, int, Attribute[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "Attribute[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.getTranslateY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.parallelSetAll(T[], IntFunction)": {
        "args": [
            "T[]", 
            "IntFunction"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.text.DateFormatSymbols.setLocalPatternChars(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Byte.shortValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ScheduledThreadPoolExecutor.submit(Runnable)": {
        "args": [
            "Runnable"
        ], 
        "@throws": [
            "RejectedExecutionException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.getComponentListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.curveTo(float, float, float, float, float, float)": {
        "args": [
            "float", 
            "float", 
            "float", 
            "float", 
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.getLocationOnScreen()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.getScript()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TimeZone.setRawOffset(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicReference.set(V)": {
        "args": [
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationGroupDesc.getCommandEnvironment()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateNCharacterStream(String, Reader)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Reader"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.PushbackInputStream.read(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.IdentityScope.getIdentity(PublicKey)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "PublicKey"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsDevice.getDisplayModes()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.NumericShaper.getRanges()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CoderResult.throwException()": {
        "args": [
            ""
        ], 
        "@throws": [
            "BufferUnderflowException", 
            "BufferOverflowException", 
            "MalformedInputException", 
            "UnmappableCharacterException"
        ], 
        "throws": [
            "CharacterCodingException"
        ]
    }, 
    "java.sql.ResultSetMetaData.getColumnName(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.HttpURLConnection.getHeaderFieldKey(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLException.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Color.createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints)": {
        "args": [
            "ColorModel", 
            "Rectangle", 
            "Rectangle2D", 
            "AffineTransform", 
            "RenderingHints"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoDate.getLong(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.Pattern.matcher(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.toFormatter(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.itemStateChanged(ItemEvent)": {
        "args": [
            "ItemEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.add(K)": {
        "args": [
            "K"
        ], 
        "@throws": [
            "NullPointerException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Parameter.getAnnotation(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.File.setWritable(boolean, boolean)": {
        "args": [
            "boolean", 
            "boolean"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.nio.file.attribute.AclEntry.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Checkbox.getState()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneRules.isDaylightSavings(Instant)": {
        "args": [
            "Instant"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.filter(IntPredicate)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "IntPredicate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.setInternationalCurrencySymbol(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStoreSpi.engineGetCertificate(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.getYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Format.parseObject(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "ParseException"
        ], 
        "throws": [
            "ParseException"
        ]
    }, 
    "java.time.ZonedDateTime.withLaterOffsetAtOverlap()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseChronology.resolveDate(Map, ResolverStyle)": {
        "args": [
            "Map", 
            "ResolverStyle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics2D.getPaint()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.RoundRectangle2D.getHeight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.SerializedLambda.getInstantiatedMethodType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.PageAttributes.getColor()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.parseUnresolved(CharSequence, ParsePosition)": {
        "args": [
            "CharSequence", 
            "ParsePosition"
        ], 
        "@throws": [
            "DateTimeException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.time.Month.range(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.lang.Character.isSurrogate(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.PixelGrabber.getPixels()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.nextBigDecimal()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InputMismatchException", 
            "NoSuchElementException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.security.Permission.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Semaphore.hasQueuedThreads()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServices.addService(Class, BeanContextServiceProvider)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Class", 
            "BeanContextServiceProvider"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationGroupDesc.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.Charset.forName(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalCharsetNameException", 
            "IllegalArgumentException", 
            "UnsupportedCharsetException"
        ], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.now(Clock)": {
        "args": [
            "Clock"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipEntry.setLastModifiedTime(FileTime)": {
        "args": [
            "FileTime"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.StrictMath.addExact(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.ResourceBundle.getString(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "MissingResourceException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.beans.PropertyChangeSupport.firePropertyChange(String, int, int)": {
        "args": [
            "String", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.TextStyle.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CheckboxGroup.getCurrent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.log(Level, String)": {
        "args": [
            "Level", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.DefaultKeyboardFocusManager.downFocusCycle(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.logp(Level, String, String, String, Throwable)": {
        "args": [
            "Level", 
            "String", 
            "String", 
            "String", 
            "Throwable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.PrivilegedExceptionAction.run()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "Exception"
        ], 
        "throws": [
            "Exception"
        ]
    }, 
    "java.nio.channels.FileChannel.write(ByteBuffer, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer", 
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NonWritableChannelException", 
            "ClosedChannelException", 
            "AsynchronousCloseException", 
            "ClosedByInterruptException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.DigestOutputStream.getMessageDigest()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Color.HSBtoRGB(float, float, float)": {
        "args": [
            "float", 
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getArray(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Objects.nonNull(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Modifier.methodModifiers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.setSubjectPublicKey(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.URL.getContent(Class[])": {
        "args": [
            "Class[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.HashMap.replace(K, V, V)": {
        "args": [
            "K", 
            "V", 
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.sort(float[], int, int)": {
        "args": [
            "float[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.image.BufferStrategy.contentsRestored()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.PriorityQueue.offer(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.TextFieldPeer.getPreferredSize(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.RecursiveTask.getRawResult()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataOutputStream.writeUTF(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.WeakHashMap.keySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.closeOnCompletion()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.InetAddress.isReachable(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.Socket.setReuseAddress(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.nio.ByteBuffer.get()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "BufferUnderflowException"
        ], 
        "throws": []
    }, 
    "java.time.Period.getDays()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Period.plusMonths(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceContext.getSourceActions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.RectangularShape.contains(Rectangle2D)": {
        "args": [
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderContext.concatenateTransform(AffineTransform)": {
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.getWriteHoldCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.ChronoField.range()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.ChronoUnit.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.ensureCapacity(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImageProducer.run()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ref.Reference.get()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.FieldPosition.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.nullsAreSortedLow()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.zip.ZipInputStream.available()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.stream.LongStream.of(long[])": {
        "args": [
            "long[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Date.valueOf(LocalDate)": {
        "args": [
            "LocalDate"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Field.getDouble(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "IllegalAccessException", 
            "IllegalArgumentException", 
            "NullPointerException", 
            "ExceptionInInitializerError"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "IllegalAccessException"
        ]
    }, 
    "java.awt.print.PrinterJob.setCopies(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.IndexedPropertyDescriptor.getIndexedReadMethod()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.vetoableChange(PropertyChangeEvent)": {
        "args": [
            "PropertyChangeEvent"
        ], 
        "@throws": [], 
        "throws": [
            "PropertyVetoException"
        ]
    }, 
    "java.rmi.activation.ActivationDesc.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.deleteCharAt(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.nio.charset.CharsetEncoder.isLegalReplacement(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.FormatStyle.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormatSymbols.getZoneStrings()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RMIClientSocketFactory.createSocket(String, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.DatagramSocket.setReuseAddress(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.util.Arrays.parallelSort(T[])": {
        "args": [
            "T[]"
        ], 
        "@throws": [
            "ClassCastException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.image.SinglePixelPackedSampleModel.setPixels(int, int, int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.distinct()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.color.ColorSpace.getMaxValue(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.TextComponent.setSelectionEnd(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.FocusAdapter.focusLost(FocusEvent)": {
        "args": [
            "FocusEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.RobotPeer.keyRelease(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.WindowEvent.getOppositeWindow()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.RectangularShape.setFrameFromDiagonal(Point2D, Point2D)": {
        "args": [
            "Point2D", 
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.createImage(byte[], int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.System.runFinalizersOnExit(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.PriorityBlockingQueue.poll(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.concurrent.locks.ReentrantLock.hasWaiters(Condition)": {
        "args": [
            "Condition"
        ], 
        "@throws": [
            "IllegalMonitorStateException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.processMouseEvent(MouseEvent)": {
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.ptSegDist(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.getPixels(int, int, int, int, float[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "float[]", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.OptionalLong.orElseThrow(Supplier)": {
        "args": [
            "Supplier"
        ], 
        "@throws": [
            "X", 
            "NullPointerException"
        ], 
        "throws": [
            "Throwable"
        ]
    }, 
    "java.awt.geom.Line2D.linesIntersect(double, double, double, double, double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.processActionEvent(ActionEvent)": {
        "args": [
            "ActionEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.PrivilegedActionException.getCause()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Byte.doubleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getLocation()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.lowerEntry(K)": {
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.TrayIcon.removeMouseListener(MouseListener)": {
        "args": [
            "MouseListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandle.invoke(Object[])": {
        "args": [
            "Object[]"
        ], 
        "@throws": [
            "WrongMethodTypeException", 
            "ClassCastException", 
            "Throwable"
        ], 
        "throws": [
            "Throwable"
        ]
    }, 
    "java.lang.Integer.reverse(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeMap.entrySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoChronology.dateNow()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.handleAsync(BiFunction, Executor)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BiFunction", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalField.rangeRefinedBy(TemporalAccessor)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.text.SimpleDateFormat.applyLocalizedPattern(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.BorderLayout.maximumLayoutSize(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Inet6Address.isMCNodeLocal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.MouseDragGestureRecognizer.mouseDragged(MouseEvent)": {
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.getClassContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.defaultWriteObject()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Random.nextInt(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.CharBuffer.duplicate()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.DirectoryStream.accept(T)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.RenderingHints.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SinglePixelPackedSampleModel.getNumDataElements()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collectors.summingDouble(ToDoubleFunction)": {
        "args": [
            "ToDoubleFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.getOwnedWindows()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Stream.collect(Supplier, BiConsumer, BiConsumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Supplier", 
            "BiConsumer", 
            "BiConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.SocketImpl.getOutputStream()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.MenuItem.setActionCommand(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateLong(String, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Font.getTransform()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.setKeyEntry(String, Key, char[], Certificate[])": {
        "args": [
            "String", 
            "Key", 
            "char[]", 
            "Certificate[]"
        ], 
        "@throws": [
            "KeyStoreException"
        ], 
        "throws": [
            "KeyStoreException"
        ]
    }, 
    "java.io.PushbackReader.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.BorderLayout.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistDate.of(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.lang.Class.getModifiers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Hashtable.rehash()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.registry.Registry.rebind(String, Remote)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Remote"
        ], 
        "@throws": [
            "RemoteException", 
            "AccessException", 
            "NullPointerException"
        ], 
        "throws": [
            "RemoteException", 
            "AccessException"
        ]
    }, 
    "java.lang.reflect.Modifier.interfaceModifiers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.get(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.FutureTask.isCancelled()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Proxy.getInvocationHandler(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "SecurityException"
        ], 
        "throws": [
            "IllegalArgumentException"
        ]
    }, 
    "java.lang.reflect.Method.getDeclaredAnnotations()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.WritableRaster.setPixel(int, int, int[])": {
        "args": [
            "int", 
            "int", 
            "int[]"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.rmi.server.RMIClassLoader.getSecurityContext(ClassLoader)": {
        "args": [
            "ClassLoader"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.get(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.TrayIcon.setImage(Image)": {
        "args": [
            "Image"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.StampedLock.asReadWriteLock()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.ImageGraphicAttribute.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Panel.addNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.stream(int[], int, int)": {
        "args": [
            "int[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.componentHidden(ComponentEvent)": {
        "args": [
            "ComponentEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RMIClassLoader.getClassLoader(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "MalformedURLException", 
            "SecurityException"
        ], 
        "throws": [
            "MalformedURLException", 
            "SecurityException"
        ]
    }, 
    "java.util.logging.Level.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.EllipticCurve.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquire(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalMonitorStateException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.CardLayout.addLayoutComponent(String, Component)": {
        "args": [
            "String", 
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentColorModel.getDataElements(int[], int, Object)": {
        "args": [
            "int[]", 
            "int", 
            "Object"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ClassCastException", 
            "ArrayIndexOutOfBoundsException", 
            "IllegalArgumentException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateBlob(int, InputStream, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "InputStream", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.file.Path.compareTo(Path)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Path"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.security.UnresolvedPermission.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getItemListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.Naming.unbind(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NotBoundException", 
            "MalformedURLException", 
            "RemoteException", 
            "AccessException"
        ], 
        "throws": [
            "RemoteException", 
            "NotBoundException", 
            "MalformedURLException"
        ]
    }, 
    "java.net.URL.openConnection()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.BandedSampleModel.setSample(int, int, int, int, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.getOwner()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DirectColorModel.getAlpha(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CountedCompleter.propagateCompletion()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SecureRandomSpi.engineSetSeed(byte[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.removeAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.text.Format.formatToCharacterIterator(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.text.ChoiceFormat.previousDouble(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.getQueueLength()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.PrimitiveIterator.forEachRemaining(T_CONS)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T_CONS"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.terminated()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.WritableRaster.setPixels(int, int, int, int, float[])": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "float[]"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.getKeyUsage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayList.spliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Checkbox.getCurrentAccessibleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509Certificate.getIssuerUniqueID()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getDefaultTransactionIsolation()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.ColorConvertOp.createCompatibleDestRaster(Raster)": {
        "args": [
            "Raster"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.DoubleBuffer.compareTo(DoubleBuffer)": {
        "args": [
            "DoubleBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.hierarchyChanged(HierarchyEvent)": {
        "args": [
            "HierarchyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.BreakIterator.following(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.font.LineMetrics.getBaselineOffsets()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.add(WindowListener, WindowListener)": {
        "args": [
            "WindowListener", 
            "WindowListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.LongStream.forEach(LongConsumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "LongConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.setReadOnly(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.AWTEventMulticaster.add(ContainerListener, ContainerListener)": {
        "args": [
            "ContainerListener", 
            "ContainerListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Constructor.toGenericString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLong.decrementAndGet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GradientPaint.isCyclic()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Field.getByte(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "IllegalAccessException", 
            "IllegalArgumentException", 
            "NullPointerException", 
            "ExceptionInInitializerError"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "IllegalAccessException"
        ]
    }, 
    "java.util.concurrent.ScheduledThreadPoolExecutor.getQueue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.Chronology.hashCode()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.isSupported(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getSearchStringEscape()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Component.getInputMethodRequests()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsStatementPooling()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.DataBufferDouble.setElemDouble(int, int, double)": {
        "args": [
            "int", 
            "int", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImageFilter.setPixels(int, int, int, int, ColorModel, byte[], int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "ColorModel", 
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.Period.multipliedBy(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.io.DataInputStream.readLine()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.charset.CharsetEncoder.flush(ByteBuffer)": {
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.TimeUnit.toNanos(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Parameter.getDeclaringExecutable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateNClob(String, Reader)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Reader"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.dnd.DropTargetDragEvent.isDataFlavorSupported(DataFlavor)": {
        "args": [
            "DataFlavor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Dialog.addNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.runAfterEitherAsync(CompletionStage, Runnable)": {
        "args": [
            "CompletionStage", 
            "Runnable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicReference.accumulateAndGet(V, BinaryOperator)": {
        "args": [
            "V", 
            "BinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PipedOutputStream.flush()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.beans.SimpleBeanInfo.getDefaultPropertyIndex()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.getAccessibleAt(Point)": {
        "args": [
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.HttpCookie.setCommentURL(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.adjustInto(Temporal)": {
        "args": [
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.getPrimaryType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterator.tryAdvance(LongConsumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "LongConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DriverAction.deregister()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.LockInfo.getIdentityHashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Deque.offer(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Window.addWindowListener(WindowListener)": {
        "args": [
            "WindowListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.offerLast(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.SerializedLambda.getImplMethodName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BandCombineOp.getMatrix()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.CallSite.type()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.GuardedObject.getObject()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.net.Socket.setOOBInline(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.awt.Window.getFocusableWindowState()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Constructor.isVarArgs()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MediaTracker.checkID(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.registry.RegistryHandler.registryImpl(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "RemoteException"
        ], 
        "throws": [
            "RemoteException"
        ]
    }, 
    "java.time.chrono.Chronology.getDisplayName(TextStyle, Locale)": {
        "args": [
            "TextStyle", 
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PipedReader.read()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.getQueuedThreads()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.CharArrayReader.close()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Field.getDeclaredAnnotations()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.append(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.HttpCookie.parse(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.zip.CheckedInputStream.getChecksum()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.log10(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.findWithinHorizon(Pattern, int)": {
        "args": [
            "Pattern", 
            "int"
        ], 
        "@throws": [
            "IllegalStateException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.LinkedList.set(int, E)": {
        "args": [
            "int", 
            "E"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.nio.file.Files.newBufferedWriter(Path, OpenOption[])": {
        "args": [
            "Path", 
            "OpenOption[]"
        ], 
        "@throws": [
            "IOException", 
            "UnsupportedOperationException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.CropImageFilter.setDimensions(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.filterTags(List, Collection, FilteringMode)": {
        "args": [
            "List", 
            "Collection", 
            "FilteringMode"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.YearMonth.atDay(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.putInt(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.util.stream.IntStream.sorted()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.toArray(T[])": {
        "args": [
            "T[]"
        ], 
        "@throws": [
            "ArrayStoreException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantLock.isFair()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedQueue.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferStrategy.show()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.CharArrayWriter.append(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.getCertificate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentMap.remove(Object, Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object", 
            "Object"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Ellipse2D.setFrame(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Object.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.setNameConstraints(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.comparator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayList.get(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.nodeExists(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "BackingStoreException", 
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": [
            "BackingStoreException"
        ]
    }, 
    "java.rmi.RemoteException.getCause()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ResourceBundle.getStringArray(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "MissingResourceException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.lang.Double.floatValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.PasswordAuthentication.getPassword()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.InputContext.getInstance()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.deriveFont(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsUnion()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.List.getSelectedObjects()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteOrder.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.LongBuffer.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.MultiPixelPackedSampleModel.createDataBuffer()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLOutput.writeDouble(double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.chrono.HijrahEra.getValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.MenuItemPeer.setLabel(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramPacket.setLength(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.in(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.event.WindowFocusListener.windowLostFocus(WindowEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Optional.map(Function)": {
        "args": [
            "Function"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDate.getMonth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getBigDecimal(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.rmi.server.LogStream.write(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.CharacterIterator.getIndex()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RemoteServer.setLog(OutputStream)": {
        "args": [
            "OutputStream"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.checkImage(Image, ImageObserver)": {
        "args": [
            "Image", 
            "ImageObserver"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRL.getSigAlgOID()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.addBatch()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.jar.JarInputStream.read(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException", 
            "ZipException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Arrays.parallelSort(long[])": {
        "args": [
            "long[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeSet.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.GridBagLayout.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.DoubleBuffer.put(double[], int, int)": {
        "args": [
            "double[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "IndexOutOfBoundsException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.IsoChronology.period(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.quadrantRotate(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.minusHours(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.fill(int[], int, int, int)": {
        "args": [
            "int[]", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.io.FilterWriter.flush()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.Year.compareTo(Year)": {
        "args": [
            "Year"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TrayIcon.setImageAutoSize(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.InputContext.reconvert()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.security.KeyStore.deleteEntry(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "KeyStoreException"
        ], 
        "throws": [
            "KeyStoreException"
        ]
    }, 
    "java.time.chrono.ChronoLocalDateTime.isSupported(TemporalField)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RGBImageFilter.setColorModel(ColorModel)": {
        "args": [
            "ColorModel"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicStampedReference.attemptStamp(V, int)": {
        "args": [
            "V", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTarget.dragExit(DropTargetEvent)": {
        "args": [
            "DropTargetEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.reinitialize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.othersInsertsAreVisible(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.function.DoubleConsumer.accept(double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Set.toArray()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.minusHours(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.getFD()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.CopyOnWriteArraySet.spliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StreamTokenizer.whitespaceChars(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.mouseClicked(MouseEvent)": {
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ProcessBuilder.to(File)": {
        "args": [
            "File"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Process.waitFor(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException", 
            "NullPointerException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.time.ZoneOffset.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getBestRowIdentifier(String, String, String, int, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String", 
            "String", 
            "int", 
            "boolean"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.Statement.getWarnings()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.ResultSetMetaData.getColumnType(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.reflect.AnnotatedElement.getAnnotationsByType(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.Signature.sign(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "SignatureException"
        ], 
        "throws": [
            "SignatureException"
        ]
    }, 
    "java.util.List.sort(Comparator)": {
        "args": [
            "Comparator"
        ], 
        "@throws": [
            "ClassCastException", 
            "UnsupportedOperationException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.function.ToDoubleBiFunction.applyAsDouble(T, U)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "U"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousSocketChannel.setOption(SocketOption, T)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "SocketOption", 
            "T"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.peer.WindowPeer.updateAlwaysOnTopState()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingQueue.poll()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.NavigableMap.subMap(K, K)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K", 
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.Period.ofMonths(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.rotateRight(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.OptionalLong.of(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.DoubleSummaryStatistics.combine(DoubleSummaryStatistics)": {
        "args": [
            "DoubleSummaryStatistics"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationGroup.activeObject(ActivationID, Remote)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ActivationID", 
            "Remote"
        ], 
        "@throws": [
            "UnknownObjectException", 
            "RemoteException", 
            "ActivationException"
        ], 
        "throws": [
            "ActivationException", 
            "UnknownObjectException", 
            "RemoteException"
        ]
    }, 
    "java.lang.ThreadGroup.destroy()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalThreadStateException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.OptionalDouble.getAsDouble()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.FramePeer.getBoundsPrivate()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.SecondaryLoop.enter()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AlgorithmParametersSpi.engineInit(byte[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.URL.setURLStreamHandlerFactory(URLStreamHandlerFactory)": {
        "args": [
            "URLStreamHandlerFactory"
        ], 
        "@throws": [
            "Error", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.PointerInfo.getDevice()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.StampedLock.readLockInterruptibly()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.dnd.DragSourceContext.getTrigger()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeSet.descendingSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Throwable.getStackTrace()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.Pattern.split(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.DoubleConsumer.andThen(DoubleConsumer)": {
        "args": [
            "DoubleConsumer"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.applet.AppletContext.getStreamKeys()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.LogRecord.setThreadID(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getString(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.LinkedTransferQueue.tryTransfer(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.with(TemporalAdjuster)": {
        "args": [
            "TemporalAdjuster"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.MenuBar.getAccessibleRole()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.getFlatnessSq()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.getLocationOnScreen()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Semaphore.acquire()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.time.LocalDateTime.isSupported(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.SystemFlavorMap.getDefaultFlavorMap()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.setSubjectKeyIdentifier(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FileDialog.getFiles()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractCollection.addAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.sql.Timestamp.setTime(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.HashMap.entrySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.getResourceBundleName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getTime(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.stream.Stream.mapToInt(ToIntFunction)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ToIntFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Thread.holdsLock(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.RescaleOp.filter(BufferedImage, BufferedImage)": {
        "args": [
            "BufferedImage", 
            "BufferedImage"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Executable.getAnnotationsByType(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.Year.isBefore(Year)": {
        "args": [
            "Year"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.InetAddress.getAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.NodeChangeEvent.getParent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Double.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SignedObject.getObject()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException", 
            "ClassNotFoundException"
        ], 
        "throws": [
            "IOException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.util.List.listIterator(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.getSubjectKeyIdentifier()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.BufferedWriter.write(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.SQLXML.setString(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.peer.FileDialogPeer.setFile(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ExceptionInInitializerError.getCause()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SocketChannel.write(ByteBuffer[], int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NotYetConnectedException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.ObjectInputStream.readObjectOverride()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ClassNotFoundException", 
            "OptionalDataException", 
            "IOException"
        ], 
        "throws": [
            "IOException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.util.Spliterators.spliterator(Object[], int, int, int)": {
        "args": [
            "Object[]", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.writeChar(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.InputStreamReader.read()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Graphics.fillPolygon(Polygon)": {
        "args": [
            "Polygon"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.getFactory()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.max(Collection, Comparator)": {
        "args": [
            "Collection", 
            "Comparator"
        ], 
        "@throws": [
            "ClassCastException", 
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.getLast()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.io.FilterReader.read(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.ComponentOrientation.isLeftToRight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertificateFactory.generateCRL(InputStream)": {
        "args": [
            "InputStream"
        ], 
        "@throws": [
            "CRLException"
        ], 
        "throws": [
            "CRLException"
        ]
    }, 
    "java.sql.DatabaseMetaData.supportsExpressionsInOrderBy()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Math.max(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.ParameterizedType.getActualTypeArguments()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "TypeNotPresentException", 
            "MalformedParameterizedTypeException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.setFont(Font)": {
        "args": [
            "Font"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ManagementFactory.getPlatformMXBean(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Spliterators.emptyIntSpliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.subdivide(double[], int, double[], int, double[], int)": {
        "args": [
            "double[]", 
            "int", 
            "double[]", 
            "int", 
            "double[]", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.Buffer.isReadOnly()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Class.getResource(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.sendUrgentData(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.channels.AsynchronousServerSocketChannel.accept(A, CompletionHandler)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "A", 
            "CompletionHandler"
        ], 
        "@throws": [
            "AcceptPendingException", 
            "NotYetBoundException", 
            "ShutdownChannelGroupException"
        ], 
        "throws": []
    }, 
    "java.awt.MenuItem.setLabel(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Collator.getInstance()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.classDepth(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsCatalogsInPrivilegeDefinitions()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.logging.Handler.setLevel(Level)": {
        "args": [
            "Level"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndIncrement(T)": {
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintStream.append(CharSequence, int, int)": {
        "args": [
            "CharSequence", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceAdapter.dragOver(DragSourceDragEvent)": {
        "args": [
            "DragSourceDragEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Time.getDate()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.io.ByteArrayOutputStream.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseWheelListener.mouseWheelMoved(MouseWheelEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "MouseWheelEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.getVariant()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.concat(DoubleStream, DoubleStream)": {
        "args": [
            "DoubleStream", 
            "DoubleStream"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocketImpl.leave(InetAddress)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "InetAddress"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.BufferedImage.getHeight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.canDisplay(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.acceptEitherAsync(CompletionStage, Consumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CompletionStage", 
            "Consumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterator.estimateSize()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.arrayElementSetter(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IllegalArgumentException"
        ]
    }, 
    "java.sql.SQLOutput.writeLong(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.Inet4Address.isMCLinkLocal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Hashtable.getOrDefault(Object, V)": {
        "args": [
            "Object", 
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.spi.FileSystemProvider.readSymbolicLink(Path)": {
        "args": [
            "Path"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "NotLinkException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Window.isOpaque()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.updateAndGet(T, UnaryOperator)": {
        "args": [
            "T", 
            "UnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getEnclosingClass()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.awt.List.add(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PushbackInputStream.reset()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.ComponentColorModel.getNormalizedComponents(Object, float[], int)": {
        "args": [
            "Object", 
            "float[]", 
            "int"
        ], 
        "@throws": [
            "ClassCastException", 
            "ArrayIndexOutOfBoundsException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.stream.Collectors.summingInt(ToIntFunction)": {
        "args": [
            "ToIntFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.getPixel(int, int, int[])": {
        "args": [
            "int", 
            "int", 
            "int[]"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.net.URLConnection.getDoOutput()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.permuteArguments(MethodHandle, MethodType, int[])": {
        "args": [
            "MethodHandle", 
            "MethodType", 
            "int[]"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.CheckboxMenuItem.getState()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDate.isEqual(ChronoLocalDate)": {
        "args": [
            "ChronoLocalDate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.StreamSupport.stream(Supplier, int, boolean)": {
        "args": [
            "Supplier", 
            "int", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahChronology.dateNow(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.OptionalLong.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Provider.getClassName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.createRaster(SampleModel, DataBuffer, Point)": {
        "args": [
            "SampleModel", 
            "DataBuffer", 
            "Point"
        ], 
        "@throws": [
            "RasterFormatException", 
            "RasterFormatException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.RenderingHints.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ResourceBundle.getNoFallbackControl(List)": {
        "args": [
            "List"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.HashSet.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Package.getSpecificationVersion()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GradientPaint.createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints)": {
        "args": [
            "ColorModel", 
            "Rectangle", 
            "Rectangle2D", 
            "AffineTransform", 
            "RenderingHints"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getMaxColumnsInGroupBy()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.LinkedBlockingDeque.offerLast(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.reduceValues(long, Function, BiFunction)": {
        "args": [
            "long", 
            "Function", 
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseEvent.getYOnScreen()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ParameterMetaData.getParameterClassName(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.reflect.Array.getChar(Object, int)": {
        "args": [
            "Object", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ]
    }, 
    "java.time.chrono.JapaneseDate.of(JapaneseEra, int, int, int)": {
        "args": [
            "JapaneseEra", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.Choice.getItemCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.adapt(Runnable)": {
        "args": [
            "Runnable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.nextUp(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.DoubleBuffer.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Arc2D.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalQueries.chronology()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.getTransparency()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.keys()": {
        "args": [
            ""
        ], 
        "@throws": [
            "BackingStoreException", 
            "IllegalStateException"
        ], 
        "throws": [
            "BackingStoreException"
        ]
    }, 
    "java.util.NavigableMap.higherKey(K)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.put(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.security.cert.Certificate.verify(PublicKey, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "PublicKey", 
            "String"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "InvalidKeyException", 
            "NoSuchProviderException", 
            "SignatureException", 
            "CertificateException"
        ], 
        "throws": [
            "CertificateException", 
            "NoSuchAlgorithmException", 
            "InvalidKeyException", 
            "NoSuchProviderException", 
            "SignatureException"
        ]
    }, 
    "java.util.function.Predicate.and(Predicate)": {
        "args": [
            "Predicate"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Character.compareTo(Character)": {
        "args": [
            "Character"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DecimalStyle.getAvailableLocales()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Inet4Address.getAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.nextDown(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SignatureSpi.engineInitVerify(PublicKey)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "PublicKey"
        ], 
        "@throws": [
            "InvalidKeyException"
        ], 
        "throws": [
            "InvalidKeyException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicInteger.set(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.HttpURLConnection.getErrorStream()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragGestureRecognizer.getSourceActions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.managedBlock(ManagedBlocker)": {
        "args": [
            "ManagedBlocker"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.event.KeyEvent.setKeyChar(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.setType(Type)": {
        "args": [
            "Type"
        ], 
        "@throws": [
            "IllegalComponentStateException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.net.URLConnection.setUseCaches(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDateTime.toLocalDate()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getBoolean(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Map.keySet()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.getHour()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadMXBean.getThreadCpuTime(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.io.StreamTokenizer.resetSyntax()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SinglePixelPackedSampleModel.getDataElements(int, int, Object, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "Object", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.write(Path, Iterable, Charset, OpenOption[])": {
        "args": [
            "Path", 
            "Iterable", 
            "Charset", 
            "OpenOption[]"
        ], 
        "@throws": [
            "IOException", 
            "UnsupportedOperationException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.releaseService(BeanContextChild, Object, Object)": {
        "args": [
            "BeanContextChild", 
            "Object", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.getClientInfo()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.PrintWriter.write(String, int, int)": {
        "args": [
            "String", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyEditorSupport.getSource()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.lazilyLoadDesktopProperty(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.divideAndRemainder(BigInteger)": {
        "args": [
            "BigInteger"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.Event.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.getTimeInMillis()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.canDetermineObscurity()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.ParsePosition.setIndex(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getByte(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.YearMonth.isSupported(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.length()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahDate.atTime(LocalTime)": {
        "args": [
            "LocalTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BandedSampleModel.setPixel(int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.setRawResult(V)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.DoubleAccumulator.longValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.removeHierarchyBoundsListener(HierarchyBoundsListener)": {
        "args": [
            "HierarchyBoundsListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServicesListener.serviceAvailable(BeanContextServiceAvailableEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BeanContextServiceAvailableEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.DatagramChannel.connect(SocketAddress)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "SocketAddress"
        ], 
        "@throws": [
            "ClosedChannelException", 
            "AsynchronousCloseException", 
            "ClosedByInterruptException", 
            "SecurityException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.DataOutputStream.writeDouble(double)": {
        "args": [
            "double"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.logging.LogRecord.getThrown()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CheckboxGroup.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.ofLocalizedTime(FormatStyle)": {
        "args": [
            "FormatStyle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getConstructors()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.util.concurrent.FutureTask.done()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.remove(Object, Object)": {
        "args": [
            "Object", 
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Random.ints(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.file.spi.FileSystemProvider.newFileChannel(Path, Set, FileAttribute[])": {
        "args": [
            "Path", 
            "Set", 
            "FileAttribute[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Date.toGMTString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.BorderLayout.setVgap(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLOutput.writeInt(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.CompletionStage.applyToEitherAsync(CompletionStage, Function)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CompletionStage", 
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collector.of(Supplier, BiConsumer, BinaryOperator, Function, Characteristics[])": {
        "args": [
            "Supplier", 
            "BiConsumer", 
            "BinaryOperator", 
            "Function", 
            "Characteristics[]"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.get(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "BufferUnderflowException"
        ], 
        "throws": []
    }, 
    "java.util.jar.Manifest.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.HttpRetryException.getReason()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsDevice.getDisplayMode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.getParameters()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics2D.setRenderingHints(Map)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Map"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.addFocusListener(FocusListener)": {
        "args": [
            "FocusListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.ofSecondOfDay(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.Graphics.drawOval(int, int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.Transferable.getTransferDataFlavors()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousFileChannel.read(ByteBuffer, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer", 
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NonReadableChannelException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.Chronology.of(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.Graphics2D.shear(double, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeMap.forEach(BiConsumer)": {
        "args": [
            "BiConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.ChronoField.checkValidIntValue(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramPacket.getOffset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Phaser.bulkRegister(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalStateException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.copyChildren()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.createGlyphVector(FontRenderContext, char[])": {
        "args": [
            "FontRenderContext", 
            "char[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.IndexedPropertyDescriptor.getIndexedWriteMethod()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getClob(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.RectangularShape.getWidth()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PipedWriter.write(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Math.exp(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.StringTokenizer.nextToken()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.awt.Font.getFont(Map)": {
        "args": [
            "Map"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.logging.Logger.setUseParentHandlers(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.security.CodeSource.implies(CodeSource)": {
        "args": [
            "CodeSource"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isISOControl(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTarget.updateLocation(Point)": {
        "args": [
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.nextBigInteger()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InputMismatchException", 
            "NoSuchElementException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.lang.management.MonitorInfo.getLockedStackDepth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.get(T)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.nullsAreSortedAtStart()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.OutputStream.write(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.file.spi.FileSystemProvider.setAttribute(Path, String, Object, LinkOption[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Path", 
            "String", 
            "Object", 
            "LinkOption[]"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IllegalArgumentException", 
            "ClassCastException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Choice.getAccessibleAction()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Short.doubleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.plus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.Window.setLocation(Point)": {
        "args": [
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.PriorityBlockingQueue.add(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.event.MouseEvent.getClickCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getDatabaseMajorVersion()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.invoke.VolatileCallSite.getTarget()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.getPermission()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Vector.removeRange(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.codePointAt(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.spi.LocaleNameProvider.getDisplayVariant(String, Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Locale"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.font.LineMetrics.getAscent()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Rectangle2D.getPathIterator(AffineTransform, double)": {
        "args": [
            "AffineTransform", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.CharArrayReader.markSupported()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.ceilingEntry(K)": {
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.List.removeNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.interfaces.RSAMultiPrimePrivateCrtKey.getPublicExponent()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.rotate(List, int)": {
        "args": [
            "List", 
            "int"
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.SelectionKey.interestOps(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "CancelledKeyException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDate.getMonthValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.getLargeMaxRows()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.event.WindowAdapter.windowIconified(WindowEvent)": {
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SuppressWarnings.value()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.getSerialNumber()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.mousePressed(MouseEvent)": {
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuItem.getAccessibleRole()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.ComponentEvent.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextComponent.getBeforeIndex(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Ref.setObject(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.im.spi.InputMethod.setInputMethodContext(InputMethodContext)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "InputMethodContext"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.order()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.reduceEntriesToLong(long, ToLongFunction, long, LongBinaryOperator)": {
        "args": [
            "long", 
            "ToLongFunction", 
            "long", 
            "LongBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.isSupported(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.deriveFont(int, AffineTransform)": {
        "args": [
            "int", 
            "AffineTransform"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Locale.hasExtensions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateAsciiStream(int, InputStream, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "InputStream", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Font.getSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseWheelEvent.getUnitsToScroll()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.LongBuffer.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.getPropertyChangeListeners(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerArray.getAndIncrement(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.iterate(int, IntUnaryOperator)": {
        "args": [
            "int", 
            "IntUnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.plusHours(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.invokeAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "NullPointerException", 
            "RejectedExecutionException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextChildSupport.getBeanContextChildPeer()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.RectangularShape.getHeight()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.Book.append(Printable, PageFormat, int)": {
        "args": [
            "Printable", 
            "PageFormat", 
            "int"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.file.attribute.FileOwnerAttributeView.name()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.textValueChanged(TextEvent)": {
        "args": [
            "TextEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.TypeVariable.getGenericDeclaration()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.PaintContext.dispose()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationSystem.getActivationGroupDesc(ActivationGroupID)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ActivationGroupID"
        ], 
        "@throws": [
            "UnknownGroupException", 
            "ActivationException", 
            "RemoteException"
        ], 
        "throws": [
            "ActivationException", 
            "UnknownGroupException", 
            "RemoteException"
        ]
    }, 
    "java.io.DataInputStream.read(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.StrictMath.ulp(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Byte.compareTo(Byte)": {
        "args": [
            "Byte"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.WritableRaster.createWritableChild(int, int, int, int, int, int, int[])": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]"
        ], 
        "@throws": [
            "RasterFormatException", 
            "RasterFormatException"
        ], 
        "throws": []
    }, 
    "java.rmi.dgc.DGC.dirty(ObjID[], long, Lease)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ObjID[]", 
            "long", 
            "Lease"
        ], 
        "@throws": [
            "RemoteException"
        ], 
        "throws": [
            "RemoteException"
        ]
    }, 
    "java.util.stream.IntStream.max()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.getBaselineFor(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.KeyEvent.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.LogRecord.getLevel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Rectangle.getBounds()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.SerializedLambda.getFunctionalInterfaceMethodName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadInfo.isInNative()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.MultiPixelPackedSampleModel.createSubsetSampleModel(int[])": {
        "args": [
            "int[]"
        ], 
        "@throws": [
            "RasterFormatException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.AlgorithmParameterGenerator.init(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Path.startsWith(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "InvalidPathException"
        ], 
        "throws": []
    }, 
    "java.lang.String.codePointAt(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.setPixel(int, int, double[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "double[]", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.nio.LongBuffer.put(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.util.LinkedList.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.BufferedWriter.write(String, int, int)": {
        "args": [
            "String", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.ServiceLoader.load(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ShortBuffer.put(short[])": {
        "args": [
            "short[]"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.awt.PrintJob.getPageDimension()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPane.setScrollPosition(Point)": {
        "args": [
            "Point"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.KeyStore.getDefaultType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServiceAvailableEvent.getServiceClass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ProcessBuilder.redirectErrorStream(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509Certificate.getSigAlgOID()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextField.getPreferredSize(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.now(Clock)": {
        "args": [
            "Clock"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragGestureRecognizer.setComponent(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Modifier.isNative(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.descendingIterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TrayIcon.removeActionListener(ActionListener)": {
        "args": [
            "ActionListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateSQLXML(int, SQLXML)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "SQLXML"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.function.IntConsumer.accept(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormat.getDateInstance(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.SocketImpl.available()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.channels.AsynchronousChannelGroup.isShutdown()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Shape.getBounds2D()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.sort(double[])": {
        "args": [
            "double[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.LineNumberInputStream.getLineNumber()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ManagementFactory.getOperatingSystemMXBean()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.putInt(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.JobAttributes.setCopies(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.TreeMap.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.JobAttributes.getCopies()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getString(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.font.GlyphVector.getFont()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.CryptoPrimitive.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.BufferedReader.read(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.URLConnection.getOutputStream()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException", 
            "UnknownServiceException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.cert.CRL.isRevoked(Certificate)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Certificate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.serialize(ObjectOutputStream, Collection)": {
        "args": [
            "ObjectOutputStream", 
            "Collection"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.ResultSet.getObject(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.DefaultKeyboardFocusManager.postProcessKeyEvent(KeyEvent)": {
        "args": [
            "KeyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.toUpperCase(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.PaintContext.getColorModel()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.complete()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Frame.setUndecorated(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "IllegalComponentStateException", 
            "IllegalComponentStateException", 
            "IllegalComponentStateException", 
            "IllegalComponentStateException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.accumulateAndGet(T, V, BinaryOperator)": {
        "args": [
            "T", 
            "V", 
            "BinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.getLocalAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.MulticastSocket.setTTL(byte)": {
        "args": [
            "byte"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.ColorModel.hasAlpha()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.getInputStream()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException", 
            "UnknownServiceException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.beans.FeatureDescriptor.setValue(String, Object)": {
        "args": [
            "String", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.CharBuffer.slice()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Package.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.RoundRectangle2D.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.getLong(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.print.PrinterIOException.getCause()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Color.brighter()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeMap.tailMap(K, boolean)": {
        "args": [
            "K", 
            "boolean"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.getDataElement(int[], int)": {
        "args": [
            "int[]", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinWorkerThread.getPoolIndex()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.DigestInputStream.setMessageDigest(MessageDigest)": {
        "args": [
            "MessageDigest"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceListener.dragDropEnd(DragSourceDropEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DragSourceDropEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerArray.incrementAndGet(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.StringJoiner.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousFileChannel.read(ByteBuffer, long, A, CompletionHandler)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer", 
            "long", 
            "A", 
            "CompletionHandler"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NonReadableChannelException"
        ], 
        "throws": []
    }, 
    "java.awt.JobAttributes.getDestination()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.lineTo(double, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalField.getBaseUnit()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.PixelGrabber.abortGrabbing()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.minus(Duration)": {
        "args": [
            "Duration"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.sql.Timestamp.from(Instant)": {
        "args": [
            "Instant"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ArrayBlockingQueue.offer(E, long, TimeUnit)": {
        "args": [
            "E", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException", 
            "NullPointerException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.io.ObjectInputStream.available()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Double.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadLocalRandom.ints(long, int, int)": {
        "args": [
            "long", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.setCurve(QuadCurve2D)": {
        "args": [
            "QuadCurve2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.mouseMoved(MouseEvent)": {
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipFile.entries()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.summaryStatistics()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStoreSpi.engineDeleteEntry(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "KeyStoreException"
        ], 
        "throws": [
            "KeyStoreException"
        ]
    }, 
    "java.awt.image.LookupOp.getBounds2D(Raster)": {
        "args": [
            "Raster"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Observable.addObserver(Observer)": {
        "args": [
            "Observer"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ArrayBlockingQueue.drainTo(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.AlgorithmParameters.getEncoded(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.ConcurrentMap.replaceAll(BiFunction)": {
        "args": [
            "BiFunction"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "NullPointerException", 
            "ClassCastException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.logging.LogRecord.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CheckboxMenuItem.getAccessibleActionDescription(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getCursor()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.prepareImage(Image, int, int, ImageObserver)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Image", 
            "int", 
            "int", 
            "ImageObserver"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.tanh(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.compareToIgnoreCase(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.WritableRaster.setPixel(int, int, double[])": {
        "args": [
            "int", 
            "int", 
            "double[]"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.net.URLConnection.setIfModifiedSince(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.time.temporal.TemporalAccessor.query(TemporalQuery)": {
        "args": [
            "TemporalQuery"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.applyComponentOrientation(ComponentOrientation)": {
        "args": [
            "ComponentOrientation"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.StringJoiner.merge(StringJoiner)": {
        "args": [
            "StringJoiner"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Choice.processItemEvent(ItemEvent)": {
        "args": [
            "ItemEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Checksum.getValue()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.KeyEvent.getKeyCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipEntry.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDate.isSupported(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendValueReduced(TemporalField, int, int, int)": {
        "args": [
            "TemporalField", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.logging.Logger.getLevel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Signature.verify(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "SignatureException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "SignatureException"
        ]
    }, 
    "java.lang.Float.byteValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.setBackground(Color)": {
        "args": [
            "Color"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.registry.LocateRegistry.getRegistry(String, int, RMIClientSocketFactory)": {
        "args": [
            "String", 
            "int", 
            "RMIClientSocketFactory"
        ], 
        "@throws": [
            "RemoteException"
        ], 
        "throws": [
            "RemoteException"
        ]
    }, 
    "java.sql.SQLWarning.getNextWarning()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyEditor.supportsCustomEditor()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.IsoChronology.date(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ComponentSampleModel.setPixels(int, int, int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.Matcher.useTransparentBounds(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SecureRandomSpi.engineNextBytes(byte[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Provider.replace(Object, Object)": {
        "args": [
            "Object", 
            "Object"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.beans.FeatureDescriptor.setHidden(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ResourceBundle.getObject(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "MissingResourceException"
        ], 
        "throws": []
    }, 
    "java.time.ZoneId.getId()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.ContainerAdapter.componentAdded(ContainerEvent)": {
        "args": [
            "ContainerEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.spliterator(int[], int, int)": {
        "args": [
            "int[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.write(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.PreparedStatement.setNClob(int, Reader, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Reader", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.reflect.Parameter.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuItem.setEnabled(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.getSample(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.toString(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceAdapter.dragEnter(DragSourceDragEvent)": {
        "args": [
            "DragSourceDragEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.Book.getPrintable(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": [
            "IndexOutOfBoundsException"
        ]
    }, 
    "java.security.cert.X509CRL.getIssuerX500Principal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoEra.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StringReader.mark(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.CookieStore.get(URI)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "URI"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.MultiPixelPackedSampleModel.getOffset(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.NetworkInterface.getInterfaceAddresses()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferFloat.getBankData()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseChronology.zonedDateTime(Instant, ZoneId)": {
        "args": [
            "Instant", 
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.get(String, byte)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "byte"
        ], 
        "@throws": [
            "IOException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.CompletableFuture.get(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "CancellationException", 
            "ExecutionException", 
            "InterruptedException", 
            "TimeoutException"
        ], 
        "throws": [
            "InterruptedException", 
            "ExecutionException", 
            "TimeoutException"
        ]
    }, 
    "java.lang.ProcessBuilder.appendTo(File)": {
        "args": [
            "File"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.isMaximumSizeSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.BreakIterator.getText()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.copyOf(byte[], int)": {
        "args": [
            "byte[]", 
            "int"
        ], 
        "@throws": [
            "NegativeArraySizeException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.getNameConstraints()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.IsoChronology.dateNow(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseChronology.dateNow(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendZoneId()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.spi.InputMethodDescriptor.getAvailableLocales()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "AWTException"
        ], 
        "throws": [
            "AWTException"
        ]
    }, 
    "java.util.ArrayList.retainAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.FileDialog.isMultipleMode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getSQLXML(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.ResultSetMetaData.getColumnCount()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.invoke.MethodType.methodType(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.StrictMath.floorMod(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDate.toEpochDay()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractList.subList(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.Pipe.validOps()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.parse(CharSequence, DateTimeFormatter)": {
        "args": [
            "CharSequence", 
            "DateTimeFormatter"
        ], 
        "@throws": [
            "DateTimeParseException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetContext.getCurrentDataFlavors()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BandedSampleModel.getPixel(int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.asIntBuffer()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZoneOffset.range(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.util.jar.Manifest.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.multipliedBy(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.FlatteningPathIterator.currentSegment(double[])": {
        "args": [
            "double[]"
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousByteChannel.read(ByteBuffer, A, CompletionHandler)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer", 
            "A", 
            "CompletionHandler"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ReadPendingException", 
            "ShutdownChannelGroupException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.MinguoDate.getEra()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.completedFuture(U)": {
        "args": [
            "U"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Currency.getSymbol()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Security.getProviders(Map)": {
        "args": [
            "Map"
        ], 
        "@throws": [
            "InvalidParameterException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.subSet(E, E)": {
        "args": [
            "E", 
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Vector.addElement(E)": {
        "args": [
            "E"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXRevocationChecker.getOcspResponderCert()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.GlyphVector.getVisualBounds()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedQueue.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.AppletInitializer.initialize(Applet, BeanContext)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Applet", 
            "BeanContext"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Checksum.reset()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getUDTs(String, String, String, int[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String", 
            "String", 
            "int[]"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.MessageDigestSpi.engineUpdate(byte[], int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.getIconImages()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DirectColorModel.getBlue(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException", 
            "ClassCastException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.WindowPeer.setOpaque(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.PixelGrabber.getHeight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.forEachValue(long, Function, Consumer)": {
        "args": [
            "long", 
            "Function", 
            "Consumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.PriorityBlockingQueue.remainingCapacity()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Phaser.getRoot()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.isTransformed()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocketImpl.getTimeToLive()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.Security.setProperty(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.ThreadLocal.withInitial(Supplier)": {
        "args": [
            "Supplier"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.ScrollPaneAdjustable.getUnitIncrement()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.removeAWTEventListener(AWTEventListener)": {
        "args": [
            "AWTEventListener"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceContext.addDragSourceListener(DragSourceListener)": {
        "args": [
            "DragSourceListener"
        ], 
        "@throws": [
            "TooManyListenersException"
        ], 
        "throws": [
            "TooManyListenersException"
        ]
    }, 
    "java.util.NavigableSet.headSet(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.KeyStore.getSecretKey()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.MatchResult.end()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.io.File.list(FilenameFilter)": {
        "args": [
            "FilenameFilter"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.beans.PropertyEditor.paintValue(Graphics, Rectangle)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Graphics", 
            "Rectangle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.getResultSetHoldability()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.PrintWriter.print(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintStream.println(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentMap.computeIfAbsent(K, Function)": {
        "args": [
            "K", 
            "Function"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.getDataElement(float[], int)": {
        "args": [
            "float[]", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.StampedLock.writeLockInterruptibly()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.lang.Iterable.iterator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.color.ColorSpace.fromRGB(float[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "float[]"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.ArrayDeque.peekLast()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.parameterArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.valueOf(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.SystemFlavorMap.decodeDataFlavor(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": [
            "ClassNotFoundException"
        ]
    }, 
    "java.sql.JDBCType.valueOf(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.peekFirst()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ProcessBuilder.redirectOutput()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.ValueRange.of(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.HijrahDate.getEra()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.write(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.CyclicBarrier.await()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InterruptedException", 
            "BrokenBarrierException"
        ], 
        "throws": [
            "InterruptedException", 
            "BrokenBarrierException"
        ]
    }, 
    "java.util.concurrent.locks.Lock.lockInterruptibly()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.Spliterator.characteristics()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.andNot(BigInteger)": {
        "args": [
            "BigInteger"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextMeasurer.getLayout(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.text.DateFormat.format(Object, StringBuffer, FieldPosition)": {
        "args": [
            "Object", 
            "StringBuffer", 
            "FieldPosition"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.isAlwaysOnTopSupported()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.IsoChronology.resolveDate(Map, ResolverStyle)": {
        "args": [
            "Map", 
            "ResolverStyle"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.Toolkit.createImage(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Permission.hashCode()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.Pack200.newUnpacker()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingQueue.offer(E, long, TimeUnit)": {
        "args": [
            "E", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException", 
            "NullPointerException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.image.Raster.getSampleFloat(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.selectBestTextFlavor(DataFlavor[])": {
        "args": [
            "DataFlavor[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.HierarchyListener.hierarchyChanged(HierarchyEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "HierarchyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.peer.DragSourceContextPeer.transferablesFlavorsChanged()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Arc2D.getEndPoint()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.spi.InputMethod.reconvert()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.lang.Boolean.booleanValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.signum(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.BaseStream.isParallel()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.bcsChildren()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StreamTokenizer.lowerCaseMode(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.writeExternal(ObjectOutput)": {
        "args": [
            "ObjectOutput"
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.geom.Line2D.ptLineDistSq(Point2D)": {
        "args": [
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDate.plus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.Deque.removeFirstOccurrence(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.isValid()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.dgc.VMID.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.InputMethodHighlight.getVariation()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.DelayQueue.poll(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.dnd.DragSourceAdapter.dropActionChanged(DragSourceDragEvent)": {
        "args": [
            "DragSourceDragEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectStreamField.getType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImageProducer.startProduction(ImageConsumer)": {
        "args": [
            "ImageConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.getInstance(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "KeyStoreException", 
            "NoSuchProviderException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "KeyStoreException", 
            "NoSuchProviderException"
        ]
    }, 
    "java.io.ObjectOutputStream.put(String, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "double"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsTableCorrelationNames()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.print.PrinterJob.setPrintService(PrintService)": {
        "args": [
            "PrintService"
        ], 
        "@throws": [
            "PrinterException"
        ], 
        "throws": [
            "PrinterException"
        ]
    }, 
    "java.sql.Connection.getWarnings()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.Signature.initVerify(Certificate)": {
        "args": [
            "Certificate"
        ], 
        "@throws": [
            "InvalidKeyException"
        ], 
        "throws": [
            "InvalidKeyException"
        ]
    }, 
    "java.lang.Package.getSpecificationTitle()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SimpleTimeZone.getDSTSavings()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SelectableChannel.provider()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.KeyboardFocusManagerPeer.clearGlobalFocusOwner(Window)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Window"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Checkbox.setCheckboxGroup(CheckboxGroup)": {
        "args": [
            "CheckboxGroup"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Observable.notifyObservers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.IsoEra.getValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.lock()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLInput.readLong()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.AlgorithmParameters.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.longValueExact()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.NavigableMap.pollFirstEntry()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.getAuthorityKeyIdentifier()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.clear()": {
        "args": [
            ""
        ], 
        "@throws": [
            "BackingStoreException", 
            "IllegalStateException"
        ], 
        "throws": [
            "BackingStoreException"
        ]
    }, 
    "java.applet.Applet.resize(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.ECGenParameterSpec.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.setDefaultRequestProperty(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setShort(int, short)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "short"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.text.DecimalFormat.getDecimalFormatSymbols()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahDate.until(ChronoLocalDate)": {
        "args": [
            "ChronoLocalDate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CheckboxMenuItem.getAccessibleContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.with(TemporalAdjuster)": {
        "args": [
            "TemporalAdjuster"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.nio.charset.CharsetDecoder.onMalformedInput(CodingErrorAction)": {
        "args": [
            "CodingErrorAction"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.FontMetrics.getHeight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.System.getenv(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.stream.Stream.peek(Consumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Consumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServiceProviderBeanInfo.getServicesBeanInfo()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setFloat(String, float)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "float"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.channels.Selector.close()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.Signature.clone()": {
        "args": [
            ""
        ], 
        "@throws": [
            "CloneNotSupportedException"
        ], 
        "throws": [
            "CloneNotSupportedException"
        ]
    }, 
    "java.text.Bidi.getRunStart(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Point.translate(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.BasicFileAttributes.lastAccessTime()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.GlyphVector.getNumGlyphs()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.FilteredImageSource.removeConsumer(ImageConsumer)": {
        "args": [
            "ImageConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.getFloat()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "BufferUnderflowException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.acceptEitherAsync(CompletionStage, Consumer)": {
        "args": [
            "CompletionStage", 
            "Consumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferDouble.getElemDouble(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URL.getAuthority()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.thenComposeAsync(Function)": {
        "args": [
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeSet.tailSet(E, boolean)": {
        "args": [
            "E", 
            "boolean"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicMarkableReference.attemptMark(V, boolean)": {
        "args": [
            "V", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextHitInfo.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneOffsetTransitionRule.of(Month, int, DayOfWeek, LocalTime, boolean, TimeDefinition, ZoneOffset, ZoneOffset, ZoneOffset)": {
        "args": [
            "Month", 
            "int", 
            "DayOfWeek", 
            "LocalTime", 
            "boolean", 
            "TimeDefinition", 
            "ZoneOffset", 
            "ZoneOffset", 
            "ZoneOffset"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.MenuComponent.getParent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousFileChannel.lock(long, long, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "long", 
            "boolean"
        ], 
        "@throws": [
            "OverlappingFileLockException", 
            "IllegalArgumentException", 
            "NonReadableChannelException", 
            "NonWritableChannelException"
        ], 
        "throws": []
    }, 
    "java.util.regex.Matcher.end(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalStateException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.zip.CRC32.update(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Point.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getDate(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.chrono.IsoChronology.dateEpochDay(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.font.OpenType.getFontTable(String, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.FileDialogPeer.setDirectory(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.RSAMultiPrimePrivateCrtKeySpec.getCrtCoefficient()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.MessageDigest.digest(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.order(ByteOrder)": {
        "args": [
            "ByteOrder"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.putFirst(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException", 
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.net.JarURLConnection.getCertificates()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasQueuedThreads()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.removeFirstOccurrence(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragGestureEvent.getDragOrigin()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.remove(HierarchyListener, HierarchyListener)": {
        "args": [
            "HierarchyListener", 
            "HierarchyListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsGroupByUnrelated()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.beans.PropertyEditor.getTags()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getAnnotatedInterfaces()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsConvert(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.zip.Deflater.getBytesWritten()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Period.minusYears(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.getComponentSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.spi.NumberFormatProvider.getNumberInstance(Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.sql.Array.getArray(long, int, Map)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "int", 
            "Map"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.ScrollPane.getAccessibleRole()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Beans.setGuiAvailable(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.io.PrintStream.close()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ArrayBlockingQueue.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.parse(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [
            "DateTimeParseException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Point2D.distanceSq(Point2D)": {
        "args": [
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Area.equals(Area)": {
        "args": [
            "Area"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.get(TemporalUnit)": {
        "args": [
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLException.getNextException()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.getBoolean(String, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "boolean"
        ], 
        "@throws": [
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.zip.ZipFile.getComment()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.mouseExited(MouseEvent)": {
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.isFirst()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.ArrayList.indexOf(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.deepToString(Object[])": {
        "args": [
            "Object[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Collator.getCollationKey(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadLocalRandom.doubles(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.Duration.ofDays(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.Number.longValue()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.UserDefinedFileAttributeView.list()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.text.DateFormatSymbols.setShortWeekdays(String[])": {
        "args": [
            "String[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Frame.getIconImage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.spliterator(T[], int, int)": {
        "args": [
            "T[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Image.flush()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.componentAdded(ContainerEvent)": {
        "args": [
            "ContainerEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Currency.getInstance(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.spec.EllipticCurve.getA()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Color.getColorComponents(ColorSpace, float[])": {
        "args": [
            "ColorSpace", 
            "float[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getSQLKeywords()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.DatabaseMetaData.getSchemas()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.rmi.server.Skeleton.dispatch(Remote, RemoteCall, int, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Remote", 
            "RemoteCall", 
            "int", 
            "long"
        ], 
        "@throws": [
            "Exception"
        ], 
        "throws": [
            "Exception"
        ]
    }, 
    "java.lang.Math.cbrt(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.Paper.getImageableWidth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FlowLayout.setVgap(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FontMetrics.getStringBounds(CharacterIterator, int, int, Graphics)": {
        "args": [
            "CharacterIterator", 
            "int", 
            "int", 
            "Graphics"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CheckboxMenuItem.getSelectedObjects()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SplittableRandom.doubles()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.sort(List)": {
        "args": [
            "List"
        ], 
        "@throws": [
            "ClassCastException", 
            "UnsupportedOperationException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.SocketChannel.read(ByteBuffer[], int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NotYetConnectedException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Choice.getListeners(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.util.ResourceBundle.toResourceName(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.getFlatness(double[], int)": {
        "args": [
            "double[]", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuShortcut.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTarget.setFlavorMap(FlavorMap)": {
        "args": [
            "FlavorMap"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.SecureCacheResponse.getLocalPrincipal()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.afterLast()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicLong.longValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.IntToDoubleFunction.applyAsDouble(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.createChild(int, int, int, int, int, int, int[])": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]"
        ], 
        "@throws": [
            "RasterFormatException", 
            "RasterFormatException"
        ], 
        "throws": []
    }, 
    "java.security.cert.CertificateFactorySpi.engineGenerateCertPath(InputStream, String)": {
        "args": [
            "InputStream", 
            "String"
        ], 
        "@throws": [
            "CertificateException", 
            "UnsupportedOperationException"
        ], 
        "throws": [
            "CertificateException"
        ]
    }, 
    "java.sql.Array.getBaseType()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.ImageCapabilities.isTrueVolatile()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.parallelSort(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.text.NumberFormat.getNumberInstance(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.MessageFormat.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.getFileNameMap()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.valueOf(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Frame.getFrames()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.mapEquivalents(List, Map)": {
        "args": [
            "List", 
            "Map"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.getY1()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Double.isNaN(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyDescriptor.isConstrained()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AlgorithmParametersSpi.engineGetParameterSpec(Class)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Class"
        ], 
        "@throws": [
            "InvalidParameterSpecException"
        ], 
        "throws": [
            "InvalidParameterSpecException"
        ]
    }, 
    "java.rmi.activation.ActivationSystem.unregisterGroup(ActivationGroupID)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ActivationGroupID"
        ], 
        "@throws": [
            "ActivationException", 
            "UnknownGroupException", 
            "RemoteException"
        ], 
        "throws": [
            "ActivationException", 
            "UnknownGroupException", 
            "RemoteException"
        ]
    }, 
    "java.io.File.canRead()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.text.StringCharacterIterator.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.Console.format(String, Object[])": {
        "args": [
            "String", 
            "Object[]"
        ], 
        "@throws": [
            "IllegalFormatException"
        ], 
        "throws": []
    }, 
    "java.awt.Frame.isResizable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RenderedImage.getData(Rectangle)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Rectangle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseChronology.dateNow()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.getExpiration()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.unwrap()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SortedSet.spliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.abs(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Cursor.getSystemCustomCursor(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "AWTException", 
            "HeadlessException"
        ]
    }, 
    "java.awt.print.Book.getPageFormat(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": [
            "IndexOutOfBoundsException"
        ]
    }, 
    "java.awt.MenuComponent.setFont(Font)": {
        "args": [
            "Font"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLStreamHandler.setURL(URL, String, String, int, String, String)": {
        "args": [
            "URL", 
            "String", 
            "String", 
            "int", 
            "String", 
            "String"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Array.newInstance(Class, int)": {
        "args": [
            "Class", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "NegativeArraySizeException"
        ], 
        "throws": [
            "NegativeArraySizeException"
        ]
    }, 
    "java.awt.TextArea.getRows()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuilder.insert(int, CharSequence)": {
        "args": [
            "int", 
            "CharSequence"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.remainingCapacity()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.LongAdder.doubleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.regex.Pattern.matches(String, CharSequence)": {
        "args": [
            "String", 
            "CharSequence"
        ], 
        "@throws": [
            "PatternSyntaxException"
        ], 
        "throws": []
    }, 
    "java.util.BitSet.and(BitSet)": {
        "args": [
            "BitSet"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.PrinterJob.pageDialog(PageFormat)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "PageFormat"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.text.CharacterIterator.current()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.ChoiceFormat.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PushbackReader.read(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(E, int)": {
        "args": [
            "E", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.net.NetworkInterface.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.SocketImpl.getInetAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getObject(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.CompletableFuture.handle(BiFunction)": {
        "args": [
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.SystemTray.getTrayIcons()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.noneMatch(IntPredicate)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "IntPredicate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.setPathToNames(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.chrono.IsoEra.of(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.event.MouseEvent.translatePoint(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SocketChannel.getLocalAddress()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.chrono.JapaneseDate.getChronology()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.Pack200.unpack(File, JarOutputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "File", 
            "JarOutputStream"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.BufferedReader.lines()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.PrinterJob.isCancelled()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CardLayout.next(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.atZoneSameInstant(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Semaphore.tryAcquire()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.gotFocus(Event, Object)": {
        "args": [
            "Event", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.OptionalDouble.orElse(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayList.trimToSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.PlatformManagedObject.getObjectName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Scrollbar.getLineIncrement()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.isCompletedNormally()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.cancel(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.toChars(int, char[], int)": {
        "args": [
            "int", 
            "char[]", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.io.WriteAbortedException.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDate.isBefore(ChronoLocalDate)": {
        "args": [
            "ChronoLocalDate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.UnresolvedPermission.getUnresolvedCerts()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.put(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException", 
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.function.ToIntBiFunction.applyAsInt(T, U)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "U"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URL.sameFile(URL)": {
        "args": [
            "URL"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextField.getPreferredSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireInterruptibly(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.sql.CallableStatement.setURL(String, URL)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "URL"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.RectangularShape.setFrameFromDiagonal(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FilterReader.mark(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.peer.WindowPeer.setOpacity(float)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Button.getActionListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.atMonth(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.GraphicsDevice.getType()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ImageCapabilities.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.destroy()": {
        "args": [
            ""
        ], 
        "@throws": [
            "DestroyFailedException"
        ], 
        "throws": [
            "DestroyFailedException"
        ]
    }, 
    "java.awt.Component.isBackgroundSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.toMethodDescriptorString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.spi.InputMethod.getLocale()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayList.contains(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.color.ICC_Profile.getData(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.List.removeFocusListener(FocusListener)": {
        "args": [
            "FocusListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Provider.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.event.MouseEvent.getXOnScreen()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Inet6Address.isSiteLocalAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.remove(MouseMotionListener, MouseMotionListener)": {
        "args": [
            "MouseMotionListener", 
            "MouseMotionListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collection.clear()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.reduceValuesToInt(long, ToIntFunction, int, IntBinaryOperator)": {
        "args": [
            "long", 
            "ToIntFunction", 
            "int", 
            "IntBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.MouseDragGestureRecognizer.mouseEntered(MouseEvent)": {
        "args": [
            "MouseEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.IllegalFormatCodePointException.getCodePoint()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingQueue.poll(long, TimeUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.time.OffsetDateTime.isSupported(TemporalUnit)": {
        "args": [
            "TemporalUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.previous()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.LinkedBlockingDeque.removeFirst()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseDate.lengthOfMonth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEvent.isConsumed()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Robot.delay(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.spec.DSAPrivateKeySpec.getQ()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Method.isDefault()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.setAll(long[], IntToLongFunction)": {
        "args": [
            "long[]", 
            "IntToLongFunction"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.KeyStore.store(LoadStoreParameter)": {
        "args": [
            "LoadStoreParameter"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "KeyStoreException", 
            "IOException", 
            "NoSuchAlgorithmException", 
            "CertificateException"
        ], 
        "throws": [
            "KeyStoreException", 
            "IOException", 
            "NoSuchAlgorithmException", 
            "CertificateException"
        ]
    }, 
    "java.util.spi.LocaleNameProvider.getDisplayLanguage(String, Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Locale"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.applet.Applet.play(URL, String)": {
        "args": [
            "URL", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Kernel.getYOrigin()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isLetterOrDigit(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceDragEvent.getTargetActions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.BreakIterator.isBoundary(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.text.Collator.compare(Object, Object)": {
        "args": [
            "Object", 
            "Object"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.forEach(BiConsumer)": {
        "args": [
            "BiConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateBigDecimal(int, BigDecimal)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "BigDecimal"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.RandomAccessFile.length()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.ComponentSampleModel.getBankIndices()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.storesUpperCaseIdentifiers()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.math.BigDecimal.remainder(BigDecimal)": {
        "args": [
            "BigDecimal"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.MenuComponent.addFocusListener(FocusListener)": {
        "args": [
            "FocusListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuItem.getMinimumAccessibleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.LongBuffer.hasArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.asDoubleStream()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ClassLoadingMXBean.getTotalLoadedClassCount()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkRead(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.KeyStore.setCertificateEntry(String, Certificate)": {
        "args": [
            "String", 
            "Certificate"
        ], 
        "@throws": [
            "KeyStoreException"
        ], 
        "throws": [
            "KeyStoreException"
        ]
    }, 
    "java.security.KeyStoreSpi.engineContainsAlias(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.isQueued(Thread)": {
        "args": [
            "Thread"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.rmi.dgc.Lease.getValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTarget.drop(DropTargetDropEvent)": {
        "args": [
            "DropTargetDropEvent"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Rectangle.add(Rectangle)": {
        "args": [
            "Rectangle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.MessageFormat.setLocale(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPaneAdjustable.setBlockIncrement(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSetMetaData.getColumnLabel(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.cert.X509CRL.getRevokedCertificate(BigInteger)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BigInteger"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipEntry.getLastModifiedTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.wasNull()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.KeyboardFocusManager.dispatchKeyEvent(KeyEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "KeyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.hashCode(short[])": {
        "args": [
            "short[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.isSelected(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeSet.comparator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.VetoableChangeSupport.fireVetoableChange(String, int, int)": {
        "args": [
            "String", 
            "int", 
            "int"
        ], 
        "@throws": [
            "PropertyVetoException"
        ], 
        "throws": [
            "PropertyVetoException"
        ]
    }, 
    "java.nio.charset.CharsetDecoder.implFlush(CharBuffer)": {
        "args": [
            "CharBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.registerOutParameter(String, SQLType)": {
        "args": [
            "String", 
            "SQLType"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.cert.CertPath.getType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.RectangularShape.setFrame(Rectangle2D)": {
        "args": [
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.config(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CardLayout.getLayoutAlignmentX(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.getPositivePrefix()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormatSymbols.getShortMonths()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.isBefore(ChronoZonedDateTime)": {
        "args": [
            "ChronoZonedDateTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CharsetEncoder.implOnMalformedInput(CodingErrorAction)": {
        "args": [
            "CodingErrorAction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextEvent.getBeanContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataInputStream.readDouble()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.YearMonth.isLeapYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.connect(SocketAddress)": {
        "args": [
            "SocketAddress"
        ], 
        "@throws": [
            "IOException", 
            "IllegalBlockingModeException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.AWTEventMulticaster.remove(ActionListener, ActionListener)": {
        "args": [
            "ActionListener", 
            "ActionListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyFactorySpi.engineTranslateKey(Key)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Key"
        ], 
        "@throws": [
            "InvalidKeyException"
        ], 
        "throws": [
            "InvalidKeyException"
        ]
    }, 
    "java.util.SimpleTimeZone.setEndRule(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.invert()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoninvertibleTransformException"
        ], 
        "throws": [
            "NoninvertibleTransformException"
        ]
    }, 
    "java.lang.Runtime.runFinalizersOnExit(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.HijrahChronology.resolveDate(Map, ResolverStyle)": {
        "args": [
            "Map", 
            "ResolverStyle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.ChronoField.adjustInto(R, long)": {
        "args": [
            "R", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.minusMinutes(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextEvent.isPropagated()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SeekableByteChannel.write(ByteBuffer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.stream.IntStream.iterator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDate.getChronology()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.InputMethodHighlight.getStyle()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.InputEvent.isAltDown()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ConvolveOp.getRenderingHints()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TimeZone.getDisplayName(boolean, int)": {
        "args": [
            "boolean", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.io.InvalidClassException.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.DisplayMode.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.getChildBeanContextServicesListener(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.componentAdded(ContainerEvent)": {
        "args": [
            "ContainerEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.atTime(int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.GregorianCalendar.setWeekDate(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.List.getRows()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collector.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.currentClassLoader()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RemoteRef.done(RemoteCall)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "RemoteCall"
        ], 
        "@throws": [
            "RemoteException"
        ], 
        "throws": [
            "RemoteException"
        ]
    }, 
    "java.awt.KeyboardFocusManager.processKeyEvent(Component, KeyEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Component", 
            "KeyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.createTempFile(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.Connection.getNetworkTimeout()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.DoubleBuffer.get(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicInteger.compareAndSet(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Handler.reportError(String, Exception, int)": {
        "args": [
            "String", 
            "Exception", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.setSubject(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.cert.CertPath.writeReplace()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ObjectStreamException"
        ], 
        "throws": [
            "ObjectStreamException"
        ]
    }, 
    "java.util.SplittableRandom.nextLong()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ByteLookupTable.lookupPixel(byte[], byte[])": {
        "args": [
            "byte[]", 
            "byte[]"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Adjustable.addAdjustmentListener(AdjustmentListener)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "AdjustmentListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FileOutputStream.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.math.BigDecimal.compareTo(BigDecimal)": {
        "args": [
            "BigDecimal"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.HttpRetryException.getLocation()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderContext.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetContext.createTransferableProxy(Transferable, boolean)": {
        "args": [
            "Transferable", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImage.getMinX()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.findGetter(Class, String, Class)": {
        "args": [
            "Class", 
            "String", 
            "Class"
        ], 
        "@throws": [
            "NoSuchFieldException", 
            "IllegalAccessException", 
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": [
            "NoSuchFieldException", 
            "IllegalAccessException"
        ]
    }, 
    "java.util.function.Function.apply(T)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseEra.range(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.io.FilterInputStream.available()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Dialog.setVisible(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.SocketImpl.getPort()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.RowIdLifetime.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentSampleModel.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintStream.format(String, Object[])": {
        "args": [
            "String", 
            "Object[]"
        ], 
        "@throws": [
            "IllegalFormatException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.StringBuffer.append(StringBuffer)": {
        "args": [
            "StringBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendLocalizedOffset(TextStyle)": {
        "args": [
            "TextStyle"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.Long.toOctalString(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.SocketImpl.connect(String, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Class.getClassLoader()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.clear()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.Collection.remove(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedTransferQueue.contains(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Ellipse2D.getHeight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Executors.newWorkStealingPool()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.NumberFormat.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.KeyListener.keyTyped(KeyEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "KeyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.fromMethodDescriptorString(String, ClassLoader)": {
        "args": [
            "String", 
            "ClassLoader"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "TypeNotPresentException"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "TypeNotPresentException"
        ]
    }, 
    "java.util.OptionalLong.orElse(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsDevice.isFullScreenSupported()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.SimpleBeanInfo.loadImage(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.NetworkInterface.supportsMulticast()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.util.ResourceBundle.getLocale()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.setCurrentKeyboardFocusManager(KeyboardFocusManager)": {
        "args": [
            "KeyboardFocusManager"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.awt.font.TextLayout.getCaretShapes(int, Rectangle2D, CaretPolicy)": {
        "args": [
            "int", 
            "Rectangle2D", 
            "CaretPolicy"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.addPropertyChangeListener(PropertyChangeListener)": {
        "args": [
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.BreakIterator.getLineInstance()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.HashMap.compute(K, BiFunction)": {
        "args": [
            "K", 
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.FlavorListener.flavorsChanged(FlavorEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "FlavorEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.usesLocalFiles()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.Signature.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.load(LoadStoreParameter)": {
        "args": [
            "LoadStoreParameter"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IOException", 
            "NoSuchAlgorithmException", 
            "CertificateException"
        ], 
        "throws": [
            "IOException", 
            "NoSuchAlgorithmException", 
            "CertificateException"
        ]
    }, 
    "java.text.FieldPosition.getEndIndex()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.BreakIterator.getWordInstance(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.annotation.RetentionPolicy.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.componentShown(ComponentEvent)": {
        "Hidden": [
            "Y"
        ], 
        "args": [
            "ComponentEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ChoicePeer.remove(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextEvent.setPropagatedFrom(BeanContext)": {
        "args": [
            "BeanContext"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.tryRelease(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalMonitorStateException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.toInstant()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.DayOfWeek.adjustInto(Temporal)": {
        "args": [
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.JobAttributes.getDefaultSelection()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.minusMonths(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDateTime.of(int, Month, int, int, int, int, int)": {
        "args": [
            "int", 
            "Month", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.ResourceBundle.getBundle(String, Control)": {
        "args": [
            "String", 
            "Control"
        ], 
        "@throws": [
            "NullPointerException", 
            "MissingResourceException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousSocketChannel.getRemoteAddress()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.logging.LogRecord.getSequenceNumber()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.IntBuffer.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.DoubleAdder.floatValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeMap.floorEntry(K)": {
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.Provider.clear()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.mouseEnter(Event, int, int)": {
        "args": [
            "Event", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.getDataElements(int, int, int, int, Object, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "Object", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.reduceEntries(long, BiFunction)": {
        "args": [
            "long", 
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.binarySearch(short[], int, int, short)": {
        "args": [
            "short[]", 
            "int", 
            "int", 
            "short"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.nio.file.Files.createFile(Path, FileAttribute[])": {
        "args": [
            "Path", 
            "FileAttribute[]"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "FileAlreadyExistsException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.TimeUnit.timedWait(Object, long)": {
        "args": [
            "Object", 
            "long"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.rmi.server.RMISocketFactory.setSocketFactory(RMISocketFactory)": {
        "args": [
            "RMISocketFactory"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.invoke.VolatileCallSite.dynamicInvoker()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getMinY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousSocketChannel.write(ByteBuffer, long, TimeUnit, A, CompletionHandler)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer", 
            "long", 
            "TimeUnit", 
            "A", 
            "CompletionHandler"
        ], 
        "@throws": [
            "WritePendingException", 
            "NotYetConnectedException", 
            "ShutdownChannelGroupException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.FutureTask.isDone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Timestamp.after(Timestamp)": {
        "args": [
            "Timestamp"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.element()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.discardKeyEvents(Component)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.useRadix(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.LinkedList.add(int, E)": {
        "args": [
            "int", 
            "E"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.sort(char[])": {
        "args": [
            "char[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsOuterJoins()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Spliterator.forEachRemaining(Consumer)": {
        "args": [
            "Consumer"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Math.addExact(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.fireVetoableChange(String, Object, Object)": {
        "args": [
            "String", 
            "Object", 
            "Object"
        ], 
        "@throws": [
            "PropertyVetoException"
        ], 
        "throws": [
            "PropertyVetoException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicIntegerArray.updateAndGet(int, IntUnaryOperator)": {
        "args": [
            "int", 
            "IntUnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.ofLocalizedDateTime(FormatStyle, FormatStyle)": {
        "args": [
            "FormatStyle", 
            "FormatStyle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.copyOf(float[], int)": {
        "args": [
            "float[]", 
            "int"
        ], 
        "@throws": [
            "NegativeArraySizeException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.foldArguments(MethodHandle, MethodHandle)": {
        "args": [
            "MethodHandle", 
            "MethodHandle"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDate.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.FileOwnerAttributeView.getOwner()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.geom.Rectangle2D.intersects(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeSet.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.TimeUnit.toHours(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Executors.privilegedCallable(Callable)": {
        "args": [
            "Callable"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.StreamTokenizer.wordChars(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getTimestamp(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.ByteBuffer.arrayOffset()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ReadOnlyBufferException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.net.Authenticator.getRequestingSite()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AlgorithmParameters.getInstance(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "NoSuchProviderException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "NoSuchAlgorithmException", 
            "NoSuchProviderException"
        ]
    }, 
    "java.nio.file.InvalidPathException.getIndex()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Period.get(TemporalUnit)": {
        "args": [
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.spi.SelectorProvider.openDatagramChannel(ProtocolFamily)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ProtocolFamily"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Window.addPropertyChangeListener(String, PropertyChangeListener)": {
        "args": [
            "String", 
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintWriter.append(CharSequence, int, int)": {
        "args": [
            "CharSequence", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Font.createFont(int, File)": {
        "args": [
            "int", 
            "File"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException", 
            "IOException", 
            "FontFormatException", 
            "SecurityException"
        ], 
        "throws": [
            "FontFormatException", 
            "IOException"
        ]
    }, 
    "java.lang.management.PlatformLoggingMXBean.getParentLoggerName(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Rectangle.contains(Point)": {
        "args": [
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.BreakIterator.preceding(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDate.compareTo(ChronoLocalDate)": {
        "args": [
            "ChronoLocalDate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.FloatBuffer.asReadOnlyBuffer()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahChronology.range(ChronoField)": {
        "args": [
            "ChronoField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.isFlavorRemoteObjectType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertStoreParameters.clone()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Enum.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.or(BigInteger)": {
        "args": [
            "BigInteger"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.random()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.getMetaData()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Component.deliverEvent(Event)": {
        "args": [
            "Event"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Path.getName(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.GridBagLayout.getLayoutOrigin()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPaneAdjustable.setValue(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.getShort()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "BufferUnderflowException"
        ], 
        "throws": []
    }, 
    "java.awt.Container.removeAll()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.SerializedLambda.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.until(Temporal, TemporalUnit)": {
        "args": [
            "Temporal", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.security.cert.PKIXParameters.setSigProvider(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.LongStream.peek(LongConsumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "LongConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.SimpleFileVisitor.preVisitDirectory(T, BasicFileAttributes)": {
        "args": [
            "T", 
            "BasicFileAttributes"
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Scrollbar.getAccessibleStateSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getAccessibleStateSet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getPseudoColumns(String, String, String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String", 
            "String", 
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.file.Paths.get(URI)": {
        "args": [
            "URI"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "FileSystemNotFoundException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.Hashtable.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.MonthDay.isValidYear(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.getOutline(AffineTransform)": {
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.inClass(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSource.createDragGestureRecognizer(Class, Component, int, DragGestureListener)": {
        "args": [
            "Class", 
            "Component", 
            "int", 
            "DragGestureListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.toRadians(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.isAfter(Instant)": {
        "args": [
            "Instant"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Field.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.PriorityQueue.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.BreakIterator.getCharacterInstance(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.jar.Attributes.putValue(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.file.attribute.AclEntry.setPermissions(AclEntryPermission[])": {
        "args": [
            "AclEntryPermission[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Method.getParameterAnnotations()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.toHexString(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXParameters.getCertStores()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.ContainerEvent.getChild()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.List.isEmpty()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PipedInputStream.receive(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.ResultSet.cancelRowUpdates()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.CallableStatement.setBinaryStream(String, InputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "InputStream"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.spec.ECFieldF2m.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoDate.minus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Base64.decode(ByteBuffer)": {
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.completeExceptionally(Throwable)": {
        "args": [
            "Throwable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXReason.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Label.setAlignment(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.Selector.select()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException", 
            "ClosedSelectorException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.rmi.activation.Activatable.unregister(ActivationID)": {
        "args": [
            "ActivationID"
        ], 
        "@throws": [
            "UnknownObjectException", 
            "ActivationException", 
            "RemoteException", 
            "UnsupportedOperationException"
        ], 
        "throws": [
            "UnknownObjectException", 
            "ActivationException", 
            "RemoteException"
        ]
    }, 
    "java.awt.Component.isDisplayable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.setPixel(int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.io.Reader.close()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.prefs.Preferences.putByteArray(String, byte[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "byte[]"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.sql.Blob.position(Blob, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Blob", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.math.RoundingMode.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.minusMillis(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.thenAcceptAsync(Consumer)": {
        "args": [
            "Consumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataInputStream.readUnsignedByte()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Window.processWindowEvent(WindowEvent)": {
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsEnvironment.preferProportionalFonts()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateRef(String, Ref)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Ref"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.datatransfer.SystemFlavorMap.getNativesForFlavors(DataFlavor[])": {
        "args": [
            "DataFlavor[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ProcessBuilder.redirectError(Redirect)": {
        "args": [
            "Redirect"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Image.getGraphics()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.TextField.addNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalAdjusters.next(DayOfWeek)": {
        "args": [
            "DayOfWeek"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Insets.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ShortBuffer.hasArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServiceRevokedListener.serviceRevoked(BeanContextServiceRevokedEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BeanContextServiceRevokedEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractList.add(int, E)": {
        "args": [
            "int", 
            "E"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.wrap()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.asCharBuffer()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URL.getHost()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.ofInstant(Instant, ZoneId)": {
        "args": [
            "Instant", 
            "ZoneId"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.Formatter.toString()": {
        "args": [
            ""
        ], 
        "@throws": [
            "FormatterClosedException"
        ], 
        "throws": []
    }, 
    "java.io.File.setLastModified(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.text.ChoiceFormat.getFormats()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.LineBreakMeasurer.insertChar(AttributedCharacterIterator, int)": {
        "args": [
            "AttributedCharacterIterator", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.management.MemoryPoolMXBean.setUsageThreshold(long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.ArrayDeque.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Polygon.getPathIterator(AffineTransform, double)": {
        "args": [
            "AffineTransform", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLong.getAndAccumulate(long, LongBinaryOperator)": {
        "args": [
            "long", 
            "LongBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateBoolean(int, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "boolean"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.DatagramSocketImpl.setTTL(byte)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "byte"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.MappedByteBuffer.isLoaded()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.withResolverFields(Set)": {
        "args": [
            "Set"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRLSelector.getMaxCRL()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TimeZone.hasSameRules(TimeZone)": {
        "args": [
            "TimeZone"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.remove(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.Math.decrementExact(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.isBeforeFirst()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.text.NumberFormat.setRoundingMode(RoundingMode)": {
        "args": [
            "RoundingMode"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.UUID.timestamp()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.beans.Encoder.writeObject(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDate.toString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Random.longs(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.HashMap.get(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLInput.readByte()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.UnresolvedPermission.getUnresolvedName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.BufferedReader.readLine()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.zip.CheckedOutputStream.getChecksum()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URI.getRawSchemeSpecificPart()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.spi.InputMethod.getControlObject()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.DoubleAccumulator.accumulate(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataInput.skipBytes(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.dnd.DragSource.getFlavorMap()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.KeyAdapter.keyReleased(KeyEvent)": {
        "args": [
            "KeyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.trimToSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicReferenceFieldUpdater.lazySet(T, V)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.BreakIterator.setText(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.layout()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertPathValidatorException.getReason()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.JobAttributes.setPrinter(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.getPercent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Scrollbar.getPageIncrement()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.NetworkChannel.getLocalAddress()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.stream.IntStream.mapToObj(IntFunction)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "IntFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousFileChannel.lock()": {
        "args": [
            ""
        ], 
        "@throws": [
            "OverlappingFileLockException", 
            "NonWritableChannelException"
        ], 
        "throws": []
    }, 
    "java.nio.file.attribute.DosFileAttributeView.readAttributes()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.geom.AffineTransform.getRotateInstance(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.WindowListener.windowActivated(WindowEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTarget.updateAutoscroll(Point)": {
        "args": [
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.annotation.AnnotationTypeMismatchException.foundType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.BufferPoolMXBean.getName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Signature.initVerify(PublicKey)": {
        "args": [
            "PublicKey"
        ], 
        "@throws": [
            "InvalidKeyException"
        ], 
        "throws": [
            "InvalidKeyException"
        ]
    }, 
    "java.lang.invoke.MethodHandleInfo.reflectAs(Class, Lookup)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Class", 
            "Lookup"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.dontUseGui()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.CharBuffer.read(CharBuffer)": {
        "args": [
            "CharBuffer"
        ], 
        "@throws": [
            "IOException", 
            "NullPointerException", 
            "ReadOnlyBufferException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.format.ResolverStyle.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.binarySearch(float[], float)": {
        "args": [
            "float[]", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayDeque.addFirst(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.ThreadGroup.resume()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.average()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ParameterMetaData.getParameterCount()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.DatagramSocket.getTrafficClass()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.util.LinkedList.push(E)": {
        "args": [
            "E"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.getUnicodeLocaleKeys()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.interfaces.ECPublicKey.getW()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.getMinimumSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.awaitNanos(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.sql.DatabaseMetaData.getDatabaseProductVersion()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.MessageDigest.update(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collectors.groupingByConcurrent(Function, Collector)": {
        "args": [
            "Function", 
            "Collector"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.writeBytes(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.DatabaseMetaData.getJDBCMinorVersion()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.channels.AsynchronousSocketChannel.write(ByteBuffer, A, CompletionHandler)": {
        "args": [
            "ByteBuffer", 
            "A", 
            "CompletionHandler"
        ], 
        "@throws": [
            "WritePendingException", 
            "NotYetConnectedException", 
            "ShutdownChannelGroupException"
        ], 
        "throws": []
    }, 
    "java.lang.StringBuilder.append(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractMap.put(K, V)": {
        "args": [
            "K", 
            "V"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.io.File.createTempFile(String, String, File)": {
        "args": [
            "String", 
            "String", 
            "File"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Date.toInstant()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsSchemasInIndexDefinitions()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.StackTraceElement.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.InputEvent.getModifiers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.getHeaderField(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayDeque.remove()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.util.stream.IntStream.collect(Supplier, ObjIntConsumer, BiConsumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Supplier", 
            "ObjIntConsumer", 
            "BiConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDate.equals(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.Condition.awaitUntil(Date)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Date"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.Component.mouseExit(Event, int, int)": {
        "args": [
            "Event", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics2D.setPaint(Paint)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Paint"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Color.getBlue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getLocale()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalComponentStateException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CountedCompleter.getRawResult()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Inet4Address.isMCOrgLocal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateBytes(int, byte[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "byte[]"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.RectangularShape.getX()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.isOutputShutdown()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuItem.getAccessibleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectOutputStream.flush()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.DatagramPacket.getSocketAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingDeque.offer(E, long, TimeUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.concurrent.Semaphore.tryAcquire(int, long, TimeUnit)": {
        "args": [
            "int", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.dnd.DragGestureEvent.toArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.GlyphVector.getFontRenderContext()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsMixedCaseQuotedIdentifiers()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.Class.isSynthetic()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Frame.getCursorType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.add(E)": {
        "args": [
            "E"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXRevocationChecker.getOcspResponder()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Objects.toString(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.Chronology.zonedDateTime(Instant, ZoneId)": {
        "args": [
            "Instant", 
            "ZoneId"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.pollTask()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.BufferCapabilities.getBackBufferCapabilities()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getTimestamp(int, Calendar)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Calendar"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.Rectangle2D.outcode(double, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Rectangle.intersects(Rectangle)": {
        "args": [
            "Rectangle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.pop()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.sql.SQLOutput.writeArray(Array)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Array"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Choice.getAccessibleActionDescription(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLInput.wasNull()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.TreeSet.pollFirst()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.setAttribute(Path, String, Object, LinkOption[])": {
        "args": [
            "Path", 
            "String", 
            "Object", 
            "LinkOption[]"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "IllegalArgumentException", 
            "ClassCastException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Integer.toBinaryString(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.HierarchyEvent.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.runAsync(Runnable)": {
        "args": [
            "Runnable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.atOffset(ZoneOffset)": {
        "args": [
            "ZoneOffset"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.sum()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.getDayOfWeek()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FilterOutputStream.write(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.zip.ZipEntry.setComment(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.BorderLayout.getLayoutAlignmentY(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeParseException.getParsedString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.getCurrency()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.DomainLoadStoreParameter.getConfiguration()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.StringTokenizer.nextToken(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NoSuchElementException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.math.BigDecimal.movePointLeft(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.regex.Matcher.quoteReplacement(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.getUseCaches()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.getSecond()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Set.hashCode()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.optionalStart()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.withMonth(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.stream.BaseStream.spliterator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.readShort()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.chrono.IsoChronology.getId()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.minus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.AbstractMap.entrySet()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SinglePixelPackedSampleModel.getSample(int, int, int, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.Skeleton.getOperations()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.reverse(List)": {
        "args": [
            "List"
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.sql.Statement.executeUpdate(String, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException", 
            "SQLTimeoutException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.PrivilegedAction.run()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Year.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Properties.load(InputStream)": {
        "args": [
            "InputStream"
        ], 
        "@throws": [
            "IOException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.channels.FileChannel.transferFrom(ReadableByteChannel, long, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ReadableByteChannel", 
            "long", 
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NonReadableChannelException", 
            "NonWritableChannelException", 
            "ClosedChannelException", 
            "AsynchronousCloseException", 
            "ClosedByInterruptException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.ClassLoader.getPackages()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEvent.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.putBoolean(String, boolean)": {
        "args": [
            "String", 
            "boolean"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.parallelSort(T[], int, int, Comparator)": {
        "args": [
            "T[]", 
            "int", 
            "int", 
            "Comparator"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DragSource.startDrag(DragGestureEvent, Cursor, Image, Point, Transferable, DragSourceListener, FlavorMap)": {
        "args": [
            "DragGestureEvent", 
            "Cursor", 
            "Image", 
            "Point", 
            "Transferable", 
            "DragSourceListener", 
            "FlavorMap"
        ], 
        "@throws": [
            "InvalidDnDOperationException"
        ], 
        "throws": [
            "InvalidDnDOperationException"
        ]
    }, 
    "java.util.logging.Logger.getGlobal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.FeatureDescriptor.setExpert(boolean)": {
        "Hidden": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.RenderingHints.containsValue(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getAttributes(String, String, String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String", 
            "String", 
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.Arc2D.setArcType(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.temporal.ValueRange.isValidIntValue(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509Extension.getCriticalExtensionOIDs()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoEra.of(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.remove(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Robot.setAutoWaitForIdle(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendLiteral(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.prepareStatement(String, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.logging.Handler.close()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.net.URLConnection.getHeaderFields()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CardLayout.setHgap(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.toLocalDateTime()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.VolatileImage.getTransparency()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collectors.toCollection(Supplier)": {
        "args": [
            "Supplier"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.RobotPeer.getRGBPixel(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.annotation.AnnotationTypeMismatchException.element()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongArray.accumulateAndGet(int, long, LongBinaryOperator)": {
        "args": [
            "int", 
            "long", 
            "LongBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicReferenceArray.weakCompareAndSet(int, E, E)": {
        "args": [
            "int", 
            "E", 
            "E"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.getSubjectAsBytes()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.FloatBuffer.array()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ReadOnlyBufferException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.lang.management.CompilationMXBean.getTotalCompilationTime()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImageOp.getWidth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.getCtrlY()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLOutput.writeShort(short)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "short"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.ThreadLocalRandom.doubles(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.MonthDay.getMonth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Field.getChar(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "IllegalAccessException", 
            "IllegalArgumentException", 
            "NullPointerException", 
            "ExceptionInInitializerError"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "IllegalAccessException"
        ]
    }, 
    "java.io.CharArrayWriter.close()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.withYear(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.TimeZone.getDisplayName(boolean, int, Locale)": {
        "args": [
            "boolean", 
            "int", 
            "Locale"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.StringBuffer.append(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.Chronology.compareTo(Chronology)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Chronology"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.subdivide(QuadCurve2D, QuadCurve2D)": {
        "args": [
            "QuadCurve2D", 
            "QuadCurve2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintWriter.print(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.MathContext.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.getChar(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.nio.file.FileStore.getFileStoreAttributeView(Class)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.RenderingHints.add(RenderingHints)": {
        "args": [
            "RenderingHints"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.reflectAs(Class, MethodHandle)": {
        "args": [
            "Class", 
            "MethodHandle"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException", 
            "IllegalArgumentException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.util.Spliterator.tryAdvance(IntConsumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "IntConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.LoaderHandler.loadClass(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "MalformedURLException", 
            "ClassNotFoundException"
        ], 
        "throws": [
            "MalformedURLException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.awt.geom.Point2D.getX()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextChildSupport.validatePendingSetBeanContext(BeanContext)": {
        "args": [
            "BeanContext"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceContext.dragMouseMoved(DragSourceDragEvent)": {
        "args": [
            "DragSourceDragEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipEntry.getCreationTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.of(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Calendar.getLeastMaximum(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Date.after(Date)": {
        "args": [
            "Date"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.net.InterfaceAddress.getBroadcast()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsDevice.getIDstring()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.fill(boolean[], int, int, boolean)": {
        "args": [
            "boolean[]", 
            "int", 
            "int", 
            "boolean"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsSchemasInDataManipulation()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.Connection.prepareCall(String, int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.Provider.newInstance(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "InvalidParameterException", 
            "NoSuchAlgorithmException"
        ], 
        "throws": [
            "NoSuchAlgorithmException"
        ]
    }, 
    "java.sql.Blob.length()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Graphics2D.setBackground(Color)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Color"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.IEEEremainder(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.IntToLongFunction.applyAsLong(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.MessageFormat.parse(String, ParsePosition)": {
        "args": [
            "String", 
            "ParsePosition"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getQueueLength()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.isFocusTraversable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.PosixFilePermissions.fromString(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Container.processContainerEvent(ContainerEvent)": {
        "args": [
            "ContainerEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.inverseTransform(double[], int, double[], int, int)": {
        "args": [
            "double[]", 
            "int", 
            "double[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NoninvertibleTransformException"
        ], 
        "throws": [
            "NoninvertibleTransformException"
        ]
    }, 
    "java.awt.geom.QuadCurve2D.getBounds2D()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.checkedList(List, Class)": {
        "args": [
            "List", 
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.setPrivateKeyValid(Date)": {
        "args": [
            "Date"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.BitSet.andNot(BitSet)": {
        "args": [
            "BitSet"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.WritableRenderedImage.isTileWritable(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ContainerOrderFocusTraversalPolicy.getLastComponent(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedTransferQueue.remainingCapacity()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.readUnsignedByte()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.ResultSet.updateObject(String, Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Object"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.font.TextLayout.getLogicalHighlightShape(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.SequenceInputStream.available()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.LinkedTransferQueue.drainTo(Collection, int)": {
        "args": [
            "Collection", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Map.entrySet()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.removeInternal(EventListener, EventListener)": {
        "args": [
            "EventListener", 
            "EventListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.withDecimalStyle(DecimalStyle)": {
        "args": [
            "DecimalStyle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyDescriptor.setConstrained(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoDate.of(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Rectangle2D.add(Point2D)": {
        "args": [
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.add(MouseWheelListener, MouseWheelListener)": {
        "args": [
            "MouseWheelListener", 
            "MouseWheelListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceContext.getDragSource()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Observable.notifyObservers(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.setName(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.setBounds(int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.paint(Graphics)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Graphics"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.AbstractExecutorService.invokeAny(Collection, long, TimeUnit)": {
        "args": [
            "Collection", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException", 
            "ExecutionException", 
            "TimeoutException"
        ]
    }, 
    "java.nio.channels.SelectionKey.interestOps()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "CancelledKeyException"
        ], 
        "throws": []
    }, 
    "java.util.stream.IntStream.summaryStatistics()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateNCharacterStream(int, Reader, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Reader", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.Duration.plusNanos(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DragGestureRecognizer.appendEvent(InputEvent)": {
        "args": [
            "InputEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RemoteRef.newCall(RemoteObject, Operation[], int, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "RemoteObject", 
            "Operation[]", 
            "int", 
            "long"
        ], 
        "@throws": [
            "RemoteException"
        ], 
        "throws": [
            "RemoteException"
        ]
    }, 
    "java.awt.Toolkit.getPropertyChangeListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.DoubleAdder.longValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextChild.getBeanContext()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Object.notifyAll()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalMonitorStateException"
        ], 
        "throws": []
    }, 
    "java.awt.color.ICC_Profile.write(OutputStream)": {
        "args": [
            "OutputStream"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.logging.LogManager.getLoggingMXBean()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.divideToIntegralValue(BigDecimal)": {
        "args": [
            "BigDecimal"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.jar.JarFile.entries()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ExecutorService.awaitTermination(long, TimeUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.net.URLClassLoader.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Vector.sort(Comparator)": {
        "args": [
            "Comparator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSetMetaData.getScale(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.beans.MethodDescriptor.getParameterDescriptors()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInput.close()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.geom.QuadCurve2D.getFlatnessSq(double[], int)": {
        "args": [
            "double[]", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahDate.getChronology()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextHitInfo.beforeOffset(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.valueOf(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "NumberFormatException"
        ], 
        "throws": [
            "NumberFormatException"
        ]
    }, 
    "java.lang.String.valueOf(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.now(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSource.createDragSourceContext(DragSourceContextPeer, DragGestureEvent, Cursor, Image, Point, Transferable, DragSourceListener)": {
        "args": [
            "DragSourceContextPeer", 
            "DragGestureEvent", 
            "Cursor", 
            "Image", 
            "Point", 
            "Transferable", 
            "DragSourceListener"
        ], 
        "@throws": [
            "NullPointerException", 
            "NullPointerException", 
            "NullPointerException", 
            "NullPointerException", 
            "IllegalArgumentException", 
            "IllegalArgumentException", 
            "IllegalArgumentException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Graphics2D.drawRenderableImage(RenderableImage, AffineTransform)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "RenderableImage", 
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedTransferQueue.transfer(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicInteger.incrementAndGet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.allMatch(IntPredicate)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "IntPredicate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FilterInputStream.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.charset.CoderResult.length()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.thenCompose(Function)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.PageAttributes.getOrigin()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Base64.getUrlDecoder()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.getComponentZOrder(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MediaTracker.statusAll(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataInput.readLine()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.file.Files.move(Path, Path, CopyOption[])": {
        "args": [
            "Path", 
            "Path", 
            "CopyOption[]"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "FileAlreadyExistsException", 
            "DirectoryNotEmptyException", 
            "AtomicMoveNotSupportedException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Window.reshape(int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.reduceToDouble(long, ToDoubleBiFunction, double, DoubleBinaryOperator)": {
        "args": [
            "long", 
            "ToDoubleBiFunction", 
            "double", 
            "DoubleBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.InetAddress.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.copyOf(U[], int, Class)": {
        "args": [
            "U[]", 
            "int", 
            "Class"
        ], 
        "@throws": [
            "NegativeArraySizeException", 
            "NullPointerException", 
            "ArrayStoreException"
        ], 
        "throws": []
    }, 
    "java.awt.Graphics.setClip(Shape)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Shape"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.valueOf(char[])": {
        "args": [
            "char[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Currency.getDisplayName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.minus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.FileChannel.read(ByteBuffer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.SQLOutput.writeStruct(Struct)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Struct"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.IllegalFormatFlagsException.getFlags()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Executable.isVarArgs()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.AttributedString.getIterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Random.longs(long, long, long)": {
        "args": [
            "long", 
            "long", 
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.image.Raster.getPixel(int, int, float[])": {
        "args": [
            "int", 
            "int", 
            "float[]"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.MinguoDate.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Choice.removeItemListener(ItemListener)": {
        "args": [
            "ItemListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.MessageDigestSpi.engineReset()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Timestamp.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.zip.ZipOutputStream.setLevel(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Enumeration.nextElement()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.solveQuadratic(double[])": {
        "args": [
            "double[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.IdentityHashMap.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.xor(BigInteger)": {
        "args": [
            "BigInteger"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ContextualRenderedImageFactory.mapRenderContext(int, RenderContext, ParameterBlock, RenderableImage)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "RenderContext", 
            "ParameterBlock", 
            "RenderableImage"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Comparator.thenComparingDouble(ToDoubleFunction)": {
        "args": [
            "ToDoubleFunction"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.event.InvocationEvent.isDispatched()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TrayIcon.setActionCommand(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Label.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.ProtocolFamily.name()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Clock.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.BufferedWriter.flush()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Class.getResourceAsStream(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetTime.getSecond()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.childJustRemovedHook(Object, BCSChild)": {
        "args": [
            "Object", 
            "BCSChild"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSource.addDragSourceListener(DragSourceListener)": {
        "args": [
            "DragSourceListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBuffer.setElem(int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Polygon.contains(Point2D)": {
        "args": [
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.FutureTask.get(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "CancellationException"
        ], 
        "throws": [
            "InterruptedException", 
            "ExecutionException", 
            "TimeoutException"
        ]
    }, 
    "java.awt.image.WritableRaster.setRect(Raster)": {
        "args": [
            "Raster"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setCharacterStream(String, Reader, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Reader", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.CallableStatement.getNCharacterStream(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.charset.CharsetDecoder.malformedInputAction()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.GlyphVector.getGlyphJustificationInfo(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.text.NumberFormat.getAvailableLocales()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicStampedReference.set(V, int)": {
        "args": [
            "V", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStoreSpi.engineGetKey(String, char[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "char[]"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "UnrecoverableKeyException"
        ], 
        "throws": [
            "NoSuchAlgorithmException", 
            "UnrecoverableKeyException"
        ]
    }, 
    "java.util.stream.IntStream.toArray()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PersistenceDelegate.writeObject(Object, Encoder)": {
        "args": [
            "Object", 
            "Encoder"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.spec.ECPublicKeySpec.getParams()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.toString(short[])": {
        "args": [
            "short[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.createCompatibleWritableRaster(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Area.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.finalize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.valueOf(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.builder()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.StampedLock.tryWriteLock(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.concurrent.ConcurrentHashMap.getMappedValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.sort(T[], Comparator)": {
        "args": [
            "T[]", 
            "Comparator"
        ], 
        "@throws": [
            "ClassCastException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.ThreadGroup.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragGestureEvent.getTriggerEvent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.block()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.time.OffsetDateTime.isAfter(OffsetDateTime)": {
        "args": [
            "OffsetDateTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.DigestOutputStream.write(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.beans.MethodDescriptor.getMethod()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.HttpURLConnection.setFixedLengthStreamingMode(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalStateException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.ClassValue.remove(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicReferenceArray.length()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.lookupClass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.storesLowerCaseQuotedIdentifiers()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.print.Paper.setImageableArea(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.getTimeZone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.AclEntry.principal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.ownInsertsAreVisible(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.serviceAvailable(BeanContextServiceAvailableEvent)": {
        "args": [
            "BeanContextServiceAvailableEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ByteArrayInputStream.reset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.appendParameterTypes(List)": {
        "args": [
            "List"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.regex.Matcher.start(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalStateException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.font.GraphicAttribute.getJustificationInfo()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.CookieStore.remove(URI, HttpCookie)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "URI", 
            "HttpCookie"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.Year.atMonthDay(MonthDay)": {
        "args": [
            "MonthDay"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLXML.getBinaryStream()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Vector.listIterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.LineMetrics.getNumChars()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.OpenType.getFontTableSize(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.getMultiplier()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.RSAOtherPrimeInfo.getExponent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingDeque.removeLastOccurrence(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.event.WindowAdapter.windowOpened(WindowEvent)": {
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.ofEpochSecond(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.io.FileOutputStream.write(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Graphics.drawRect(int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getToolkit()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getEnumConstants()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.ofInstant(Instant, ZoneId)": {
        "args": [
            "Instant", 
            "ZoneId"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.TreeMap.lastKey()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Rectangle2D.add(Rectangle2D)": {
        "args": [
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.SocketPermission.implies(Permission)": {
        "args": [
            "Permission"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Runtime.addShutdownHook(Thread)": {
        "args": [
            "Thread"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalStateException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.net.URLEncoder.encode(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "UnsupportedEncodingException"
        ], 
        "throws": [
            "UnsupportedEncodingException"
        ]
    }, 
    "java.nio.file.attribute.BasicFileAttributes.fileKey()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.moveTo(double, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.CharBuffer.append(CharSequence, int, int)": {
        "args": [
            "CharSequence", 
            "int", 
            "int"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "IndexOutOfBoundsException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.awt.im.spi.InputMethod.removeNotify()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.getUnicodeLocaleType(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.file.LinkOption.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.readExternal(ObjectInput)": {
        "args": [
            "ObjectInput"
        ], 
        "@throws": [], 
        "throws": [
            "IOException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.util.zip.CheckedOutputStream.write(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.Year.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Parameter.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ArrayBlockingQueue.poll()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.getHeaderFieldInt(String, int)": {
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.ParameterizedType.getRawType()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.setGlobalActiveWindow(Window)": {
        "args": [
            "Window"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.util.zip.InflaterInputStream.read(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException", 
            "ZipException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.stream.LongStream.findFirst()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SinglePixelPackedSampleModel.getBitMasks()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Checkbox.doAccessibleAction(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.binarySearch(char[], char)": {
        "args": [
            "char[]", 
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.Attributes.put(Object, Object)": {
        "args": [
            "Object", 
            "Object"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.io.PrintWriter.flush()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.getISOLanguages()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.DatagramSocket.connect(InetAddress, int)": {
        "args": [
            "InetAddress", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.beans.FeatureDescriptor.setName(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneOffsetTransition.getDuration()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.storesMixedCaseIdentifiers()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.DataBuffer.getDataType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SocketChannel.shutdownOutput()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NotYetConnectedException", 
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Color.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalTime.with(TemporalAdjuster)": {
        "args": [
            "TemporalAdjuster"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.ThreadGroup.isDestroyed()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.minusMinutes(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.SimpleTimeZone.setStartRule(int, int, int, int, boolean)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "boolean"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.Provider.replaceAll(BiFunction)": {
        "args": [
            "BiFunction"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.security.KeyStore.getCertificateChain(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "KeyStoreException"
        ], 
        "throws": [
            "KeyStoreException"
        ]
    }, 
    "java.util.IdentityHashMap.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.NumberFormat.getPercentInstance(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Period.addTo(Temporal)": {
        "args": [
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DragGestureEvent.getDragSource()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.push(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.PixelGrabber.setDimensions(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Dimension.getHeight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.getPixel(int, int, double[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "double[]", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.Long.sum(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ComponentPeer.setBounds(int, int, int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.LongConsumer.andThen(LongConsumer)": {
        "args": [
            "LongConsumer"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetAdapter.dragExit(DropTargetEvent)": {
        "args": [
            "DropTargetEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RenderedImage.getWidth()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImageOp.getSources()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.WritableRaster.setSamples(int, int, int, int, int, float[])": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "float[]"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.image.ComponentColorModel.getDataElements(int, Object)": {
        "args": [
            "int", 
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "ArrayIndexOutOfBoundsException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.text.RuleBasedCollator.getRules()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.setFetchDirection(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.floor(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.parseBest(CharSequence, TemporalQuery[])": {
        "args": [
            "CharSequence", 
            "TemporalQuery[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "DateTimeParseException"
        ], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.writeShort(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicReferenceArray.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.emptyListIterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextComponent.removeNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.parse(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [
            "DateTimeParseException"
        ], 
        "throws": []
    }, 
    "java.lang.ProcessBuilder.type()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getTime(int, Calendar)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Calendar"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.LinkedList.add(E)": {
        "args": [
            "E"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.getDayOfMonth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.plusMinutes(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.computeIfAbsent(K, Function)": {
        "args": [
            "K", 
            "Function"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalStateException", 
            "RuntimeException"
        ], 
        "throws": []
    }, 
    "java.lang.StrictMath.ulp(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.AclFileAttributeView.setAcl(List)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "List"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Component.prepareImage(Image, int, int, ImageObserver)": {
        "args": [
            "Image", 
            "int", 
            "int", 
            "ImageObserver"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.MessageDigest.getAlgorithm()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Date.toLocaleString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Double.max(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Executors.privilegedThreadFactory()": {
        "args": [
            ""
        ], 
        "@throws": [
            "AccessControlException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousChannelGroup.isTerminated()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Period.of(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceContext.dropActionChanged(DragSourceDragEvent)": {
        "args": [
            "DragSourceDragEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.IntBuffer.compact()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.Phaser.awaitAdvance(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.NetworkInterface.getByInetAddress(InetAddress)": {
        "args": [
            "InetAddress"
        ], 
        "@throws": [
            "SocketException", 
            "NullPointerException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.security.cert.CertPathBuilder.getInstance(String, Provider)": {
        "args": [
            "String", 
            "Provider"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "NoSuchAlgorithmException"
        ]
    }, 
    "java.awt.BasicStroke.getDashArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.windowGainedFocus(WindowEvent)": {
        "args": [
            "WindowEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.MenuBarPeer.addMenu(Menu)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Menu"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.InvocationTargetException.getCause()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.Activatable.exportObject(Remote, String, MarshalledObject, boolean, int, RMIClientSocketFactory, RMIServerSocketFactory)": {
        "args": [
            "Remote", 
            "String", 
            "MarshalledObject", 
            "boolean", 
            "int", 
            "RMIClientSocketFactory", 
            "RMIServerSocketFactory"
        ], 
        "@throws": [
            "ActivationException", 
            "RemoteException", 
            "UnsupportedOperationException"
        ], 
        "throws": [
            "ActivationException", 
            "RemoteException"
        ]
    }, 
    "java.io.RandomAccessFile.readBoolean()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.DatagramSocketImplFactory.createDatagramSocketImpl()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.firePropertyChange(String, boolean, boolean)": {
        "args": [
            "String", 
            "boolean", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSource.removeDragSourceMotionListener(DragSourceMotionListener)": {
        "args": [
            "DragSourceMotionListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTarget.getFlavorMap()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.LineMetrics.getDescent()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.HttpURLConnection.getHeaderField(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataInputStream.readChar()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.System.getSecurityManager()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.minusYears(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.lang.StrictMath.abs(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.round(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.setTypeMap(Map)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Map"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.LocalDate.query(TemporalQuery)": {
        "args": [
            "TemporalQuery"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextChildSupport.firePropertyChange(String, Object, Object)": {
        "args": [
            "String", 
            "Object", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListSet.first()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.lang.StrictMath.max(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.mappingCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Short.compare(short, short)": {
        "args": [
            "short", 
            "short"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.spi.DateFormatProvider.getDateTimeInstance(int, int, Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "Locale"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.List.isIndexSelected(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.shutdown()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImageProducer.requestTopDownLeftRightResend(ImageConsumer)": {
        "args": [
            "ImageConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.getAccessibleContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getDate(int, Calendar)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Calendar"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.RandomAccessFile.readLong()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.WritableRaster.setRect(int, int, Raster)": {
        "args": [
            "int", 
            "int", 
            "Raster"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.Policy.getInstance(String, Parameters, String)": {
        "args": [
            "String", 
            "Parameters", 
            "String"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException", 
            "IllegalArgumentException", 
            "NoSuchProviderException", 
            "NoSuchAlgorithmException"
        ], 
        "throws": [
            "NoSuchProviderException", 
            "NoSuchAlgorithmException"
        ]
    }, 
    "java.rmi.activation.ActivationGroup.setSystem(ActivationSystem)": {
        "args": [
            "ActivationSystem"
        ], 
        "@throws": [
            "ActivationException", 
            "SecurityException", 
            "UnsupportedOperationException"
        ], 
        "throws": [
            "ActivationException"
        ]
    }, 
    "java.util.stream.Stream.build()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getNumXTiles()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Short.valueOf(short)": {
        "args": [
            "short"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Package.getPackages()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquireShared(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalMonitorStateException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.lang.Float.isInfinite(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextArea.getScrollbarVisibility()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.AclEntryFlag.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.isSupported(TemporalUnit)": {
        "args": [
            "TemporalUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.Era.adjustInto(Temporal)": {
        "args": [
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.temporal.TemporalAdjusters.previous(DayOfWeek)": {
        "args": [
            "DayOfWeek"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Adjustable.setValue(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.List.add(int, E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "E"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.IdentityHashMap.containsValue(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.ObjIntConsumer.accept(T, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.offsetByCodePoints(char[], int, int, int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.security.cert.CertPathValidatorException.getCertPath()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.plusWeeks(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.FontMetrics.bytesWidth(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.security.spec.ECFieldF2m.getM()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyPairGeneratorSpi.initialize(int, SecureRandom)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "SecureRandom"
        ], 
        "@throws": [
            "InvalidParameterException"
        ], 
        "throws": []
    }, 
    "java.net.Socket.isConnected()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.getBlues(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.LockSupport.park()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.list(Path)": {
        "args": [
            "Path"
        ], 
        "@throws": [
            "NotDirectoryException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.geom.CubicCurve2D.intersects(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.spi.FileSystemProvider.move(Path, Path, CopyOption[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Path", 
            "Path", 
            "CopyOption[]"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "FileAlreadyExistsException", 
            "DirectoryNotEmptyException", 
            "AtomicMoveNotSupportedException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.geom.CubicCurve2D.getY1()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXRevocationChecker.setOcspExtensions(List)": {
        "args": [
            "List"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.isBefore(OffsetDateTime)": {
        "args": [
            "OffsetDateTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Field.setFloat(Object, float)": {
        "args": [
            "Object", 
            "float"
        ], 
        "@throws": [
            "IllegalAccessException", 
            "IllegalArgumentException", 
            "NullPointerException", 
            "ExceptionInInitializerError"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "IllegalAccessException"
        ]
    }, 
    "java.util.zip.InflaterOutputStream.finish()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Date.getMonth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Encoder.setPersistenceDelegate(Class, PersistenceDelegate)": {
        "args": [
            "Class", 
            "PersistenceDelegate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.getAccessibleSelection(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.annotation.ElementType.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ArrayBlockingQueue.peek()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingDeque.pollFirst(long, TimeUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.sql.DatabaseMetaData.getMaxTableNameLength()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.LocalTime.plusNanos(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.mapToObj(DoubleFunction)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DoubleFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateDate(String, Date)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Date"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.temporal.TemporalAdjusters.nextOrSame(DayOfWeek)": {
        "args": [
            "DayOfWeek"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.getVetoableChangeListeners(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.LineNumberReader.getLineNumber()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.copySign(float, float)": {
        "args": [
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.isArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.drawImage(Image, int, int, int, int, ImageObserver)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Image", 
            "int", 
            "int", 
            "int", 
            "int", 
            "ImageObserver"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.VetoableChangeSupport.addVetoableChangeListener(String, VetoableChangeListener)": {
        "args": [
            "String", 
            "VetoableChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RemoteObject.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.setMultipleMode(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Insets.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Byte.compare(byte, byte)": {
        "args": [
            "byte", 
            "byte"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PolicyNode.isCritical()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MediaTracker.addImage(Image, int)": {
        "args": [
            "Image", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GraphicsDevice.getDefaultConfiguration()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLInput.readBlob()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.Month.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.remove(KeyListener, KeyListener)": {
        "args": [
            "KeyListener", 
            "KeyListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.walkFileTree(Path, FileVisitor)": {
        "args": [
            "Path", 
            "FileVisitor"
        ], 
        "@throws": [
            "SecurityException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.invoke.MethodHandles.unreflectSpecial(Method, Class)": {
        "args": [
            "Method", 
            "Class"
        ], 
        "@throws": [
            "IllegalAccessException", 
            "NullPointerException"
        ], 
        "throws": [
            "IllegalAccessException"
        ]
    }, 
    "java.util.concurrent.CompletionStage.thenApplyAsync(Function)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Rectangle2D.intersectsLine(Line2D)": {
        "args": [
            "Line2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Area.contains(Rectangle2D)": {
        "args": [
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getDate(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.function.ObjLongConsumer.accept(T, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SplittableRandom.nextBoolean()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getWaitingThreads(ConditionObject)": {
        "args": [
            "ConditionObject"
        ], 
        "@throws": [
            "IllegalMonitorStateException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.net.DatagramSocket.setReceiveBufferSize(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "SocketException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.awt.Component.contains(Point)": {
        "args": [
            "Point"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.cert.CertPathValidator.getDefaultType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.BasicFileAttributes.isOther()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SortedSet.headSet(E)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.format.DecimalStyle.getDecimalSeparator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Identity.getPublicKey()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.nativeSQL(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.channels.AsynchronousFileChannel.write(ByteBuffer, long, A, CompletionHandler)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer", 
            "long", 
            "A", 
            "CompletionHandler"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NonWritableChannelException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.Lock.unlock()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.ProxySelector.getDefault()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.deleteRow()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.dnd.peer.DropTargetContextPeer.rejectDrop()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.StringSelection.getTransferDataFlavors()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedHashMap.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collection.isEmpty()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.dispose()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.addAll(Collection, T[])": {
        "args": [
            "Collection", 
            "T[]"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.setCertificate(X509Certificate)": {
        "args": [
            "X509Certificate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.SerializedLambda.getImplMethodKind()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.unmodifiableNavigableSet(NavigableSet)": {
        "args": [
            "NavigableSet"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.setVisible(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoPeriod.minus(TemporalAmount)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.stream.LongStream.spliterator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.LineNumberInputStream.setLineNumber(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.hashCode(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.createMenuItem(MenuItem)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "MenuItem"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.net.SocketImpl.listen(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Scanner.findInLine(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.getBackBuffer()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.setPreferredSize(Dimension)": {
        "args": [
            "Dimension"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousServerSocketChannel.bind(SocketAddress)": {
        "args": [
            "SocketAddress"
        ], 
        "@throws": [
            "AlreadyBoundException", 
            "UnsupportedAddressTypeException", 
            "SecurityException", 
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.System.setIn(InputStream)": {
        "args": [
            "InputStream"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.findAny()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.JobAttributes.getFileName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.getAvailableLocales()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Hashtable.putIfAbsent(K, V)": {
        "args": [
            "K", 
            "V"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseChronology.getId()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyDescriptor.setReadMethod(Method)": {
        "args": [
            "Method"
        ], 
        "@throws": [
            "IntrospectionException"
        ], 
        "throws": [
            "IntrospectionException"
        ]
    }, 
    "java.time.OffsetTime.compareTo(OffsetTime)": {
        "args": [
            "OffsetTime"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.logging.MemoryHandler.publish(LogRecord)": {
        "args": [
            "LogRecord"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.EventSetDescriptor.getListenerType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ThreadGroup.interrupt()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.MinguoChronology.eras()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.CharsetEncoder.canEncode(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateAsciiStream(int, InputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "InputStream"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Formatter.format(Locale, String, Object[])": {
        "args": [
            "Locale", 
            "String", 
            "Object[]"
        ], 
        "@throws": [
            "IllegalFormatException", 
            "FormatterClosedException"
        ], 
        "throws": []
    }, 
    "java.beans.PropertyEditorManager.registerEditor(Class, Class)": {
        "args": [
            "Class", 
            "Class"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.lang.Class.forName(String, boolean, ClassLoader)": {
        "args": [
            "String", 
            "boolean", 
            "ClassLoader"
        ], 
        "@throws": [
            "LinkageError", 
            "ExceptionInInitializerError", 
            "ClassNotFoundException"
        ], 
        "throws": [
            "ClassNotFoundException"
        ]
    }, 
    "java.awt.geom.Line2D.intersectsLine(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateNCharacterStream(String, Reader, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Reader", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Component.remove(MenuComponent)": {
        "args": [
            "MenuComponent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.hasWaiters()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalMonitorStateException"
        ], 
        "throws": []
    }, 
    "java.awt.MediaTracker.removeImage(Image, int, int, int)": {
        "args": [
            "Image", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.plusSeconds(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.TimeZone.observesDaylightTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.RowId.hashCode()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentNavigableMap.subMap(K, boolean, K, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K", 
            "boolean", 
            "K", 
            "boolean"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandleInfo.isVarArgs()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.readFloat()": {
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.event.InputMethodEvent.getCaret()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.tryLock()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SecureRandom.next(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataOutput.writeChar(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Calendar.setTimeOfDay(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalUnit.between(Temporal, Temporal)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Temporal", 
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.zip.ZipFile.stream()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.FileChannel.lock()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ClosedChannelException", 
            "AsynchronousCloseException", 
            "FileLockInterruptionException", 
            "OverlappingFileLockException", 
            "NonWritableChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Properties.propertyNames()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.lang.Character.getDirectionality(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeMap.higherEntry(K)": {
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.MulticastChannel.close()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Collections.shuffle(List)": {
        "args": [
            "List"
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.function.DoublePredicate.test(double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.writeByte(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.computeIfPresent(K, BiFunction)": {
        "args": [
            "K", 
            "BiFunction"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.text.StringCharacterIterator.getIndex()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.computeIfAbsent(K, Function)": {
        "args": [
            "K", 
            "Function"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.FilteredImageSource.startProduction(ImageConsumer)": {
        "args": [
            "ImageConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.applyToEitherAsync(CompletionStage, Function)": {
        "args": [
            "CompletionStage", 
            "Function"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.ResponseCache.get(URI, String, Map)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "URI", 
            "String", 
            "Map"
        ], 
        "@throws": [
            "IOException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.charset.Charset.encode(CharBuffer)": {
        "args": [
            "CharBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.CodeSource.getCertificates()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.IntBuffer.order()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MouseInfo.getNumberOfButtons()": {
        "args": [
            ""
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": [
            "HeadlessException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicMarkableReference.isMarked()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SplittableRandom.doubles(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.Math.ulp(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.BitSet.valueOf(long[])": {
        "args": [
            "long[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.CallSite.dynamicInvoker()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextArea.replaceRange(String, int, int)": {
        "args": [
            "String", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Arc2D.getBounds2D()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.PriorityBlockingQueue.drainTo(Collection, int)": {
        "args": [
            "Collection", 
            "int"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.charset.CharsetDecoder.implOnUnmappableCharacter(CodingErrorAction)": {
        "args": [
            "CodingErrorAction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.isSameFile(Path, Path)": {
        "args": [
            "Path", 
            "Path"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.prefs.AbstractPreferences.isRemoved()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZoneOffset.ofHours(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.getPropertyChangeListeners(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.SerializedLambda.getCapturedArgCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.InvalidPathException.getReason()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderContext.getTransform()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.clearWarnings()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.beans.EventSetDescriptor.getAddListenerMethod()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetDragEvent.getTransferable()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InvalidDnDOperationException"
        ], 
        "throws": []
    }, 
    "java.io.PrintStream.println(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.getSchema()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.instrument.Instrumentation.retransformClasses(Class[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Class[]"
        ], 
        "@throws": [
            "UnmodifiableClassException", 
            "UnsupportedOperationException", 
            "ClassFormatError", 
            "NoClassDefFoundError", 
            "UnsupportedClassVersionError", 
            "ClassCircularityError", 
            "LinkageError", 
            "NullPointerException"
        ], 
        "throws": [
            "UnmodifiableClassException"
        ]
    }, 
    "java.rmi.registry.Registry.list()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "RemoteException", 
            "AccessException"
        ], 
        "throws": [
            "RemoteException", 
            "AccessException"
        ]
    }, 
    "java.nio.file.spi.FileSystemProvider.newAsynchronousFileChannel(Path, Set, ExecutorService, FileAttribute[])": {
        "args": [
            "Path", 
            "Set", 
            "ExecutorService", 
            "FileAttribute[]"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Vector.subList(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.file.FileVisitor.visitFileFailed(T, IOException)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "IOException"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.font.TextLayout.getLogicalHighlightShape(int, int, Rectangle2D)": {
        "args": [
            "int", 
            "int", 
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Set.containsAll(Collection)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Collection"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.cert.CertPathChecker.check(Certificate)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Certificate"
        ], 
        "@throws": [
            "CertPathValidatorException"
        ], 
        "throws": [
            "CertPathValidatorException"
        ]
    }, 
    "java.awt.print.PrinterJob.print(PrintRequestAttributeSet)": {
        "args": [
            "PrintRequestAttributeSet"
        ], 
        "@throws": [
            "PrinterException"
        ], 
        "throws": [
            "PrinterException"
        ]
    }, 
    "java.sql.PreparedStatement.setBlob(int, InputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "InputStream"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.zone.ZoneOffsetTransition.getDateTimeBefore()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.applyResourceBundle(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.format(double, StringBuffer, FieldPosition)": {
        "args": [
            "double", 
            "StringBuffer", 
            "FieldPosition"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.Integer.intValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setCharacterStream(String, Reader)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Reader"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.cert.X509CertSelector.getSubjectAsString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.getSubjectAlternativeNames()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.dropArguments(MethodHandle, int, Class[])": {
        "args": [
            "MethodHandle", 
            "int", 
            "Class[]"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.locks.Lock.lock()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongArray.decrementAndGet(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.HttpURLConnection.getInstanceFollowRedirects()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Float.toString(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StackTraceElement.getLineNumber()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.BasicPermission.getActions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.interfaces.RSAMultiPrimePrivateCrtKey.getOtherPrimeInfo()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Byte.hashCode(byte)": {
        "args": [
            "byte"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayList.addAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.fill(int[], int)": {
        "args": [
            "int[]", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Timestamp.valueOf(LocalDateTime)": {
        "args": [
            "LocalDateTime"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.text.Format.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.setExecutable(boolean, boolean)": {
        "args": [
            "boolean", 
            "boolean"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateNCharacterStream(int, Reader)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Reader"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.LocalDate.withYear(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseDate.minus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.WeakHashMap.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Package.getAnnotationsByType(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.Time.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.negate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicStampedReference.get(int[])": {
        "args": [
            "int[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSourceEvent.getX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistDate.atTime(LocalTime)": {
        "args": [
            "LocalTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Map.replace(K, V)": {
        "args": [
            "K", 
            "V"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.MessageDigestSpi.engineUpdate(ByteBuffer)": {
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.removeNodeSpi()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "BackingStoreException"
        ], 
        "throws": [
            "BackingStoreException"
        ]
    }, 
    "java.awt.Font.isBold()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.padNext(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Dimension.setSize(Dimension)": {
        "args": [
            "Dimension"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.name()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ListPeer.getMinimumSize(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.Chronology.getId()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.applet.Applet.getImage(URL, String)": {
        "args": [
            "URL", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.AclEntry.build()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadLocalRandom.current()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collectors.minBy(Comparator)": {
        "args": [
            "Comparator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.toUpperCase()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setObject(String, Object, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Object", 
            "int", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.cert.PKIXCertPathChecker.isForwardCheckingSupported()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateAsciiStream(int, InputStream, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "InputStream", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.DirectColorModel.getDataElements(int, Object)": {
        "args": [
            "int", 
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "ArrayIndexOutOfBoundsException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.security.cert.CertPathValidator.getInstance(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "NoSuchProviderException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "NoSuchAlgorithmException", 
            "NoSuchProviderException"
        ]
    }, 
    "java.time.temporal.ValueRange.checkValidValue(long, TemporalField)": {
        "args": [
            "long", 
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.InputEvent.consume()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.lookupModes()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ResourceBundle.getFallbackLocale(String, Locale)": {
        "args": [
            "String", 
            "Locale"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.contains(double, double, double, double)": {
        "args": [
            "double", 
            "double", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.removeHierarchyListener(HierarchyListener)": {
        "args": [
            "HierarchyListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Ellipse2D.contains(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.WeekFields.dayOfWeek()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXRevocationChecker.setOcspResponses(Map)": {
        "args": [
            "Map"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.getShort(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkPropertiesAccess()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.Vector.toArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.add(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.Timer.schedule(TimerTask, Date, long)": {
        "args": [
            "TimerTask", 
            "Date", 
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.color.ICC_Profile.getData()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.PrinterJob.setPrintable(Printable)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Printable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.append(PathIterator, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "PathIterator", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.plus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.FontMetrics.getAscent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.parallelSort(short[])": {
        "args": [
            "short[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.toUnsignedString(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsStoredProcedures()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.FormatFlagsConversionMismatchException.getFlags()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneOffsetTransition.getOffsetAfter()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.BiPredicate.negate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistDate.now(Clock)": {
        "args": [
            "Clock"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.Era.isSupported(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.FileChannel.read(ByteBuffer, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer", 
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NonReadableChannelException", 
            "ClosedChannelException", 
            "AsynchronousCloseException", 
            "ClosedByInterruptException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.SimpleTimeZone.setEndRule(int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.ScrollPanePeer.setUnitIncrement(Adjustable, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Adjustable", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PolicyQualifierInfo.getPolicyQualifierId()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.registry.Registry.unbind(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "NotBoundException", 
            "RemoteException", 
            "AccessException", 
            "NullPointerException"
        ], 
        "throws": [
            "RemoteException", 
            "NotBoundException", 
            "AccessException"
        ]
    }, 
    "java.util.Random.nextBytes(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.AccessibleObject.getDeclaredAnnotationsByType(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.rmi.server.RemoteCall.getInputStream()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.Time.getDay()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Spliterators.characteristics()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.getDayOfWeek()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Constructor.getModifiers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getFocusListeners()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseChronology.getCalendarType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getVersionColumns(String, String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String", 
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.Path2D.contains(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.LineMetrics.getLeading()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DragSource.getDefaultDragSource()": {
        "args": [
            ""
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.descendingKeySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Compiler.enable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.setParameters(Vector)": {
        "args": [
            "Vector"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.CollationKey.getSourceString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintStream.print(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ChoicePeer.select(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ClassLoader.getSystemResource(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.setLocationByPlatform(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "IllegalComponentStateException"
        ], 
        "throws": []
    }, 
    "java.security.UnresolvedPermission.newPermissionCollection()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Bidi.createLineBidi(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLong.floatValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.UserDefinedFileAttributeView.delete(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.AlgorithmParameterGenerator.generateParameters()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Path.getRoot()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Dialog.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.copyOfRange(float[], int, int)": {
        "args": [
            "float[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.Pipe.sink()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.forEachOrdered(DoubleConsumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DoubleConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Boolean.logicalXor(boolean, boolean)": {
        "args": [
            "boolean", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Button.getAccessibleContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.capacity()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Map.getOrDefault(Object, V)": {
        "args": [
            "Object", 
            "V"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.getCharacterStream(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.SampleModel.createDataBuffer()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.logrb(Level, String, String, ResourceBundle, String, Object[])": {
        "args": [
            "Level", 
            "String", 
            "String", 
            "ResourceBundle", 
            "String", 
            "Object[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.InputMethodEvent.isConsumed()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AccessController.doPrivileged(PrivilegedExceptionAction, AccessControlContext)": {
        "args": [
            "PrivilegedExceptionAction", 
            "AccessControlContext"
        ], 
        "@throws": [
            "PrivilegedActionException", 
            "NullPointerException"
        ], 
        "throws": [
            "PrivilegedActionException"
        ]
    }, 
    "java.util.PriorityQueue.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.mouseDrag(Event, int, int)": {
        "args": [
            "Event", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyPair.getPublic()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.setSample(int, int, int, int, DataBuffer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.List.containsAll(Collection)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Collection"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.Array.getResultSet(long, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.reflect.GenericArrayType.getGenericComponentType()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "TypeNotPresentException", 
            "MalformedParameterizedTypeException"
        ], 
        "throws": []
    }, 
    "java.lang.StringBuilder.delete(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetDragEvent.getSourceActions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.RectangularShape.getMaxY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getTimestamp(int, Calendar)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Calendar"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.ObjectOutputStream.writeFields()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException", 
            "NotActiveException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.function.LongUnaryOperator.andThen(LongUnaryOperator)": {
        "args": [
            "LongUnaryOperator"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDate.minus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetTime.isSupported(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.ServerSocket.getInetAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.binarySearch(float[], int, int, float)": {
        "args": [
            "float[]", 
            "int", 
            "int", 
            "float"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.font.TextHitInfo.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Desktop.open(File)": {
        "args": [
            "File"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "UnsupportedOperationException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.invoke.MethodHandles.unreflectSetter(Field)": {
        "args": [
            "Field"
        ], 
        "@throws": [
            "IllegalAccessException", 
            "NullPointerException"
        ], 
        "throws": [
            "IllegalAccessException"
        ]
    }, 
    "java.sql.CallableStatement.getURL(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.BlockingDeque.takeLast()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.Collections.singleton(T)": {
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getTileGridXOffset()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.inForkJoinPool()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.LogRecord.getMillis()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Boolean.toString(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyEditorSupport.removePropertyChangeListener(PropertyChangeListener)": {
        "args": [
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImage.getSources()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TimeZone.getDisplayName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyFactory.getAlgorithm()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.setIssuer(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.MultiPixelPackedSampleModel.getTransferType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.Charset.encode(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ExecutorService.isTerminated()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LongSummaryStatistics.getMax()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ArrayBlockingQueue.spliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.setSource(Object, int)": {
        "args": [
            "Object", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.disable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SocketChannel.isConnected()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.InetAddress.getHostAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextArea.replaceText(String, int, int)": {
        "args": [
            "String", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.removeParameters()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.Naming.list(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "MalformedURLException", 
            "RemoteException"
        ], 
        "throws": [
            "RemoteException", 
            "MalformedURLException"
        ]
    }, 
    "java.awt.image.DataBuffer.getOffsets()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Class.getFields()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.lang.reflect.Executable.getParameterTypes()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Period.getYears()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AuthProvider.login(Subject, CallbackHandler)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Subject", 
            "CallbackHandler"
        ], 
        "@throws": [
            "LoginException", 
            "SecurityException"
        ], 
        "throws": [
            "LoginException"
        ]
    }, 
    "java.util.concurrent.CopyOnWriteArraySet.contains(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.VolatileImage.validate(GraphicsConfiguration)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "GraphicsConfiguration"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoPeriod.subtractFrom(Temporal)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Temporal"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.CheckboxPeer.setCheckboxGroup(CheckboxGroup)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CheckboxGroup"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SeekableByteChannel.size()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.management.OperatingSystemMXBean.getArch()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.applet.Applet.isActive()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.AbstractExecutorService.newTaskFor(Callable)": {
        "args": [
            "Callable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.DosFileAttributeView.setReadOnly(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.StreamTokenizer.quoteChar(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.plusYears(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.getLong(String, long)": {
        "args": [
            "String", 
            "long"
        ], 
        "@throws": [
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.ClassLoader.getResource(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Adjustable.getBlockIncrement()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseChronology.dateEpochDay(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.getFontName(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setObject(String, Object, SQLType)": {
        "args": [
            "String", 
            "Object", 
            "SQLType"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.MenuComponent.isAccessibleChildSelected(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ScheduledThreadPoolExecutor.submit(Callable)": {
        "args": [
            "Callable"
        ], 
        "@throws": [
            "RejectedExecutionException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.net.InetAddress.getByAddress(String, byte[])": {
        "args": [
            "String", 
            "byte[]"
        ], 
        "@throws": [
            "UnknownHostException"
        ], 
        "throws": [
            "UnknownHostException"
        ]
    }, 
    "java.awt.font.GlyphVector.getGlyphCode(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.image.DataBufferFloat.getData(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RemoteObject.toStub(Remote)": {
        "args": [
            "Remote"
        ], 
        "@throws": [
            "NoSuchObjectException"
        ], 
        "throws": [
            "NoSuchObjectException"
        ]
    }, 
    "java.util.function.DoubleUnaryOperator.applyAsDouble(double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.PriorityBlockingQueue.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.sync()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "BackingStoreException", 
            "IllegalStateException"
        ], 
        "throws": [
            "BackingStoreException"
        ]
    }, 
    "java.awt.Rectangle.setLocation(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormatSymbols.setZeroDigit(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.HttpCookie.setHttpOnly(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.instrument.Instrumentation.getInitiatedClasses(ClassLoader)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ClassLoader"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ProcessBuilder.redirectOutput(File)": {
        "args": [
            "File"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.exportSubtree(OutputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "OutputStream"
        ], 
        "@throws": [
            "IOException", 
            "BackingStoreException", 
            "IllegalStateException"
        ], 
        "throws": [
            "IOException", 
            "BackingStoreException"
        ]
    }, 
    "java.security.cert.CollectionCertStoreParameters.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Level.intValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.PreferenceChangeEvent.getKey()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Encoder.writeExpression(Expression)": {
        "args": [
            "Expression"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.isDesignTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.ofEpochSecond(long, int, ZoneOffset)": {
        "args": [
            "long", 
            "int", 
            "ZoneOffset"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.nio.LongBuffer.put(LongBuffer)": {
        "args": [
            "LongBuffer"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "IllegalArgumentException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.awt.image.Raster.getBounds()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.NavigableSet.descendingSet()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.getWaitingThreads()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalMonitorStateException"
        ], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.set(byte, int)": {
        "args": [
            "byte", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.getSubimage(int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "RasterFormatException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingQueue.drainTo(Collection, int)": {
        "args": [
            "Collection", 
            "int"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.runAfterEitherAsync(CompletionStage, Runnable)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CompletionStage", 
            "Runnable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SocketChannel.finishConnect()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NoConnectionPendingException", 
            "ClosedChannelException", 
            "AsynchronousCloseException", 
            "ClosedByInterruptException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.geom.Rectangle2D.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.SimpleDateFormat.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.with(TemporalField, long)": {
        "args": [
            "TemporalField", 
            "long"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.getY2()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.applet.Applet.getAccessibleContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.isBefore(Instant)": {
        "args": [
            "Instant"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.getServiceProvider()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.log1p(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongArray.lazySet(int, long)": {
        "args": [
            "int", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.StringSelection.getTransferData(DataFlavor)": {
        "args": [
            "DataFlavor"
        ], 
        "@throws": [
            "UnsupportedFlavorException", 
            "IOException", 
            "NullPointerException"
        ], 
        "throws": [
            "UnsupportedFlavorException", 
            "IOException"
        ]
    }, 
    "java.awt.peer.CanvasPeer.getAppropriateGraphicsConfiguration(GraphicsConfiguration)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "GraphicsConfiguration"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.FileSystem.supportedFileAttributeViews()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTarget.removeNotify(ComponentPeer)": {
        "args": [
            "ComponentPeer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.owns(ConditionObject)": {
        "args": [
            "ConditionObject"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.plus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.ancestorMoved(HierarchyEvent)": {
        "args": [
            "HierarchyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getFloat(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.invoke.SerializedLambda.getCapturingClass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AlgorithmParameters.getParameterSpec(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "InvalidParameterSpecException"
        ], 
        "throws": [
            "InvalidParameterSpecException"
        ]
    }, 
    "java.awt.image.AffineTransformOp.getPoint2D(Point2D, Point2D)": {
        "args": [
            "Point2D", 
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.addItemListener(ItemListener)": {
        "args": [
            "ItemListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.UnresolvedPermission.getUnresolvedType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.RenderingHints.keySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.MinguoDate.until(ChronoLocalDate)": {
        "args": [
            "ChronoLocalDate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.getDouble()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "BufferUnderflowException"
        ], 
        "throws": []
    }, 
    "java.util.stream.LongStream.noneMatch(LongPredicate)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "LongPredicate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLStreamHandler.toExternalForm(URL)": {
        "args": [
            "URL"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneRules.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.PriorityBlockingQueue.poll()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Inet4Address.isLoopbackAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StrictMath.log10(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicStampedReference.weakCompareAndSet(V, V, int, int)": {
        "args": [
            "V", 
            "V", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadMXBean.getTotalStartedThreadCount()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.setToRotation(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.InetAddress.isMCGlobal()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.min(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "ClassCastException", 
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ScheduledThreadPoolExecutor.setRemoveOnCancelPolicy(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.MessageFormat.parse(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "ParseException"
        ], 
        "throws": [
            "ParseException"
        ]
    }, 
    "java.text.Format.format(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.net.DatagramSocketImpl.create()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.awt.GraphicsConfiguration.createCompatibleImage(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRL.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Dictionary.get(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.MonthDay.now()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasQueuedPredecessors()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Bidi.requiresBidi(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoPeriod.hashCode()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Authenticator.setDefault(Authenticator)": {
        "args": [
            "Authenticator"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.security.cert.CertificateFactory.getInstance(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [
            "CertificateException", 
            "NoSuchProviderException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "CertificateException", 
            "NoSuchProviderException"
        ]
    }, 
    "java.awt.peer.LabelPeer.setText(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.getDirectionality(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DateFormat.parse(String, ParsePosition)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "ParsePosition"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setClob(int, Clob)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Clob"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.time.chrono.ThaiBuddhistChronology.dateEpochDay(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.font.LineMetrics.getUnderlineThickness()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.IsoEra.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.isRepresentationClassReader()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.HttpCookie.domainMatches(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextField.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.DoubleAccumulator.intValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.isDirectory(Path, LinkOption[])": {
        "args": [
            "Path", 
            "LinkOption[]"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.io.DataOutputStream.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentColorModel.coerceData(WritableRaster, boolean)": {
        "args": [
            "WritableRaster", 
            "boolean"
        ], 
        "@throws": [
            "NullPointerException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.math.BigInteger.signum()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Arc2D.getStartPoint()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetListener.dragExit(DropTargetEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DropTargetEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.deleteIfExists(Path)": {
        "args": [
            "Path"
        ], 
        "@throws": [
            "DirectoryNotEmptyException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.im.spi.InputMethodContext.enableClientWindowNotification(InputMethod, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "InputMethod", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingDeque.peek()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Stream.reduce(U, BiFunction, BinaryOperator)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "U", 
            "BiFunction", 
            "BinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuComponent.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.IdentityHashMap.putAll(Map)": {
        "args": [
            "Map"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.temporal.TemporalQueries.precision()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.NetworkInterface.isVirtual()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.setToIdentity()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.print.PrinterJob.getCopies()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Random.ints(long, int, int)": {
        "args": [
            "long", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.Permissions.implies(Permission)": {
        "args": [
            "Permission"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SimpleTimeZone.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getDriverMajorVersion()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.DecimalFormat.toPattern()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.LongStream.builder()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CRLReason.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.longValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TimeZone.getRawOffset()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLEncoder.encode(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.getPoolSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.AnnotatedArrayType.getAnnotatedGenericComponentType()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FlowLayout.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.revokeService(Class, BeanContextServiceProvider, boolean)": {
        "args": [
            "Class", 
            "BeanContextServiceProvider", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendValue(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Files.delete(Path)": {
        "args": [
            "Path"
        ], 
        "@throws": [
            "NoSuchFileException", 
            "DirectoryNotEmptyException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.OffsetDateTime.withOffsetSameInstant(ZoneOffset)": {
        "args": [
            "ZoneOffset"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.rmi.server.RMISocketFactory.getFailureHandler()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ItemSelectable.addItemListener(ItemListener)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ItemListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.addActionListener(ActionListener)": {
        "args": [
            "ActionListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getMaxColumnsInSelect()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.ColorModel.coerceData(WritableRaster, boolean)": {
        "args": [
            "WritableRaster", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FileOutputStream.getChannel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.getNormalizedComponents(Object, float[], int)": {
        "args": [
            "Object", 
            "float[]", 
            "int"
        ], 
        "@throws": [
            "ClassCastException", 
            "ArrayIndexOutOfBoundsException", 
            "ArrayIndexOutOfBoundsException", 
            "UnsupportedOperationException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.AffineTransform.setToQuadrantRotation(int, double, double)": {
        "args": [
            "int", 
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.rowUpdated()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.ObjectOutputStream.writeClassDescriptor(ObjectStreamClass)": {
        "args": [
            "ObjectStreamClass"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.OffsetTime.now(ZoneId)": {
        "args": [
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkSecurityAccess(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Image.setAccelerationPriority(float)": {
        "args": [
            "float"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.Class.getDeclaredConstructors()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.awt.font.FontRenderContext.isAntiAliased()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistChronology.dateYearDay(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.Vector.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinWorkerThread.onTermination(Throwable)": {
        "args": [
            "Throwable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.getInstance(TimeZone)": {
        "args": [
            "TimeZone"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Semaphore.availablePermits()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.spliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SampleModel.setDataElements(int, int, int, int, Object, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "Object", 
            "DataBuffer"
        ], 
        "@throws": [
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.time.Instant.now(Clock)": {
        "args": [
            "Clock"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.LineNumberReader.setLineNumber(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLStreamHandler.setURL(URL, String, String, int, String, String, String, String, String)": {
        "args": [
            "URL", 
            "String", 
            "String", 
            "int", 
            "String", 
            "String", 
            "String", 
            "String", 
            "String"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.getLongParameter(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.LongAdder.intValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.append(Shape, boolean)": {
        "args": [
            "Shape", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferDouble.getElemDouble(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.BufferedOutputStream.write(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.TextArea.addNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.draw(Graphics2D, float, float)": {
        "args": [
            "Graphics2D", 
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.IntStream.parallel()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Package.getDeclaredAnnotationsByType(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDateTime.toLocalTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.subdivide(CubicCurve2D, CubicCurve2D)": {
        "args": [
            "CubicCurve2D", 
            "CubicCurve2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.next()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.beans.XMLDecoder.setExceptionListener(ExceptionListener)": {
        "args": [
            "ExceptionListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.RectangularShape.getFrame()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Future.get(long, TimeUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "CancellationException", 
            "ExecutionException", 
            "InterruptedException", 
            "TimeoutException"
        ], 
        "throws": [
            "InterruptedException", 
            "ExecutionException", 
            "TimeoutException"
        ]
    }, 
    "java.awt.event.AdjustmentEvent.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.FileStore.supportsFileAttributeView(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Spliterators.iterator(OfDouble)": {
        "args": [
            "OfDouble"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.CharBuffer.order()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.PixelGrabber.getColorModel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImageFilter.setDimensions(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Vector.containsAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.String.split(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "PatternSyntaxException"
        ], 
        "throws": []
    }, 
    "java.awt.datatransfer.SystemFlavorMap.decodeJavaMIMEType(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ImageFilter.setProperties(Hashtable)": {
        "args": [
            "Hashtable"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.getNumberOfDependents()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyPairGenerator.initialize(AlgorithmParameterSpec, SecureRandom)": {
        "args": [
            "AlgorithmParameterSpec", 
            "SecureRandom"
        ], 
        "@throws": [
            "InvalidAlgorithmParameterException"
        ], 
        "throws": [
            "InvalidAlgorithmParameterException"
        ]
    }, 
    "java.lang.ThreadGroup.activeCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AccessControlContext.checkPermission(Permission)": {
        "args": [
            "Permission"
        ], 
        "@throws": [
            "AccessControlException", 
            "NullPointerException"
        ], 
        "throws": [
            "AccessControlException"
        ]
    }, 
    "java.text.SimpleDateFormat.format(Date, StringBuffer, FieldPosition)": {
        "args": [
            "Date", 
            "StringBuffer", 
            "FieldPosition"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.LocalDateTime.of(LocalDate, LocalTime)": {
        "args": [
            "LocalDate", 
            "LocalTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.interfaces.RSAPrivateCrtKey.getPrimeQ()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneRulesProvider.provideRefresh()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ZoneRulesException"
        ], 
        "throws": []
    }, 
    "java.lang.StrictMath.min(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertPathBuilderSpi.engineBuild(CertPathParameters)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CertPathParameters"
        ], 
        "@throws": [
            "CertPathBuilderException", 
            "InvalidAlgorithmParameterException"
        ], 
        "throws": [
            "CertPathBuilderException", 
            "InvalidAlgorithmParameterException"
        ]
    }, 
    "java.awt.Cursor.getType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PolicyQualifierInfo.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedHashMap.forEach(BiConsumer)": {
        "args": [
            "BiConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Optional.isPresent()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahChronology.date(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.lang.StrictMath.min(float, float)": {
        "args": [
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.Introspector.decapitalize(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.slice()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics2D.getFontRenderContext()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Scrollbar.getMinimumAccessibleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Blob.setBytes(long, byte[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "byte[]"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.URI.normalize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.getBounds2D()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintStream.format(Locale, String, Object[])": {
        "args": [
            "Locale", 
            "String", 
            "Object[]"
        ], 
        "@throws": [
            "IllegalFormatException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.DirectColorModel.getDataElements(int[], int, Object)": {
        "args": [
            "int[]", 
            "int", 
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "ArrayIndexOutOfBoundsException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.getService(BeanContextServices, Object, Class, Object)": {
        "args": [
            "BeanContextServices", 
            "Object", 
            "Class", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImageOp.getProperty(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.GridLayout.setVgap(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Integer.doubleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Container.add(String, Component)": {
        "args": [
            "String", 
            "Component"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Locale.getWeight()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkAccess(ThreadGroup)": {
        "args": [
            "ThreadGroup"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.net.MulticastSocket.leaveGroup(SocketAddress, NetworkInterface)": {
        "args": [
            "SocketAddress", 
            "NetworkInterface"
        ], 
        "@throws": [
            "IOException", 
            "SecurityException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.RenderingHints.intKey()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.removeNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.nCopies(int, T)": {
        "args": [
            "int", 
            "T"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.getMonthValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Properties.setProperty(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeMap.pollLastEntry()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.isBefore(ChronoLocalDateTime)": {
        "args": [
            "ChronoLocalDateTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.ChoiceFormat.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MediaTracker.checkAll()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Float.max(float, float)": {
        "args": [
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Choice.getSelectedIndex()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuItem.processEvent(AWTEvent)": {
        "args": [
            "AWTEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics2D.transform(AffineTransform)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Deque.getFirst()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.util.Timer.scheduleAtFixedRate(TimerTask, long, long)": {
        "args": [
            "TimerTask", 
            "long", 
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.font.GlyphMetrics.isLigature()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.interfaces.RSAMultiPrimePrivateCrtKey.getPrimeQ()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SocketChannel.read(ByteBuffer[])": {
        "args": [
            "ByteBuffer[]"
        ], 
        "@throws": [
            "NotYetConnectedException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.Date.toInstant()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.Container.getAlignmentY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.instrument.Instrumentation.isRedefineClassesSupported()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataOutputStream.writeInt(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.text.CollationElementIterator.previous()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.createImage(ImageProducer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ImageProducer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.ScrollPanePeer.getVScrollbarWidth()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.ZipFile.getInputStream(ZipEntry)": {
        "args": [
            "ZipEntry"
        ], 
        "@throws": [
            "ZipException", 
            "IOException", 
            "IllegalStateException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicReferenceArray.get(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.replaceAll(UnaryOperator)": {
        "args": [
            "UnaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getTime(int, Calendar)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Calendar"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.SocketImpl.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Proxy.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextChildSupport.initializeBeanContextResources()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getLong(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.net.URLConnection.getHeaderFieldDate(String, long)": {
        "args": [
            "String", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.JapaneseChronology.dateYearDay(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.text.SimpleDateFormat.applyPattern(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.RobotPeer.mouseMove(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Rectangle.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Graphics.fillRoundRect(int, int, int, int, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.substring(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.io.ObjectInput.read(byte[], int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.PrintWriter.print(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadLocalRandom.nextFloat()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistDate.getEra()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.CookieStore.add(URI, HttpCookie)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "URI", 
            "HttpCookie"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.logging.Level.parse(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IllegalArgumentException"
        ]
    }, 
    "java.sql.SQLData.readSQL(SQLInput, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "SQLInput", 
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.beans.beancontext.BeanContextMembershipListener.childrenRemoved(BeanContextMembershipEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BeanContextMembershipEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.getNumDataElements()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Executors.newSingleThreadExecutor()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.LongAccumulator.get()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.focusNextComponent(Component)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.MultipleMaster.getNumDesignAxes()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContext.removeBeanContextMembershipListener(BeanContextMembershipListener)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BeanContextMembershipListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXCertPathChecker.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataOutput.writeFloat(float)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "float"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.spec.ECPoint.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.getRequestProperties()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.image.DirectColorModel.getRed(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.AttributedCharacterIterator.getRunStart()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.parse(CharSequence, DateTimeFormatter)": {
        "args": [
            "CharSequence", 
            "DateTimeFormatter"
        ], 
        "@throws": [
            "DateTimeParseException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Rectangle2D.setRect(Rectangle2D)": {
        "args": [
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.toLocalTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.PixelGrabber.getWidth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AccessController.doPrivilegedWithCombiner(PrivilegedExceptionAction)": {
        "args": [
            "PrivilegedExceptionAction"
        ], 
        "@throws": [
            "PrivilegedActionException", 
            "NullPointerException"
        ], 
        "throws": [
            "PrivilegedActionException"
        ]
    }, 
    "java.awt.Graphics2D.fill3DRect(int, int, int, int, boolean)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Double.toString(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistDate.now()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ThreadGroup.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.sort(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.security.cert.PKIXParameters.setExplicitPolicyRequired(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuContainer.remove(MenuComponent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "MenuComponent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.thenCombine(CompletionStage, BiFunction)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CompletionStage", 
            "BiFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.CharSequence.codePoints()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SinglePixelPackedSampleModel.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CyclicBarrier.getParties()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.systemRoot()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.nio.file.Path.getFileName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ClassLoadingMXBean.getUnloadedClassCount()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.validatePendingRemove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.FramePeer.getState()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.RenderingHints.isCompatibleValue(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.acl.Acl.addEntry(Principal, AclEntry)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Principal", 
            "AclEntry"
        ], 
        "@throws": [
            "NotOwnerException"
        ], 
        "throws": [
            "NotOwnerException"
        ]
    }, 
    "java.net.InetSocketAddress.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.PageAttributes.getMedia()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.runAfterBothAsync(CompletionStage, Runnable)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CompletionStage", 
            "Runnable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.JobAttributes.setCopiesToDefault()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.parallelSort(int[], int, int)": {
        "args": [
            "int[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.filterReturnValue(MethodHandle, MethodHandle)": {
        "args": [
            "MethodHandle", 
            "MethodHandle"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.security.cert.X509Certificate.getSigAlgName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Arc2D.getAngleExtent()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.NavigableMap.floorEntry(K)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.rmi.registry.LocateRegistry.getRegistry(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "RemoteException"
        ], 
        "throws": [
            "RemoteException"
        ]
    }, 
    "java.awt.geom.PathIterator.next()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuilder.insert(int, float)": {
        "args": [
            "int", 
            "float"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.toFormat(TemporalQuery)": {
        "args": [
            "TemporalQuery"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.plusWeeks(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.util.regex.Matcher.requireEnd()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXRevocationChecker.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyDescriptor.setPropertyEditorClass(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Inet4Address.getHostAddress()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.StreamSupport.intStream(OfInt, boolean)": {
        "args": [
            "OfInt", 
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintWriter.write(char[])": {
        "args": [
            "char[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextMeasurer.getAdvanceBetween(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousServerSocketChannel.open()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Object.wait(long, int)": {
        "args": [
            "long", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalMonitorStateException", 
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.nio.ShortBuffer.isDirect()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadMXBean.getCurrentThreadUserTime()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadLocalRandom.nextBoolean()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.getAvailableLocales()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextChild.removePropertyChangeListener(String, PropertyChangeListener)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Process.getErrorStream()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.SQLInput.readArray()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Component.focusGained(FocusEvent)": {
        "args": [
            "FocusEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.GenericDeclaration.getTypeParameters()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "GenericSignatureFormatError"
        ], 
        "throws": []
    }, 
    "java.security.SignatureSpi.engineGetParameter(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "InvalidParameterException"
        ], 
        "throws": [
            "InvalidParameterException"
        ]
    }, 
    "java.nio.channels.ServerSocketChannel.bind(SocketAddress)": {
        "args": [
            "SocketAddress"
        ], 
        "@throws": [
            "AlreadyBoundException", 
            "UnsupportedAddressTypeException", 
            "ClosedChannelException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.FileDescriptor.sync()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SyncFailedException"
        ], 
        "throws": [
            "SyncFailedException"
        ]
    }, 
    "java.util.concurrent.DelayQueue.take()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.datatransfer.DataFlavor.isRepresentationClassCharBuffer()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.FileChannel.lock(long, long, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "long", 
            "boolean"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ClosedChannelException", 
            "AsynchronousCloseException", 
            "FileLockInterruptionException", 
            "OverlappingFileLockException", 
            "NonReadableChannelException", 
            "NonWritableChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.await(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.concurrent.locks.AbstractQueuedSynchronizer.awaitNanos(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.sql.ResultSet.getBigDecimal(String, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.reflect.Constructor.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigDecimal.abs(MathContext)": {
        "args": [
            "MathContext"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.rmi.activation.Activatable.exportObject(Remote, ActivationID, int)": {
        "args": [
            "Remote", 
            "ActivationID", 
            "int"
        ], 
        "@throws": [
            "RemoteException", 
            "UnsupportedOperationException"
        ], 
        "throws": [
            "RemoteException"
        ]
    }, 
    "java.awt.Container.doLayout()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.createPackedRaster(DataBuffer, int, int, int, Point)": {
        "args": [
            "DataBuffer", 
            "int", 
            "int", 
            "int", 
            "Point"
        ], 
        "@throws": [
            "RasterFormatException", 
            "IllegalArgumentException", 
            "RasterFormatException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.font.TextHitInfo.getCharIndex()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.AclEntryPermission.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.PKCS12Attribute.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.seek(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.management.RuntimeMXBean.getVmVendor()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.security.cert.X509CRLSelector.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getListeners(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicInteger.addAndGet(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.createCompatibleWritableRaster(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.readChildren(ObjectInputStream)": {
        "args": [
            "ObjectInputStream"
        ], 
        "@throws": [
            "IOException", 
            "ClassNotFoundException"
        ], 
        "throws": [
            "IOException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.security.Security.addProvider(Provider)": {
        "args": [
            "Provider"
        ], 
        "@throws": [
            "NullPointerException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.Random.nextLong()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.remainderUnsigned(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.MemoryNotificationInfo.getUsage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.HttpCookie.setSecure(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.IntUnaryOperator.applyAsInt(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.TreeSet.pollLast()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RescaleOp.getRenderingHints()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.AttributedString.addAttribute(Attribute, Object)": {
        "args": [
            "Attribute", 
            "Object"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Color.getRed()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyChangeSupport.getPropertyChangeListeners(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferFloat.setElemDouble(int, double)": {
        "args": [
            "int", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintWriter.write(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.putDouble(String, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "double"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DropTargetAdapter.dragEnter(DropTargetDragEvent)": {
        "args": [
            "DropTargetDragEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CountDownLatch.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectStreamClass.getField(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXParameters.setInitialPolicies(Set)": {
        "args": [
            "Set"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsColumnAliasing()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.ProcessBuilder.directory(File)": {
        "args": [
            "File"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Float.intBitsToFloat(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistChronology.date(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.list(PrintStream, int)": {
        "args": [
            "PrintStream", 
            "int"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.GraphicsConfiguration.createCompatibleVolatileImage(int, int, ImageCapabilities, int)": {
        "args": [
            "int", 
            "int", 
            "ImageCapabilities", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "AWTException"
        ], 
        "throws": [
            "AWTException"
        ]
    }, 
    "java.awt.image.ColorModel.getTransferType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.CubicCurve2D.getX2()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Optional.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.BreakIterator.getLineInstance(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.SinglePixelPackedSampleModel.getSamples(int, int, int, int, int, int[], DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.PackedColorModel.getMasks()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Collator.setDecomposition(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.io.RandomAccessFile.writeBoolean(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Collections.checkedNavigableMap(NavigableMap, Class, Class)": {
        "args": [
            "NavigableMap", 
            "Class", 
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.acl.Owner.deleteOwner(Principal, Principal)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Principal", 
            "Principal"
        ], 
        "@throws": [
            "NotOwnerException", 
            "LastOwnerException"
        ], 
        "throws": [
            "NotOwnerException", 
            "LastOwnerException"
        ]
    }, 
    "java.awt.geom.Line2D.contains(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.log(LogRecord)": {
        "args": [
            "LogRecord"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PrintWriter.append(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.StampedLock.tryUnlockRead()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Enum.compareTo(E)": {
        "args": [
            "E"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.getLong(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.stream.LongStream.generate(LongSupplier)": {
        "args": [
            "LongSupplier"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DataTruncation.getTransferSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantLock.getHoldCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.minusWeeks(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsMinimumSQLGrammar()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Timer.schedule(TimerTask, long, long)": {
        "args": [
            "TimerTask", 
            "long", 
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ChronoZonedDateTime.minus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.image.DirectColorModel.createCompatibleWritableRaster(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Toolkit.addPropertyChangeListener(String, PropertyChangeListener)": {
        "args": [
            "String", 
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collection.toArray()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Certificate.getPrincipal()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.generate(DoubleSupplier)": {
        "args": [
            "DoubleSupplier"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.RectangularShape.getMinX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyFactory.getInstance(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NoSuchAlgorithmException"
        ], 
        "throws": [
            "NoSuchAlgorithmException"
        ]
    }, 
    "java.awt.geom.RoundRectangle2D.contains(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.registry.Registry.lookup(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "NotBoundException", 
            "RemoteException", 
            "AccessException", 
            "NullPointerException"
        ], 
        "throws": [
            "RemoteException", 
            "NotBoundException", 
            "AccessException"
        ]
    }, 
    "java.lang.StringBuilder.append(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXParameters.isRevocationEnabled()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CountedCompleter.complete(T)": {
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ByteArrayInputStream.read()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AuthProvider.logout()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "LoginException", 
            "SecurityException"
        ], 
        "throws": [
            "LoginException"
        ]
    }, 
    "java.awt.JobAttributes.setMultipleDocumentHandling(MultipleDocumentHandlingType)": {
        "args": [
            "MultipleDocumentHandlingType"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.math.BigDecimal.shortValueExact()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.security.AlgorithmParameterGenerator.init(AlgorithmParameterSpec)": {
        "args": [
            "AlgorithmParameterSpec"
        ], 
        "@throws": [
            "InvalidAlgorithmParameterException"
        ], 
        "throws": [
            "InvalidAlgorithmParameterException"
        ]
    }, 
    "java.util.stream.IntStream.build()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.image.AffineTransformOp.getTransform()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CardLayout.first(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinPool.submit(Runnable, T)": {
        "args": [
            "Runnable", 
            "T"
        ], 
        "@throws": [
            "NullPointerException", 
            "RejectedExecutionException"
        ], 
        "throws": []
    }, 
    "java.awt.color.ICC_Profile.write(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.cert.X509CertSelector.setPolicy(Set)": {
        "args": [
            "Set"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.sql.CallableStatement.setBytes(String, byte[])": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "byte[]"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.logging.LogRecord.setLevel(Level)": {
        "args": [
            "Level"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.Writer.append(CharSequence, int, int)": {
        "args": [
            "CharSequence", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Vector.addAll(int, Collection)": {
        "args": [
            "int", 
            "Collection"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.LinkedHashMap.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.zone.ZoneOffsetTransition.isValidOffset(ZoneOffset)": {
        "args": [
            "ZoneOffset"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.RenderingHints.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.binarySearch(int[], int, int, int)": {
        "args": [
            "int[]", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.security.DigestOutputStream.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.toArray(Object[])": {
        "args": [
            "Object[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.getCurrentServiceSelectors(BeanContextServices, Class)": {
        "args": [
            "BeanContextServices", 
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.MemoryPoolMXBean.getName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.WritableRaster.setDataElements(int, int, Object)": {
        "args": [
            "int", 
            "int", 
            "Object"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.plusHours(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.lang.Float.doubleValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuilder.append(CharSequence, int, int)": {
        "args": [
            "CharSequence", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.security.CodeSource.getLocation()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Enum.finalize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.PageAttributes.setOrientationRequested(OrientationRequestedType)": {
        "args": [
            "OrientationRequestedType"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.TextComponent.getAfterIndex(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.toString(long, int)": {
        "args": [
            "long", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.isFair()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.PosixFilePermissions.toString(Set)": {
        "args": [
            "Set"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.FileTime.compareTo(FileTime)": {
        "args": [
            "FileTime"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Constructor.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.formatTo(TemporalAccessor, Appendable)": {
        "args": [
            "TemporalAccessor", 
            "Appendable"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.lang.Runtime.traceInstructions(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Checkbox.getSelectedObjects()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.offer(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.RejectedExecutionHandler.rejectedExecution(Runnable, ThreadPoolExecutor)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Runnable", 
            "ThreadPoolExecutor"
        ], 
        "@throws": [
            "RejectedExecutionException"
        ], 
        "throws": []
    }, 
    "java.util.NavigableMap.navigableKeySet()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Frame.setOpacity(float)": {
        "args": [
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.LongBuffer.duplicate()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.DataInputStream.skipBytes(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.rmi.activation.ActivationGroup.currentGroupID()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.color.ColorSpace.getMinValue(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.getVisualHighlightShape(TextHitInfo, TextHitInfo)": {
        "args": [
            "TextHitInfo", 
            "TextHitInfo"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.TextStyle.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.SelectionKey.isAcceptable()": {
        "args": [
            ""
        ], 
        "@throws": [
            "CancelledKeyException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.getBigDecimal(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Date.parse(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.charset.IllegalCharsetNameException.getCharsetName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.HashSet.spliterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.RectangularShape.clone()": {
        "args": [
            ""
        ], 
        "@throws": [
            "OutOfMemoryError"
        ], 
        "throws": []
    }, 
    "java.sql.Statement.executeBatch()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLTimeoutException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Base64.decode(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Scanner.hasNext()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.io.DataInput.readLong()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "EOFException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.channels.spi.AbstractInterruptibleChannel.implCloseChannel()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.AbstractCollection.clear()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsOpenStatementsAcrossRollback()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.sql.SQLXML.getString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Locale.getDisplayName(Locale)": {
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Timer.scheduleAtFixedRate(TimerTask, Date, long)": {
        "args": [
            "TimerTask", 
            "Date", 
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "IllegalStateException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.LayoutManager2.addLayoutComponent(Component, Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Component", 
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.toUnsignedString(long, int)": {
        "args": [
            "long", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Wrapper.isWrapperFor(Class)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Class"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.Vector.set(int, E)": {
        "args": [
            "int", 
            "E"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.stream.IntStream.empty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.MenuBar.deleteShortcut(MenuShortcut)": {
        "args": [
            "MenuShortcut"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.BitSet.toByteArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ThreadGroup.checkAccess()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.PageAttributes.setPrintQuality(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CompletionStage.whenCompleteAsync(BiConsumer, Executor)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "BiConsumer", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getTimeDateFunctions()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndSet(T, long)": {
        "args": [
            "T", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.ThreadMXBean.isThreadContentionMonitoringEnabled()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.JobAttributes.getMaxPage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AlgorithmParameterGenerator.getProvider()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Hashtable.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Line2D.ptSegDistSq(Point2D)": {
        "args": [
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuilder.indexOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.fill(float[], float)": {
        "args": [
            "float[]", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.acl.AclEntry.setPrincipal(Principal)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Principal"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Shape.getPathIterator(AffineTransform, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "AffineTransform", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.AttributeView.name()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractQueue.element()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.awt.MultipleGradientPaint.getTransparency()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.addInputMethodListener(InputMethodListener)": {
        "args": [
            "InputMethodListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ClassLoader.getSystemClassLoader()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException", 
            "IllegalStateException", 
            "Error"
        ], 
        "throws": []
    }, 
    "java.net.URLPermission.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.addVetoableChangeListener(VetoableChangeListener)": {
        "args": [
            "VetoableChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.peer.DropTargetContextPeer.getTransferable()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "InvalidDnDOperationException"
        ]
    }, 
    "java.time.chrono.MinguoChronology.resolveDate(Map, ResolverStyle)": {
        "args": [
            "Map", 
            "ResolverStyle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Formatter.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CheckboxGroup.getSelectedCheckbox()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZoneOffset.get(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.AWTEvent.getID()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.addBeanContextMembershipListener(BeanContextMembershipListener)": {
        "args": [
            "BeanContextMembershipListener"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicBoolean.getAndSet(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Dictionary.isEmpty()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.DoubleBuffer.put(double[])": {
        "args": [
            "double[]"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.awt.ScrollPane.paramString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.AdjustmentEvent.getAdjustable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ShortBuffer.array()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ReadOnlyBufferException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.io.File.lastModified()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.text.CollationElementIterator.getMaxExpansion(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.whenCompleteAsync(BiConsumer, Executor)": {
        "args": [
            "BiConsumer", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.TransferQueue.getWaitingConsumerCount()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.contains(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.genericMethodType(int, boolean)": {
        "args": [
            "int", 
            "boolean"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.genericMethodType(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.replace(K, V, V)": {
        "args": [
            "K", 
            "V", 
            "V"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderContext.preConcatenateTransform(AffineTransform)": {
        "args": [
            "AffineTransform"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Boolean.parseBoolean(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.CodeSigner.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Math.sqrt(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayDeque.toArray(T[])": {
        "args": [
            "T[]"
        ], 
        "@throws": [
            "ArrayStoreException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Dialog.getModalityType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.postEvent(Event)": {
        "args": [
            "Event"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedQueue.addAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Hashtable.contains(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.TreeSet.subSet(E, E)": {
        "args": [
            "E", 
            "E"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.stream.Stream.filter(Predicate)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Predicate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.getSecurityContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ObjectStreamField.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.EventHandler.create(Class, Object, String, String, String)": {
        "args": [
            "Class", 
            "Object", 
            "String", 
            "String", 
            "String"
        ], 
        "@throws": [
            "NullPointerException", 
            "NullPointerException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.removePropertyChangeListener(String, PropertyChangeListener)": {
        "args": [
            "String", 
            "PropertyChangeListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousSocketChannel.read(ByteBuffer, A, CompletionHandler)": {
        "args": [
            "ByteBuffer", 
            "A", 
            "CompletionHandler"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ReadPendingException", 
            "NotYetConnectedException", 
            "ShutdownChannelGroupException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.DesktopPeer.open(File)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "File"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.DelayQueue.toArray(T[])": {
        "args": [
            "T[]"
        ], 
        "@throws": [
            "ArrayStoreException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.temporal.Temporal.plus(long, TemporalUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.sql.CallableStatement.registerOutParameter(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.BlockingDeque.offerLast(E, long, TimeUnit)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "E", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.awt.image.BufferedImage.setRGB(int, int, int, int, int[], int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "int[]", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.SystemFlavorMap.encodeJavaMIMEType(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.SystemFlavorMap.setNativesForFlavor(DataFlavor, String[])": {
        "args": [
            "DataFlavor", 
            "String[]"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.getBackground()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.getSubType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDateTime.query(TemporalQuery)": {
        "args": [
            "TemporalQuery"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.color.ICC_Profile.getPCSType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingQueue.toArray()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicInteger.getAndAccumulate(int, IntBinaryOperator)": {
        "args": [
            "int", 
            "IntBinaryOperator"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.RenderingHints.get(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.security.Timestamp.getSignerCertPath()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DecimalStyle.withZeroDigit(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.plusWeeks(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.applet.Applet.getLocale()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AlphaComposite.getInstance(int, float)": {
        "args": [
            "int", 
            "float"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.event.InvocationEvent.getWhen()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.absolutePath()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.Future.cancel(boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.CheckboxMenuItem.addNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.getType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.StringBufferInputStream.skip(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentSampleModel.createSubsetSampleModel(int[])": {
        "args": [
            "int[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ResourceBundle.getTimeToLive(String, Locale)": {
        "args": [
            "String", 
            "Locale"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.text.ChoiceFormat.format(long, StringBuffer, FieldPosition)": {
        "args": [
            "long", 
            "StringBuffer", 
            "FieldPosition"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Robot.getAutoDelay()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.FloatBuffer.put(FloatBuffer)": {
        "args": [
            "FloatBuffer"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "IllegalArgumentException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.getClob(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.Panel.getAccessibleRole()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Parameter.getType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.Operation.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.IntPredicate.and(IntPredicate)": {
        "args": [
            "IntPredicate"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.MenuComponent.processEvent(AWTEvent)": {
        "args": [
            "AWTEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.DefaultKeyboardFocusManager.focusNextComponent(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.set(T, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "T", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.MouseWheelEvent.getWheelRotation()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.TrayIconPeer.setToolTip(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Path.toAbsolutePath()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IOError", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.fill(Object[], Object)": {
        "args": [
            "Object[]", 
            "Object"
        ], 
        "@throws": [
            "ArrayStoreException"
        ], 
        "throws": []
    }, 
    "java.awt.image.VolatileImage.getGraphics()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.contains(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.removeMouseMotionListener(MouseMotionListener)": {
        "args": [
            "MouseMotionListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.compareAndSetState(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FileInputStream.read()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.Socket.isClosed()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.valueOf(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.Manifest.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.getGreen(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "ArrayIndexOutOfBoundsException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.getYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.thenRunAsync(Runnable, Executor)": {
        "args": [
            "Runnable", 
            "Executor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.insert(int, CharSequence, int, int)": {
        "args": [
            "int", 
            "CharSequence", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLongFieldUpdater.incrementAndGet(T)": {
        "args": [
            "T"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ThreadPoolExecutor.shutdownNow()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.util.Currency.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collectors.joining(CharSequence, CharSequence, CharSequence)": {
        "args": [
            "CharSequence", 
            "CharSequence", 
            "CharSequence"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.WritableRaster.setSample(int, int, int, double)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "double"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.Channels.newInputStream(AsynchronousByteChannel)": {
        "args": [
            "AsynchronousByteChannel"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.AccessibleObject.getDeclaredAnnotation(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.Security.getAlgorithmProperty(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.getCertificateChain()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.DoubleStream.mapToLong(DoubleToLongFunction)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "DoubleToLongFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateArray(int, Array)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Array"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.channels.SocketChannel.read(ByteBuffer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [
            "NotYetConnectedException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.KeyboardFocusManager.removeKeyEventPostProcessor(KeyEventPostProcessor)": {
        "args": [
            "KeyEventPostProcessor"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.jar.Manifest.getMainAttributes()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.DataBufferUShort.getBankData()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.SignatureSpi.clone()": {
        "args": [
            ""
        ], 
        "@throws": [
            "CloneNotSupportedException"
        ], 
        "throws": [
            "CloneNotSupportedException"
        ]
    }, 
    "java.nio.file.attribute.PosixFileAttributes.permissions()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.FileVisitResult.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImageFilter.setColorModel(ColorModel)": {
        "args": [
            "ColorModel"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsSavepoints()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.ProcessBuilder.redirectInput(File)": {
        "args": [
            "File"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.InputStream.mark(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.indexOf(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.OutputStreamWriter.write(String, int, int)": {
        "args": [
            "String", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.Duration.parse(CharSequence)": {
        "args": [
            "CharSequence"
        ], 
        "@throws": [
            "DateTimeParseException"
        ], 
        "throws": []
    }, 
    "java.awt.Window.isAlwaysOnTop()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.PrimitiveIterator.forEachRemaining(IntConsumer)": {
        "args": [
            "IntConsumer"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.AbstractCollection.contains(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Component.getPreferredSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.AclEntry.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.FeatureDescriptor.setDisplayName(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Font.getFont(String, Font)": {
        "args": [
            "String", 
            "Font"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Path2D.contains(Rectangle2D)": {
        "args": [
            "Rectangle2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.toBinaryString(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.BufferedReader.reset()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.rmi.registry.LocateRegistry.getRegistry()": {
        "args": [
            ""
        ], 
        "@throws": [
            "RemoteException"
        ], 
        "throws": [
            "RemoteException"
        ]
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.getHoldCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ResourceBundle.clearCache()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.getNativeContainer(Component)": {
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinWorkerThread.getPool()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.InflaterOutputStream.flush()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.io.PushbackInputStream.available()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.Instant.isSupported(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.color.ICC_ColorSpace.fromCIEXYZ(float[])": {
        "args": [
            "float[]"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.Character.hashCode(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.MemoryHandler.close()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.time.Year.isValidMonthDay(MonthDay)": {
        "args": [
            "MonthDay"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStoreSpi.engineAliases()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.BatchUpdateException.getUpdateCounts()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CRL.getType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.shuffle(List, Random)": {
        "args": [
            "List", 
            "Random"
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.net.URLConnection.setDoOutput(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.io.CharArrayReader.ready()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Point.getLocation()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.AWTEventMulticaster.add(MouseListener, MouseListener)": {
        "args": [
            "MouseListener", 
            "MouseListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.math.BigInteger.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.datatransfer.DataFlavor.getDefaultRepresentationClass()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Scrollbar.getUnitIncrement()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Scrollbar.setCurrentAccessibleValue(Number)": {
        "args": [
            "Number"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.unmodifiableSet(Set)": {
        "args": [
            "Set"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.toFormatter()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistChronology.zonedDateTime(Instant, ZoneId)": {
        "args": [
            "Instant", 
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URL.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatterBuilder.appendChronologyText(TextStyle)": {
        "args": [
            "TextStyle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.getLogicalRangesForVisualSelection(TextHitInfo, TextHitInfo)": {
        "args": [
            "TextHitInfo", 
            "TextHitInfo"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicLong.intValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.insert(int, char[], int, int)": {
        "args": [
            "int", 
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "StringIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.beans.FeatureDescriptor.isPreferred()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoLocalDate.until(ChronoLocalDate)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ChronoLocalDate"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.parameterList()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Normalizer.normalize(CharSequence, Form)": {
        "args": [
            "CharSequence", 
            "Form"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.ShortBuffer.asReadOnlyBuffer()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.LongAccumulator.floatValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.TemporalAdjusters.firstDayOfYear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.ArrayList.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Arrays.parallelSort(float[], int, int)": {
        "args": [
            "float[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.Rectangle2D.getX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.rollback(Savepoint)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Savepoint"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.CharArrayReader.skip(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Long.divideUnsigned(long, long)": {
        "args": [
            "long", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.setIconImages(List)": {
        "args": [
            "List"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.LockInfo.getClassName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.InvalidPathException.getMessage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.DayOfWeek.minus(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getColumns(String, String, String, String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "String", 
            "String", 
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.MenuItem.enableEvents(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetDateTime.getMinute()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SinglePixelPackedSampleModel.createCompatibleSampleModel(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Rectangle.union(Rectangle)": {
        "args": [
            "Rectangle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.LongStream.filter(LongPredicate)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "LongPredicate"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRLEntry.getEncoded()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "CRLException"
        ], 
        "throws": [
            "CRLException"
        ]
    }, 
    "java.awt.image.LookupOp.filter(Raster, WritableRaster)": {
        "args": [
            "Raster", 
            "WritableRaster"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.time.YearMonth.atEndOfMonth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.StringBuffer.insert(int, char)": {
        "args": [
            "int", 
            "char"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Checkbox.getAccessibleActionCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationGroupID.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.color.ColorSpace.getInstance(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Locale.getDisplayVariant()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.SplittableRandom.longs()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.SynchronousQueue.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Window.getBufferStrategy()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CRLReason.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.RuleBasedCollator.getCollationKey(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLConnection.setDefaultAllowUserInteraction(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DateTimeFormatter.getDecimalStyle()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.Predicate.negate()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getY()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousServerSocketChannel.accept()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "AcceptPendingException", 
            "NotYetBoundException"
        ], 
        "throws": []
    }, 
    "java.nio.charset.CharsetEncoder.maxBytesPerChar()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.runAfterBothAsync(CompletionStage, Runnable)": {
        "args": [
            "CompletionStage", 
            "Runnable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedBlockingDeque.element()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.util.TreeMap.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ForkJoinTask.invoke()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Provider.supportsParameter(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "InvalidParameterException"
        ], 
        "throws": []
    }, 
    "java.awt.image.BufferedImage.createGraphics()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isTitleCase(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.management.RuntimeMXBean.getName()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Area.getBounds()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.PropertyChangeListener.propertyChange(PropertyChangeEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "PropertyChangeEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.stream.Collectors.summarizingLong(ToLongFunction)": {
        "args": [
            "ToLongFunction"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.addAll(Collection)": {
        "args": [
            "Collection"
        ], 
        "@throws": [
            "NullPointerException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.CardLayout.preferredLayoutSize(Container)": {
        "args": [
            "Container"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ByteArrayOutputStream.writeTo(OutputStream)": {
        "args": [
            "OutputStream"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Locale.stripExtensions()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Parameter.getAnnotatedType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RenderedImage.getMinX()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.CharacterIterator.first()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.format.DecimalStyle.getZeroDigit()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.LinkedList.getFirst()": {
        "args": [
            ""
        ], 
        "@throws": [
            "NoSuchElementException"
        ], 
        "throws": []
    }, 
    "java.util.Locale.getDisplayLanguage()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Constructor.getParameterAnnotations()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.supportsAlterTableWithDropColumn()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.stream.LongStream.concat(LongStream, LongStream)": {
        "args": [
            "LongStream", 
            "LongStream"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentHashMap.forEachKey(long, Consumer)": {
        "args": [
            "long", 
            "Consumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Deque.contains(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.PrintWriter.write(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Connection.getTransactionIsolation()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.CubicCurve2D.getFlatness(double[], int)": {
        "args": [
            "double[]", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.UID.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.ClassLoader.getParent()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.getCurrentServiceSelectors(Class)": {
        "args": [
            "Class"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.isWriteLocked()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.CollationKey.compareTo(CollationKey)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CollationKey"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.iterator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousSocketChannel.shutdownOutput()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "NotYetConnectedException", 
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.security.cert.CertPathValidator.getAlgorithm()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.LocalDate.getDayOfMonth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.dnd.DropTarget.initializeAutoscrolling(Point)": {
        "args": [
            "Point"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.BufferedImageFilter.setPixels(int, int, int, int, ColorModel, int[], int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int", 
            "ColorModel", 
            "int[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.image.IndexColorModel.getDataElements(int[], int, Object)": {
        "args": [
            "int[]", 
            "int", 
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "ArrayIndexOutOfBoundsException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.nio.file.spi.FileSystemProvider.getFileSystem(URI)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "URI"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "FileSystemNotFoundException", 
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.lang.management.MonitorInfo.getLockedStackFrame()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.addNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.ValueRange.of(long, long, long, long)": {
        "args": [
            "long", 
            "long", 
            "long", 
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.io.ObjectStreamField.setOffset(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Date.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.Socket.getChannel()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistChronology.date(Era, int, int, int)": {
        "args": [
            "Era", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "DateTimeException", 
            "ClassCastException"
        ], 
        "throws": []
    }, 
    "java.awt.Event.controlDown()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.fine(Supplier)": {
        "args": [
            "Supplier"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.Buffer.clear()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.CharArrayReader.mark(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.EnumMap.size()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TextLayout.getPixelBounds(FontRenderContext, float, float)": {
        "args": [
            "FontRenderContext", 
            "float", 
            "float"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.BufferedOutputStream.flush()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.image.ShortLookupTable.getTable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FileOutputStream.write(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.channels.SocketChannel.getRemoteAddress()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ClosedChannelException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.channels.DatagramChannel.receive(ByteBuffer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer"
        ], 
        "@throws": [
            "ClosedChannelException", 
            "AsynchronousCloseException", 
            "ClosedByInterruptException", 
            "SecurityException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Container.applyComponentOrientation(ComponentOrientation)": {
        "args": [
            "ComponentOrientation"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistChronology.range(ChronoField)": {
        "args": [
            "ChronoField"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Scanner.hasNextLong()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.lang.management.MemoryPoolMXBean.getCollectionUsage()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.AccessibleObject.setAccessible(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": [
            "SecurityException"
        ]
    }, 
    "java.time.chrono.Chronology.getAvailableChronologies()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.OutputStreamWriter.close()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.net.InetAddress.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.NavigableMap.higherEntry(K)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.Future.get()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "CancellationException", 
            "ExecutionException", 
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException", 
            "ExecutionException"
        ]
    }, 
    "java.awt.geom.Point2D.distance(Point2D)": {
        "args": [
            "Point2D"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.GregorianCalendar.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ColorModel.getBlue(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "ClassCastException", 
            "ArrayIndexOutOfBoundsException", 
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.time.chrono.Chronology.resolveDate(Map, ResolverStyle)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Map", 
            "ResolverStyle"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.SecondaryLoop.exit()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.Inflater.finalize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Clob.setString(long, String, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "long", 
            "String", 
            "int", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.LongBuffer.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.getChars(int, int, char[], int)": {
        "args": [
            "int", 
            "int", 
            "char[]", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.sql.SQLInput.readBytes()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.font.GlyphVector.getGlyphLogicalBounds(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.parallelPrefix(T[], BinaryOperator)": {
        "args": [
            "T[]", 
            "BinaryOperator"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.File.renameTo(File)": {
        "args": [
            "File"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.Collections.unmodifiableNavigableMap(NavigableMap)": {
        "args": [
            "NavigableMap"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.CharacterIterator.next()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Duration.isZero()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.color.ICC_ProfileGray.getGamma()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ProfileDataException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServices.getCurrentServiceClasses()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.ECFieldF2m.getMidTermsOfReductionPolynomial()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Collator.getAvailableLocales()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CountedCompleter.onExceptionalCompletion(Throwable, CountedCompleter)": {
        "args": [
            "Throwable", 
            "CountedCompleter"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.minus(long, TemporalUnit)": {
        "args": [
            "long", 
            "TemporalUnit"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.zone.ZoneRulesProvider.refresh()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ZoneRulesException"
        ], 
        "throws": []
    }, 
    "java.awt.image.renderable.ContextualRenderedImageFactory.create(RenderContext, ParameterBlock)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "RenderContext", 
            "ParameterBlock"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.WatchService.take()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ClosedWatchServiceException", 
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.stream.LongStream.forEachOrdered(LongConsumer)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "LongConsumer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.MessageFormat.clone()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.FutureTask.setException(Throwable)": {
        "args": [
            "Throwable"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.plusNanos(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.ListPeer.add(String, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStore.getProtectionParameters()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.NumberFormat.getCurrencyInstance()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.spi.InputMethodContext.createInputMethodWindow(String, boolean)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "boolean"
        ], 
        "@throws": [
            "HeadlessException"
        ], 
        "throws": []
    }, 
    "java.nio.file.Files.newDirectoryStream(Path, String)": {
        "args": [
            "Path", 
            "String"
        ], 
        "@throws": [
            "PatternSyntaxException", 
            "NotDirectoryException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.time.chrono.ThaiBuddhistDate.toEpochDay()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setSQLXML(String, SQLXML)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "SQLXML"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.io.FilterWriter.close()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.pollLast()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodType.returnType()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.OffsetTime.ofInstant(Instant, ZoneId)": {
        "args": [
            "Instant", 
            "ZoneId"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Time.toInstant()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousChannelGroup.withCachedThreadPool(ExecutorService, int)": {
        "args": [
            "ExecutorService", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.font.TextLayout.getCharacterCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.im.spi.InputMethodDescriptor.getInputMethodDisplayName(Locale, Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Locale", 
            "Locale"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.getFontPeer(String, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Transparency.getTransparency()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.RemoteRef.remoteHashCode()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.GregorianCalendar.getWeekYear()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.sql.DatabaseMetaData.getStringFunctions()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.StringBuffer.codePointBefore(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AlgorithmConstraints.permits(Set, Key)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Set", 
            "Key"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.lang.Thread.activeCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.getDefaultFocusTraversalKeys(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedQueue.offer(E)": {
        "args": [
            "E"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.lang.Character.charCount(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.peer.RobotPeer.keyPress(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.geom.Ellipse2D.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.MulticastSocket.setLoopbackMode(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.lang.management.MemoryPoolMXBean.getUsageThreshold()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.SystemTray.isSupported()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.addHierarchyListener(HierarchyListener)": {
        "args": [
            "HierarchyListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.reshape(int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.LongAccumulator.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.minus(TemporalAmount)": {
        "args": [
            "TemporalAmount"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.Scanner.hasNextBigInteger(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.syncSpi()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "BackingStoreException"
        ], 
        "throws": [
            "BackingStoreException"
        ]
    }, 
    "java.security.Principal.implies(Subject)": {
        "args": [
            "Subject"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.MappedByteBuffer.load()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Menu.getItemCount()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.Path.resolve(Path)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Path"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.channels.ServerSocketChannel.open()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.stream.IntStream.findFirst()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.FilterInputStream.skip(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.KeyboardFocusManager.getPermanentFocusOwner()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.SimpleDateFormat.toLocalizedPattern()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.ByteBuffer.allocate(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Vector.indexOf(Object, int)": {
        "args": [
            "Object", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.security.interfaces.RSAMultiPrimePrivateCrtKey.getPrimeExponentP()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZonedDateTime.minusNanos(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.security.KeyFactory.getInstance(String, Provider)": {
        "args": [
            "String", 
            "Provider"
        ], 
        "@throws": [
            "NoSuchAlgorithmException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "NoSuchAlgorithmException"
        ]
    }, 
    "java.beans.IndexedPropertyDescriptor.setIndexedReadMethod(Method)": {
        "args": [
            "Method"
        ], 
        "@throws": [
            "IntrospectionException"
        ], 
        "throws": [
            "IntrospectionException"
        ]
    }, 
    "java.lang.ProcessBuilder.redirectOutput(Redirect)": {
        "args": [
            "Redirect"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicIntegerFieldUpdater.addAndGet(T, int)": {
        "args": [
            "T", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.SinglePixelPackedSampleModel.createSubsetSampleModel(int[])": {
        "args": [
            "int[]"
        ], 
        "@throws": [
            "RasterFormatException"
        ], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setAsciiStream(int, InputStream, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "InputStream", 
            "long"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.nio.charset.CharsetEncoder.encode(CharBuffer, ByteBuffer, boolean)": {
        "args": [
            "CharBuffer", 
            "ByteBuffer", 
            "boolean"
        ], 
        "@throws": [
            "IllegalStateException", 
            "CoderMalfunctionError"
        ], 
        "throws": []
    }, 
    "java.sql.SQLInput.readTime()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.AffineTransform.getTranslateInstance(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509Certificate.getSubjectAlternativeNames()": {
        "args": [
            ""
        ], 
        "@throws": [
            "CertificateParsingException"
        ], 
        "throws": [
            "CertificateParsingException"
        ]
    }, 
    "java.time.chrono.Chronology.toString()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.File.toPath()": {
        "args": [
            ""
        ], 
        "@throws": [
            "InvalidPathException"
        ], 
        "throws": []
    }, 
    "java.lang.Character.isIdentifierIgnorable(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.function.DoubleSupplier.getAsDouble()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.AttributedCharacterIterator.getName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.getBoolean(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.Executors.callable(PrivilegedExceptionAction)": {
        "args": [
            "PrivilegedExceptionAction"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.TreeMap.subMap(K, K)": {
        "args": [
            "K", 
            "K"
        ], 
        "@throws": [
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.zip.ZipEntry.getCrc()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.flip(FlipContents)": {
        "args": [
            "FlipContents"
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.lang.reflect.Field.getInt(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [
            "IllegalAccessException", 
            "IllegalArgumentException", 
            "NullPointerException", 
            "ExceptionInInitializerError"
        ], 
        "throws": [
            "IllegalArgumentException", 
            "IllegalAccessException"
        ]
    }, 
    "java.io.Externalizable.writeExternal(ObjectOutput)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ObjectOutput"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.event.KeyListener.keyPressed(KeyEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "KeyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.enable()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.spi.CalendarDataProvider.getFirstDayOfWeek(Locale)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Locale"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.zip.ZipEntry.getTime()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.spec.ECParameterSpec.getGenerator()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.ReentrantReadWriteLock.getWaitingThreads(Condition)": {
        "args": [
            "Condition"
        ], 
        "@throws": [
            "IllegalMonitorStateException", 
            "IllegalArgumentException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.DragGestureRecognizer.resetRecognizer()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateBinaryStream(int, InputStream, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "InputStream", 
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.ThreadLocalRandom.nextDouble(double)": {
        "args": [
            "double"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.rmi.server.RemoteServer.getLog()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Type.getTypeName()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setObject(int, Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "Object"
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.lang.ClassLoader.getSystemResourceAsStream(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.ResponseCache.setDefault(ResponseCache)": {
        "args": [
            "ResponseCache"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.math.BigInteger.toString(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahDate.lengthOfMonth()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandles.throwException(Class, Class)": {
        "args": [
            "Class", 
            "Class"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.sql.ResultSet.updateRowId(int, RowId)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "RowId"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.util.concurrent.ForkJoinTask.exec()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.CertPath.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.ByteArrayInputStream.markSupported()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.Raster.getMinX()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.CharBuffer.chars()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RenderedImage.getPropertyNames()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.charAt(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.Shape.contains(double, double)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CRLSelector.addIssuer(X500Principal)": {
        "args": [
            "X500Principal"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.logging.Logger.exiting(String, String)": {
        "args": [
            "String", 
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.LogStream.write(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.LinkedTransferQueue.hasWaitingConsumer()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.MemoryImageSource.newPixels(byte[], ColorModel, int, int)": {
        "args": [
            "byte[]", 
            "ColorModel", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.InflaterInputStream.mark(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.InvocationEvent.dispatch()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Collections.synchronizedSortedSet(SortedSet)": {
        "args": [
            "SortedSet"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TransformAttribute.isIdentity()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.get(TemporalField)": {
        "args": [
            "TemporalField"
        ], 
        "@throws": [
            "DateTimeException", 
            "UnsupportedTemporalTypeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.getX2()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.WeakHashMap.entrySet()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.NumberFormat.setGroupingUsed(boolean)": {
        "args": [
            "boolean"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isDefined(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.ScrollPaneAdjustable.removeAdjustmentListener(AdjustmentListener)": {
        "args": [
            "AdjustmentListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.ValueRange.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AlgorithmParameterGenerator.getInstance(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "NoSuchAlgorithmException"
        ], 
        "throws": [
            "NoSuchAlgorithmException"
        ]
    }, 
    "java.beans.Beans.instantiate(ClassLoader, String, BeanContext)": {
        "args": [
            "ClassLoader", 
            "String", 
            "BeanContext"
        ], 
        "@throws": [
            "ClassNotFoundException", 
            "IOException"
        ], 
        "throws": [
            "IOException", 
            "ClassNotFoundException"
        ]
    }, 
    "java.security.cert.CertificateFactorySpi.engineGenerateCertificates(InputStream)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "InputStream"
        ], 
        "@throws": [
            "CertificateException"
        ], 
        "throws": [
            "CertificateException"
        ]
    }, 
    "java.text.DecimalFormatSymbols.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.FileVisitOption.values()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ThaiBuddhistDate.with(TemporalAdjuster)": {
        "args": [
            "TemporalAdjuster"
        ], 
        "@throws": [
            "DateTimeException", 
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.time.YearMonth.now(Clock)": {
        "args": [
            "Clock"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.IdentityHashMap.remove(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.isEmpty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Double.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.isSupported(TemporalUnit)": {
        "args": [
            "TemporalUnit"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.invoke.MethodHandle.isVarargsCollector()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.PKIXParameters.getPolicyQualifiersRejected()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Character.isDigit(char)": {
        "args": [
            "char"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.interfaces.ECPrivateKey.getS()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.RescaleOp.getOffsets(float[])": {
        "args": [
            "float[]"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahDate.from(TemporalAccessor)": {
        "args": [
            "TemporalAccessor"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.lang.StrictMath.max(double, double)": {
        "args": [
            "double", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.locks.StampedLock.tryWriteLock()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getArray(String)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.image.DataBufferByte.getElem(int, int)": {
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.temporal.ChronoUnit.addTo(R, long)": {
        "args": [
            "R", 
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.PixelGrabber.startGrabbing()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.KeyStoreSpi.engineSetEntry(String, Entry, ProtectionParameter)": {
        "args": [
            "String", 
            "Entry", 
            "ProtectionParameter"
        ], 
        "@throws": [
            "KeyStoreException"
        ], 
        "throws": [
            "KeyStoreException"
        ]
    }, 
    "java.time.zone.ZoneRules.of(ZoneOffset)": {
        "args": [
            "ZoneOffset"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.text.Collator.setStrength(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.AbstractPreferences.putFloat(String, float)": {
        "args": [
            "String", 
            "float"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException", 
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.util.logging.Handler.getFormatter()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.getNString(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.text.DateFormat.getTimeInstance(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentLinkedDeque.peekLast()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.cert.X509CertSelector.addPathToName(int, byte[])": {
        "args": [
            "int", 
            "byte[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.Long.toString(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextSupport.childJustAddedHook(Object, BCSChild)": {
        "args": [
            "Object", 
            "BCSChild"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Runtime.exec(String[])": {
        "args": [
            "String[]"
        ], 
        "@throws": [
            "SecurityException", 
            "IOException", 
            "NullPointerException", 
            "IndexOutOfBoundsException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Date.from(Instant)": {
        "args": [
            "Instant"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.awt.Window.applyResourceBundle(ResourceBundle)": {
        "args": [
            "ResourceBundle"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.font.TransformAttribute.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Properties.getProperty(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.file.attribute.PosixFileAttributeView.setPermissions(Set)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Set"
        ], 
        "@throws": [
            "ClassCastException", 
            "IOException", 
            "SecurityException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.nio.file.LinkOption.valueOf(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.prepareImage(Image, ImageObserver)": {
        "args": [
            "Image", 
            "ImageObserver"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.SynchronousQueue.poll(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException"
        ], 
        "throws": [
            "InterruptedException"
        ]
    }, 
    "java.util.stream.Collector.accumulator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.event.ComponentListener.componentShown(ComponentEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ComponentEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Toolkit.getAWTEventListeners(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.awt.ScrollPane.addNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.FileDialog.getMode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.deselect(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Long.bitCount(long)": {
        "args": [
            "long"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.HijrahDate.now(Clock)": {
        "args": [
            "Clock"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.rmi.server.RemoteStub.setRef(RemoteStub, RemoteRef)": {
        "args": [
            "RemoteStub", 
            "RemoteRef"
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.net.Socket.getReuseAddress()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SocketException"
        ], 
        "throws": [
            "SocketException"
        ]
    }, 
    "java.beans.beancontext.BeanContextServicesSupport.getCurrentServiceClasses()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.UID.read(DataInput)": {
        "args": [
            "DataInput"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.lang.reflect.Executable.getGenericParameterTypes()": {
        "args": [
            ""
        ], 
        "@throws": [
            "GenericSignatureFormatError", 
            "TypeNotPresentException", 
            "MalformedParameterizedTypeException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServiceAvailableEvent.getSourceAsBeanContextServices()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.SecurityManager.checkSystemClipboardAccess()": {
        "args": [
            ""
        ], 
        "@throws": [
            "SecurityException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.AsynchronousFileChannel.write(ByteBuffer, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "ByteBuffer", 
            "long"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "NonWritableChannelException"
        ], 
        "throws": []
    }, 
    "java.util.UUID.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Statement.getConnection()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "SQLException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.security.cert.CertificateFactory.getCertPathEncodings()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.Date.getSeconds()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.prefs.Preferences.parent()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "IllegalStateException"
        ], 
        "throws": []
    }, 
    "java.awt.event.HierarchyBoundsAdapter.ancestorMoved(HierarchyEvent)": {
        "args": [
            "HierarchyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.AffineTransformOp.getRenderingHints()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.BlockingDeque.iterator()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.server.LogStream.log(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Appendable.append(CharSequence, int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "CharSequence", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.Arrays.fill(Object[], int, int, Object)": {
        "args": [
            "Object[]", 
            "int", 
            "int", 
            "Object"
        ], 
        "@throws": [
            "IllegalArgumentException", 
            "ArrayIndexOutOfBoundsException", 
            "ArrayStoreException"
        ], 
        "throws": []
    }, 
    "java.lang.Math.rint(double)": {
        "args": [
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.io.PipedReader.read(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.SimpleTimeZone.setStartRule(int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.Arrays.fill(double[], double)": {
        "args": [
            "double[]", 
            "double"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.TextField.setText(String)": {
        "args": [
            "String"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.YearMonth.withYear(int)": {
        "args": [
            "int"
        ], 
        "@throws": [
            "DateTimeException"
        ], 
        "throws": []
    }, 
    "java.awt.peer.KeyboardFocusManagerPeer.setCurrentFocusOwner(Component)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Component"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.ScheduledThreadPoolExecutor.scheduleWithFixedDelay(Runnable, long, long, TimeUnit)": {
        "args": [
            "Runnable", 
            "long", 
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "RejectedExecutionException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.DelayQueue.drainTo(Collection, int)": {
        "args": [
            "Collection", 
            "int"
        ], 
        "@throws": [
            "UnsupportedOperationException", 
            "ClassCastException", 
            "NullPointerException", 
            "IllegalArgumentException"
        ], 
        "throws": []
    }, 
    "java.net.HttpURLConnection.setRequestMethod(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "ProtocolException", 
            "SecurityException"
        ], 
        "throws": [
            "ProtocolException"
        ]
    }, 
    "java.net.SecureCacheResponse.getLocalCertificateChain()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.zip.InflaterInputStream.skip(long)": {
        "args": [
            "long"
        ], 
        "@throws": [
            "IOException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.math.BigInteger.remainder(BigInteger)": {
        "args": [
            "BigInteger"
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.util.Locale.lookup(List, Collection)": {
        "args": [
            "List", 
            "Collection"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.awt.Font.isItalic()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URL.openStream()": {
        "args": [
            ""
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Container.addNotify()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.String.copyValueOf(char[], int, int)": {
        "args": [
            "char[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.awt.color.ICC_ColorSpace.toRGB(float[])": {
        "args": [
            "float[]"
        ], 
        "@throws": [
            "ArrayIndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.beans.beancontext.BeanContextServiceRevokedEvent.getSourceAsBeanContextServices()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.OptionalDouble.empty()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.KeyboardFocusManager.postProcessKeyEvent(KeyEvent)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "KeyEvent"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.UUID.clockSequence()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.awt.geom.QuadCurve2D.getP2()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URI.getRawUserInfo()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.Security.getProperty(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.io.ObjectInputStream.get(String, short)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "short"
        ], 
        "@throws": [
            "IOException", 
            "IllegalArgumentException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.Container.preferredSize()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.MultiPixelPackedSampleModel.getBitOffset(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.TypeVariable.getAnnotatedBounds()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.atomic.AtomicInteger.lazySet(int)": {
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Component.getGraphics()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.chrono.ChronoPeriod.equals(Object)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.rmi.activation.ActivationGroupDesc.hashCode()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.ComponentSampleModel.getSampleFloat(int, int, int, DataBuffer)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "DataBuffer"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.DoubleBuffer.put(DoubleBuffer)": {
        "args": [
            "DoubleBuffer"
        ], 
        "@throws": [
            "BufferOverflowException", 
            "IllegalArgumentException", 
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.awt.image.RescaleOp.getNumFactors()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.CallableStatement.setClob(String, Reader, long)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "String", 
            "Reader", 
            "long"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.geom.Arc2D.getAngleStart()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.Short.toString(short)": {
        "args": [
            "short"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Adjustable.setMaximum(int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.AbstractMap.clear()": {
        "args": [
            ""
        ], 
        "@throws": [
            "UnsupportedOperationException"
        ], 
        "throws": []
    }, 
    "java.nio.charset.Charset.isRegistered()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.concurrent.CyclicBarrier.await(long, TimeUnit)": {
        "args": [
            "long", 
            "TimeUnit"
        ], 
        "@throws": [
            "InterruptedException", 
            "TimeoutException", 
            "BrokenBarrierException"
        ], 
        "throws": [
            "InterruptedException", 
            "BrokenBarrierException", 
            "TimeoutException"
        ]
    }, 
    "java.beans.beancontext.BeanContextSupport.writeChildren(ObjectOutputStream)": {
        "args": [
            "ObjectOutputStream"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.AWTEventMulticaster.addInternal(EventListener, EventListener)": {
        "args": [
            "EventListener", 
            "EventListener"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.security.AlgorithmParameters.init(byte[])": {
        "args": [
            "byte[]"
        ], 
        "@throws": [
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.util.zip.ZipEntry.toString()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.Instant.toEpochMilli()": {
        "args": [
            ""
        ], 
        "@throws": [
            "ArithmeticException"
        ], 
        "throws": []
    }, 
    "java.nio.channels.SelectableChannel.isRegistered()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.Rectangle.setBounds(int, int, int, int)": {
        "args": [
            "int", 
            "int", 
            "int", 
            "int"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.List.getAccessibleRole()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.System.loadLibrary(String)": {
        "args": [
            "String"
        ], 
        "@throws": [
            "SecurityException", 
            "UnsatisfiedLinkError", 
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.nio.CharBuffer.compact()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [
            "ReadOnlyBufferException"
        ], 
        "throws": []
    }, 
    "java.lang.CharSequence.subSequence(int, int)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "int"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.lang.Number.byteValue()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.time.ZoneOffset.compareTo(ZoneOffset)": {
        "args": [
            "ZoneOffset"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CopyOnWriteArrayList.addIfAbsent(E)": {
        "args": [
            "E"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.net.URLPermission.implies(Permission)": {
        "args": [
            "Permission"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.RenderableImageProducer.setRenderContext(RenderContext)": {
        "args": [
            "RenderContext"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.lang.reflect.Modifier.constructorModifiers()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.OptionalLong.orElseGet(LongSupplier)": {
        "args": [
            "LongSupplier"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.security.AllPermission.equals(Object)": {
        "args": [
            "Object"
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.awt.image.renderable.ParameterBlock.getNumParameters()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.sql.PreparedStatement.setNClob(int, NClob)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "NClob"
        ], 
        "@throws": [
            "SQLException", 
            "SQLFeatureNotSupportedException"
        ], 
        "throws": [
            "SQLException"
        ]
    }, 
    "java.awt.font.GlyphVector.setGlyphTransform(int, AffineTransform)": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            "int", 
            "AffineTransform"
        ], 
        "@throws": [
            "IndexOutOfBoundsException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.CompletableFuture.join()": {
        "args": [
            ""
        ], 
        "@throws": [
            "CancellationException", 
            "CompletionException"
        ], 
        "throws": []
    }, 
    "java.util.concurrent.ConcurrentSkipListMap.getOrDefault(Object, V)": {
        "args": [
            "Object", 
            "V"
        ], 
        "@throws": [
            "NullPointerException"
        ], 
        "throws": []
    }, 
    "java.util.zip.ZipInputStream.read(byte[], int, int)": {
        "args": [
            "byte[]", 
            "int", 
            "int"
        ], 
        "@throws": [
            "NullPointerException", 
            "IndexOutOfBoundsException", 
            "ZipException", 
            "IOException"
        ], 
        "throws": [
            "IOException"
        ]
    }, 
    "java.awt.MenuBar.getAccessibleContext()": {
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.nio.LongBuffer.get(long[])": {
        "args": [
            "long[]"
        ], 
        "@throws": [
            "BufferUnderflowException"
        ], 
        "throws": []
    }, 
    "java.awt.dnd.peer.DropTargetContextPeer.rejectDrag()": {
        "Abstract": [
            "Y"
        ], 
        "args": [
            ""
        ], 
        "@throws": [], 
        "throws": []
    }, 
    "java.util.Calendar.setInstant(Date)": {
        "args": [
            "Date"
        ], 
        "@throws": [
            "NullPointerException", 
            "IllegalStateException"
        ], 
        "throws": []
    }
}